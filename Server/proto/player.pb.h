// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: player.proto

#ifndef PROTOBUF_INCLUDED_player_2eproto
#define PROTOBUF_INCLUDED_player_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_player_2eproto 

namespace protobuf_player_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[52];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_player_2eproto
namespace TCCamp {
class AddMoneyReq;
class AddMoneyReqDefaultTypeInternal;
extern AddMoneyReqDefaultTypeInternal _AddMoneyReq_default_instance_;
class AttackReq;
class AttackReqDefaultTypeInternal;
extern AttackReqDefaultTypeInternal _AttackReq_default_instance_;
class BagItemRsp;
class BagItemRspDefaultTypeInternal;
extern BagItemRspDefaultTypeInternal _BagItemRsp_default_instance_;
class BulletSynMsg;
class BulletSynMsgDefaultTypeInternal;
extern BulletSynMsgDefaultTypeInternal _BulletSynMsg_default_instance_;
class BulletsSynMsg;
class BulletsSynMsgDefaultTypeInternal;
extern BulletsSynMsgDefaultTypeInternal _BulletsSynMsg_default_instance_;
class BuyReq;
class BuyReqDefaultTypeInternal;
extern BuyReqDefaultTypeInternal _BuyReq_default_instance_;
class CharacterAnimSynMsg;
class CharacterAnimSynMsgDefaultTypeInternal;
extern CharacterAnimSynMsgDefaultTypeInternal _CharacterAnimSynMsg_default_instance_;
class CharacterStatueMsg;
class CharacterStatueMsgDefaultTypeInternal;
extern CharacterStatueMsgDefaultTypeInternal _CharacterStatueMsg_default_instance_;
class CharacterStatueReq;
class CharacterStatueReqDefaultTypeInternal;
extern CharacterStatueReqDefaultTypeInternal _CharacterStatueReq_default_instance_;
class CollisionReq;
class CollisionReqDefaultTypeInternal;
extern CollisionReqDefaultTypeInternal _CollisionReq_default_instance_;
class CreateRoomReq;
class CreateRoomReqDefaultTypeInternal;
extern CreateRoomReqDefaultTypeInternal _CreateRoomReq_default_instance_;
class DeleteItemReq;
class DeleteItemReqDefaultTypeInternal;
extern DeleteItemReqDefaultTypeInternal _DeleteItemReq_default_instance_;
class EnterRoomReq;
class EnterRoomReqDefaultTypeInternal;
extern EnterRoomReqDefaultTypeInternal _EnterRoomReq_default_instance_;
class EnterRoomRsp;
class EnterRoomRspDefaultTypeInternal;
extern EnterRoomRspDefaultTypeInternal _EnterRoomRsp_default_instance_;
class GameContinueRsp;
class GameContinueRspDefaultTypeInternal;
extern GameContinueRspDefaultTypeInternal _GameContinueRsp_default_instance_;
class GameResultRsp;
class GameResultRspDefaultTypeInternal;
extern GameResultRspDefaultTypeInternal _GameResultRsp_default_instance_;
class GameTimeRsp;
class GameTimeRspDefaultTypeInternal;
extern GameTimeRspDefaultTypeInternal _GameTimeRsp_default_instance_;
class ItemConfig;
class ItemConfigDefaultTypeInternal;
extern ItemConfigDefaultTypeInternal _ItemConfig_default_instance_;
class ItemConfigs;
class ItemConfigsDefaultTypeInternal;
extern ItemConfigsDefaultTypeInternal _ItemConfigs_default_instance_;
class ItemInfo;
class ItemInfoDefaultTypeInternal;
extern ItemInfoDefaultTypeInternal _ItemInfo_default_instance_;
class MoneyRsp;
class MoneyRspDefaultTypeInternal;
extern MoneyRspDefaultTypeInternal _MoneyRsp_default_instance_;
class MonsterAttributeMsg;
class MonsterAttributeMsgDefaultTypeInternal;
extern MonsterAttributeMsgDefaultTypeInternal _MonsterAttributeMsg_default_instance_;
class MonsterAttributeRsp;
class MonsterAttributeRspDefaultTypeInternal;
extern MonsterAttributeRspDefaultTypeInternal _MonsterAttributeRsp_default_instance_;
class MonsterSynMsg;
class MonsterSynMsgDefaultTypeInternal;
extern MonsterSynMsgDefaultTypeInternal _MonsterSynMsg_default_instance_;
class MonstersSynMsg;
class MonstersSynMsgDefaultTypeInternal;
extern MonstersSynMsgDefaultTypeInternal _MonstersSynMsg_default_instance_;
class NetAsyncMsg;
class NetAsyncMsgDefaultTypeInternal;
extern NetAsyncMsgDefaultTypeInternal _NetAsyncMsg_default_instance_;
class PlayerCreateReq;
class PlayerCreateReqDefaultTypeInternal;
extern PlayerCreateReqDefaultTypeInternal _PlayerCreateReq_default_instance_;
class PlayerCreateRsp;
class PlayerCreateRspDefaultTypeInternal;
extern PlayerCreateRspDefaultTypeInternal _PlayerCreateRsp_default_instance_;
class PlayerLoginReq;
class PlayerLoginReqDefaultTypeInternal;
extern PlayerLoginReqDefaultTypeInternal _PlayerLoginReq_default_instance_;
class PlayerLoginRsp;
class PlayerLoginRspDefaultTypeInternal;
extern PlayerLoginRspDefaultTypeInternal _PlayerLoginRsp_default_instance_;
class PlayerSaveData;
class PlayerSaveDataDefaultTypeInternal;
extern PlayerSaveDataDefaultTypeInternal _PlayerSaveData_default_instance_;
class PlayerSyncData;
class PlayerSyncDataDefaultTypeInternal;
extern PlayerSyncDataDefaultTypeInternal _PlayerSyncData_default_instance_;
class RPC;
class RPCDefaultTypeInternal;
extern RPCDefaultTypeInternal _RPC_default_instance_;
class RankListData;
class RankListDataDefaultTypeInternal;
extern RankListDataDefaultTypeInternal _RankListData_default_instance_;
class RankListMsg;
class RankListMsgDefaultTypeInternal;
extern RankListMsgDefaultTypeInternal _RankListMsg_default_instance_;
class RankListReq;
class RankListReqDefaultTypeInternal;
extern RankListReqDefaultTypeInternal _RankListReq_default_instance_;
class RankListRsp;
class RankListRspDefaultTypeInternal;
extern RankListRspDefaultTypeInternal _RankListRsp_default_instance_;
class RemoveCharacterRsp;
class RemoveCharacterRspDefaultTypeInternal;
extern RemoveCharacterRspDefaultTypeInternal _RemoveCharacterRsp_default_instance_;
class RoomInfoMsg;
class RoomInfoMsgDefaultTypeInternal;
extern RoomInfoMsgDefaultTypeInternal _RoomInfoMsg_default_instance_;
class RoomInfoReq;
class RoomInfoReqDefaultTypeInternal;
extern RoomInfoReqDefaultTypeInternal _RoomInfoReq_default_instance_;
class RoomInfoRsp;
class RoomInfoRspDefaultTypeInternal;
extern RoomInfoRspDefaultTypeInternal _RoomInfoRsp_default_instance_;
class RoomNumChange;
class RoomNumChangeDefaultTypeInternal;
extern RoomNumChangeDefaultTypeInternal _RoomNumChange_default_instance_;
class SceneBriefMsg;
class SceneBriefMsgDefaultTypeInternal;
extern SceneBriefMsgDefaultTypeInternal _SceneBriefMsg_default_instance_;
class SceneBriefRsp;
class SceneBriefRspDefaultTypeInternal;
extern SceneBriefRspDefaultTypeInternal _SceneBriefRsp_default_instance_;
class SceneMonsterRsp;
class SceneMonsterRspDefaultTypeInternal;
extern SceneMonsterRspDefaultTypeInternal _SceneMonsterRsp_default_instance_;
class SceneObjectMsg;
class SceneObjectMsgDefaultTypeInternal;
extern SceneObjectMsgDefaultTypeInternal _SceneObjectMsg_default_instance_;
class SceneObjectRsp;
class SceneObjectRspDefaultTypeInternal;
extern SceneObjectRspDefaultTypeInternal _SceneObjectRsp_default_instance_;
class ScoreRsp;
class ScoreRspDefaultTypeInternal;
extern ScoreRspDefaultTypeInternal _ScoreRsp_default_instance_;
class ShopItemRsp;
class ShopItemRspDefaultTypeInternal;
extern ShopItemRspDefaultTypeInternal _ShopItemRsp_default_instance_;
class StatueCodeRsp;
class StatueCodeRspDefaultTypeInternal;
extern StatueCodeRspDefaultTypeInternal _StatueCodeRsp_default_instance_;
class SyncAnnounce;
class SyncAnnounceDefaultTypeInternal;
extern SyncAnnounceDefaultTypeInternal _SyncAnnounce_default_instance_;
class Vec3Msg;
class Vec3MsgDefaultTypeInternal;
extern Vec3MsgDefaultTypeInternal _Vec3Msg_default_instance_;
}  // namespace TCCamp
namespace google {
namespace protobuf {
template<> ::TCCamp::AddMoneyReq* Arena::CreateMaybeMessage<::TCCamp::AddMoneyReq>(Arena*);
template<> ::TCCamp::AttackReq* Arena::CreateMaybeMessage<::TCCamp::AttackReq>(Arena*);
template<> ::TCCamp::BagItemRsp* Arena::CreateMaybeMessage<::TCCamp::BagItemRsp>(Arena*);
template<> ::TCCamp::BulletSynMsg* Arena::CreateMaybeMessage<::TCCamp::BulletSynMsg>(Arena*);
template<> ::TCCamp::BulletsSynMsg* Arena::CreateMaybeMessage<::TCCamp::BulletsSynMsg>(Arena*);
template<> ::TCCamp::BuyReq* Arena::CreateMaybeMessage<::TCCamp::BuyReq>(Arena*);
template<> ::TCCamp::CharacterAnimSynMsg* Arena::CreateMaybeMessage<::TCCamp::CharacterAnimSynMsg>(Arena*);
template<> ::TCCamp::CharacterStatueMsg* Arena::CreateMaybeMessage<::TCCamp::CharacterStatueMsg>(Arena*);
template<> ::TCCamp::CharacterStatueReq* Arena::CreateMaybeMessage<::TCCamp::CharacterStatueReq>(Arena*);
template<> ::TCCamp::CollisionReq* Arena::CreateMaybeMessage<::TCCamp::CollisionReq>(Arena*);
template<> ::TCCamp::CreateRoomReq* Arena::CreateMaybeMessage<::TCCamp::CreateRoomReq>(Arena*);
template<> ::TCCamp::DeleteItemReq* Arena::CreateMaybeMessage<::TCCamp::DeleteItemReq>(Arena*);
template<> ::TCCamp::EnterRoomReq* Arena::CreateMaybeMessage<::TCCamp::EnterRoomReq>(Arena*);
template<> ::TCCamp::EnterRoomRsp* Arena::CreateMaybeMessage<::TCCamp::EnterRoomRsp>(Arena*);
template<> ::TCCamp::GameContinueRsp* Arena::CreateMaybeMessage<::TCCamp::GameContinueRsp>(Arena*);
template<> ::TCCamp::GameResultRsp* Arena::CreateMaybeMessage<::TCCamp::GameResultRsp>(Arena*);
template<> ::TCCamp::GameTimeRsp* Arena::CreateMaybeMessage<::TCCamp::GameTimeRsp>(Arena*);
template<> ::TCCamp::ItemConfig* Arena::CreateMaybeMessage<::TCCamp::ItemConfig>(Arena*);
template<> ::TCCamp::ItemConfigs* Arena::CreateMaybeMessage<::TCCamp::ItemConfigs>(Arena*);
template<> ::TCCamp::ItemInfo* Arena::CreateMaybeMessage<::TCCamp::ItemInfo>(Arena*);
template<> ::TCCamp::MoneyRsp* Arena::CreateMaybeMessage<::TCCamp::MoneyRsp>(Arena*);
template<> ::TCCamp::MonsterAttributeMsg* Arena::CreateMaybeMessage<::TCCamp::MonsterAttributeMsg>(Arena*);
template<> ::TCCamp::MonsterAttributeRsp* Arena::CreateMaybeMessage<::TCCamp::MonsterAttributeRsp>(Arena*);
template<> ::TCCamp::MonsterSynMsg* Arena::CreateMaybeMessage<::TCCamp::MonsterSynMsg>(Arena*);
template<> ::TCCamp::MonstersSynMsg* Arena::CreateMaybeMessage<::TCCamp::MonstersSynMsg>(Arena*);
template<> ::TCCamp::NetAsyncMsg* Arena::CreateMaybeMessage<::TCCamp::NetAsyncMsg>(Arena*);
template<> ::TCCamp::PlayerCreateReq* Arena::CreateMaybeMessage<::TCCamp::PlayerCreateReq>(Arena*);
template<> ::TCCamp::PlayerCreateRsp* Arena::CreateMaybeMessage<::TCCamp::PlayerCreateRsp>(Arena*);
template<> ::TCCamp::PlayerLoginReq* Arena::CreateMaybeMessage<::TCCamp::PlayerLoginReq>(Arena*);
template<> ::TCCamp::PlayerLoginRsp* Arena::CreateMaybeMessage<::TCCamp::PlayerLoginRsp>(Arena*);
template<> ::TCCamp::PlayerSaveData* Arena::CreateMaybeMessage<::TCCamp::PlayerSaveData>(Arena*);
template<> ::TCCamp::PlayerSyncData* Arena::CreateMaybeMessage<::TCCamp::PlayerSyncData>(Arena*);
template<> ::TCCamp::RPC* Arena::CreateMaybeMessage<::TCCamp::RPC>(Arena*);
template<> ::TCCamp::RankListData* Arena::CreateMaybeMessage<::TCCamp::RankListData>(Arena*);
template<> ::TCCamp::RankListMsg* Arena::CreateMaybeMessage<::TCCamp::RankListMsg>(Arena*);
template<> ::TCCamp::RankListReq* Arena::CreateMaybeMessage<::TCCamp::RankListReq>(Arena*);
template<> ::TCCamp::RankListRsp* Arena::CreateMaybeMessage<::TCCamp::RankListRsp>(Arena*);
template<> ::TCCamp::RemoveCharacterRsp* Arena::CreateMaybeMessage<::TCCamp::RemoveCharacterRsp>(Arena*);
template<> ::TCCamp::RoomInfoMsg* Arena::CreateMaybeMessage<::TCCamp::RoomInfoMsg>(Arena*);
template<> ::TCCamp::RoomInfoReq* Arena::CreateMaybeMessage<::TCCamp::RoomInfoReq>(Arena*);
template<> ::TCCamp::RoomInfoRsp* Arena::CreateMaybeMessage<::TCCamp::RoomInfoRsp>(Arena*);
template<> ::TCCamp::RoomNumChange* Arena::CreateMaybeMessage<::TCCamp::RoomNumChange>(Arena*);
template<> ::TCCamp::SceneBriefMsg* Arena::CreateMaybeMessage<::TCCamp::SceneBriefMsg>(Arena*);
template<> ::TCCamp::SceneBriefRsp* Arena::CreateMaybeMessage<::TCCamp::SceneBriefRsp>(Arena*);
template<> ::TCCamp::SceneMonsterRsp* Arena::CreateMaybeMessage<::TCCamp::SceneMonsterRsp>(Arena*);
template<> ::TCCamp::SceneObjectMsg* Arena::CreateMaybeMessage<::TCCamp::SceneObjectMsg>(Arena*);
template<> ::TCCamp::SceneObjectRsp* Arena::CreateMaybeMessage<::TCCamp::SceneObjectRsp>(Arena*);
template<> ::TCCamp::ScoreRsp* Arena::CreateMaybeMessage<::TCCamp::ScoreRsp>(Arena*);
template<> ::TCCamp::ShopItemRsp* Arena::CreateMaybeMessage<::TCCamp::ShopItemRsp>(Arena*);
template<> ::TCCamp::StatueCodeRsp* Arena::CreateMaybeMessage<::TCCamp::StatueCodeRsp>(Arena*);
template<> ::TCCamp::SyncAnnounce* Arena::CreateMaybeMessage<::TCCamp::SyncAnnounce>(Arena*);
template<> ::TCCamp::Vec3Msg* Arena::CreateMaybeMessage<::TCCamp::Vec3Msg>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace TCCamp {

enum CLIENT_CMD {
  CLIENT_CMD_INVALID = 0,
  CLIENT_CMD_BEGIN = 30000,
  CLIENT_PING = 30001,
  CLIENT_ADD_REQ = 30003,
  CLIENT_LOGIN_REQ = 30004,
  CLIENT_LOGOUT_REQ = 30005,
  CLIENT_CREATE_REQ = 30006,
  CLIENT_ANNOUNCE_REQ = 30007,
  CLIENT_CHARACTERADD_REQ = 30014,
  CLIENT_UPDATESTATUE_REQ = 30015,
  CLIENT_CHARACTERREMOVE_REQ = 30016,
  CLIENT_SCENEBRIEF_REQ = 30024,
  CLIENT_MONSTERATTRIBUTE_REQ = 30025,
  CLIENT_SCENEDETAIL_REQ = 30026,
  CLIENT_SCENESYN_REQ = 30027,
  CLIENT_ATTACK_REQ = 30028,
  CLIENT_BULLETSYN_REQ = 30029,
  CLIENT_RANKLIST_REQ = 30030,
  CLIENT_START_REQ = 30031,
  CLIENT_END_REQ = 30032,
  CLIENT_RPC_REQ = 30033,
  CLIENT_ROOM_REQ = 30034,
  CLIENT_ENTERROOM_REQ = 30035,
  CLIENT_CREATEROOM_REQ = 30036,
  CLIENT_EXITROOM_REQ = 30037,
  CLIENT_COLLISIONCHECK_REQ = 30038,
  CLIENT_MONSTERSYN_REQ = 30039,
  CLIENT_GAMETIME_REQ = 30040,
  CLIENT_GAMESCORE_REQ = 30041,
  CLIENT_GAMECONTINUE_REQ = 30042,
  CLIENT_BUYITEM_REQ = 30050,
  CLIENT_DELETEITEM_REQ = 30051,
  CLIENT_GETSHOPITEMS_REQ = 30052,
  CLIENT_GETBAGITEMS_REQ = 30053,
  CLIENT_GETMONEY_REQ = 30054,
  CLIENT_ADDMONEY_REQ = 30055,
  CLIENT_ITEMCONFIG_REQ = 30056,
  CLIENT_CMD_END = 33000,
  CLIENT_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CLIENT_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CLIENT_CMD_IsValid(int value);
const CLIENT_CMD CLIENT_CMD_MIN = CLIENT_CMD_INVALID;
const CLIENT_CMD CLIENT_CMD_MAX = CLIENT_CMD_END;
const int CLIENT_CMD_ARRAYSIZE = CLIENT_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* CLIENT_CMD_descriptor();
inline const ::std::string& CLIENT_CMD_Name(CLIENT_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    CLIENT_CMD_descriptor(), value);
}
inline bool CLIENT_CMD_Parse(
    const ::std::string& name, CLIENT_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CLIENT_CMD>(
    CLIENT_CMD_descriptor(), name, value);
}
enum SERVER_CMD {
  SERVER_CMD_INVALID = 0,
  SERVER_CMD_BEGIN = 1000,
  SERVER_PONG = 1001,
  SERVER_ADD_RSP = 1003,
  SERVER_LOGIN_RSP = 1004,
  SERVER_CREATE_RSP = 1005,
  SERVER_ANNOUNCE_RSP = 1006,
  SERVER_CHARACTERADD_RSP = 1014,
  SERVER_BROADCAST_CHARACTERSTATUE = 1015,
  SERVER_CHARACTERREMOVE_RSP = 1016,
  SERVER_CHARACTERANIMSYN_RSP = 1017,
  SERVER_SCENEBRIEF_RSP = 1024,
  SERVER_MONSTERATTRIBUTE_RSP = 1025,
  SERVER_ATTACK_RSP = 1027,
  SERVER_RANKLIST_RSP = 1028,
  SERVER_START_RSP = 1029,
  SERVER_END_RSP = 1030,
  SERVER_RPC_MSG = 1031,
  SERVER_ROOM_RSP = 1032,
  SERVER_ENTERROOM_RSP = 1033,
  SERVER_ROOMREADY_RSP = 1034,
  SERVER_ROOMNUMCHANGE_RSP = 1035,
  SERVER_SCENEMONSTER_RSP = 1036,
  SERVER_SCENEOBJECT_RSP = 1037,
  SERVER_MONSTERSYN_RSP = 1038,
  SERVER_BULLETSYN_RSP = 1039,
  SERVER_GAMETIME_RSP = 1040,
  SERVER_GAMESCORE_RSP = 1041,
  SERVER_GAMECONTINUE_RSP = 1042,
  SERVER_BUYITEM_RSP = 1050,
  SERVER_DELETEITEM_RSP = 1051,
  SERVER_GETSHOPITEMS_RSP = 1052,
  SERVER_GETBAGITEMS_RSP = 1053,
  SERVER_GETMONEY_RSP = 1054,
  SERVER_ADDMONEY_RSP = 1055,
  SERVER_ITEMCONFIG_RSP = 1056,
  GM_OPERATE_RSP = 1100,
  SERVER_CMD_END = 10000,
  SERVER_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SERVER_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SERVER_CMD_IsValid(int value);
const SERVER_CMD SERVER_CMD_MIN = SERVER_CMD_INVALID;
const SERVER_CMD SERVER_CMD_MAX = SERVER_CMD_END;
const int SERVER_CMD_ARRAYSIZE = SERVER_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* SERVER_CMD_descriptor();
inline const ::std::string& SERVER_CMD_Name(SERVER_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    SERVER_CMD_descriptor(), value);
}
inline bool SERVER_CMD_Parse(
    const ::std::string& name, SERVER_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SERVER_CMD>(
    SERVER_CMD_descriptor(), name, value);
}
enum RPC_CMD {
  RPC_BEGIN = 0,
  TRAP_STATUE_ENABLE = 1,
  TRAP_STATUE_DISABLE = 2,
  BOX_STATUE_OPEN = 3,
  LIGHT_STATUE_ON = 4,
  LIGHT_STATUE_OFF = 5,
  DOOR_STATUE_OPEN = 6,
  DOOR_STATUE_CLOSE = 7,
  TIME_UPDATE = 8,
  THROW_WEAPON = 9,
  RPC_END = 20,
  RPC_CMD_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RPC_CMD_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RPC_CMD_IsValid(int value);
const RPC_CMD RPC_CMD_MIN = RPC_BEGIN;
const RPC_CMD RPC_CMD_MAX = RPC_END;
const int RPC_CMD_ARRAYSIZE = RPC_CMD_MAX + 1;

const ::google::protobuf::EnumDescriptor* RPC_CMD_descriptor();
inline const ::std::string& RPC_CMD_Name(RPC_CMD value) {
  return ::google::protobuf::internal::NameOfEnum(
    RPC_CMD_descriptor(), value);
}
inline bool RPC_CMD_Parse(
    const ::std::string& name, RPC_CMD* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RPC_CMD>(
    RPC_CMD_descriptor(), name, value);
}
enum SceneObjectType {
  OBJECT_NONE = 0,
  PLAYER = 1,
  BULLET = 2,
  GHOST = 3,
  GARGOYLE = 4,
  DOOR = 5,
  LIGHT = 6,
  BOX = 7,
  SLIME = 8,
  TRAP = 9,
  FINISHLINE = 10,
  SceneObjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  SceneObjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool SceneObjectType_IsValid(int value);
const SceneObjectType SceneObjectType_MIN = OBJECT_NONE;
const SceneObjectType SceneObjectType_MAX = FINISHLINE;
const int SceneObjectType_ARRAYSIZE = SceneObjectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SceneObjectType_descriptor();
inline const ::std::string& SceneObjectType_Name(SceneObjectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SceneObjectType_descriptor(), value);
}
inline bool SceneObjectType_Parse(
    const ::std::string& name, SceneObjectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SceneObjectType>(
    SceneObjectType_descriptor(), name, value);
}
enum CharacterAnimType {
  ANIM_NONE = 0,
  OPENDOOR = 1,
  CLOSEDOOR = 2,
  TURNONLIGHT = 3,
  TURNOFFLIGHT = 4,
  OPENBOX = 5,
  ATTACK = 6,
  HURT = 7,
  CharacterAnimType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CharacterAnimType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CharacterAnimType_IsValid(int value);
const CharacterAnimType CharacterAnimType_MIN = ANIM_NONE;
const CharacterAnimType CharacterAnimType_MAX = HURT;
const int CharacterAnimType_ARRAYSIZE = CharacterAnimType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CharacterAnimType_descriptor();
inline const ::std::string& CharacterAnimType_Name(CharacterAnimType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CharacterAnimType_descriptor(), value);
}
inline bool CharacterAnimType_Parse(
    const ::std::string& name, CharacterAnimType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CharacterAnimType>(
    CharacterAnimType_descriptor(), name, value);
}
enum StatueCode {
  STATUE_CODE_INVALID = 0,
  STATUE_CODE_BEGIN = 50000,
  STATUE_SUCCESS = 50001,
  STATUE_MONEY_NOTENOUGH = 50002,
  STATUE_BUY_ITEMNOTENOUGH = 50003,
  STATUE_DELETE_ITEMNOTENOUGH = 50004,
  STATUE_ITEM_ITEMNOTEXIST = 50005,
  STATUE_NOTEXIST = 50006,
  STATUE_CODE_END = 51000,
  StatueCode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  StatueCode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool StatueCode_IsValid(int value);
const StatueCode StatueCode_MIN = STATUE_CODE_INVALID;
const StatueCode StatueCode_MAX = STATUE_CODE_END;
const int StatueCode_ARRAYSIZE = StatueCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatueCode_descriptor();
inline const ::std::string& StatueCode_Name(StatueCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatueCode_descriptor(), value);
}
inline bool StatueCode_Parse(
    const ::std::string& name, StatueCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatueCode>(
    StatueCode_descriptor(), name, value);
}
// ===================================================================

class CollisionReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.CollisionReq) */ {
 public:
  CollisionReq();
  virtual ~CollisionReq();

  CollisionReq(const CollisionReq& from);

  inline CollisionReq& operator=(const CollisionReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CollisionReq(CollisionReq&& from) noexcept
    : CollisionReq() {
    *this = ::std::move(from);
  }

  inline CollisionReq& operator=(CollisionReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CollisionReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CollisionReq* internal_default_instance() {
    return reinterpret_cast<const CollisionReq*>(
               &_CollisionReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CollisionReq* other);
  friend void swap(CollisionReq& a, CollisionReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CollisionReq* New() const final {
    return CreateMaybeMessage<CollisionReq>(NULL);
  }

  CollisionReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CollisionReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CollisionReq& from);
  void MergeFrom(const CollisionReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CollisionReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TCCamp.SceneObjectType typeA = 1;
  void clear_typea();
  static const int kTypeAFieldNumber = 1;
  ::TCCamp::SceneObjectType typea() const;
  void set_typea(::TCCamp::SceneObjectType value);

  // int32 idA = 2;
  void clear_ida();
  static const int kIdAFieldNumber = 2;
  ::google::protobuf::int32 ida() const;
  void set_ida(::google::protobuf::int32 value);

  // .TCCamp.SceneObjectType typeB = 3;
  void clear_typeb();
  static const int kTypeBFieldNumber = 3;
  ::TCCamp::SceneObjectType typeb() const;
  void set_typeb(::TCCamp::SceneObjectType value);

  // int32 idB = 4;
  void clear_idb();
  static const int kIdBFieldNumber = 4;
  ::google::protobuf::int32 idb() const;
  void set_idb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.CollisionReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int typea_;
  ::google::protobuf::int32 ida_;
  int typeb_;
  ::google::protobuf::int32 idb_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RPC : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.RPC) */ {
 public:
  RPC();
  virtual ~RPC();

  RPC(const RPC& from);

  inline RPC& operator=(const RPC& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RPC(RPC&& from) noexcept
    : RPC() {
    *this = ::std::move(from);
  }

  inline RPC& operator=(RPC&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPC& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RPC* internal_default_instance() {
    return reinterpret_cast<const RPC*>(
               &_RPC_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RPC* other);
  friend void swap(RPC& a, RPC& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RPC* New() const final {
    return CreateMaybeMessage<RPC>(NULL);
  }

  RPC* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RPC>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RPC& from);
  void MergeFrom(const RPC& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RPC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 param = 2;
  int param_size() const;
  void clear_param();
  static const int kParamFieldNumber = 2;
  ::google::protobuf::int32 param(int index) const;
  void set_param(int index, ::google::protobuf::int32 value);
  void add_param(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      param() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_param();

  // .TCCamp.RPC_CMD cmd = 1;
  void clear_cmd();
  static const int kCmdFieldNumber = 1;
  ::TCCamp::RPC_CMD cmd() const;
  void set_cmd(::TCCamp::RPC_CMD value);

  // @@protoc_insertion_point(class_scope:TCCamp.RPC)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > param_;
  mutable int _param_cached_byte_size_;
  int cmd_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerLoginReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerLoginReq) */ {
 public:
  PlayerLoginReq();
  virtual ~PlayerLoginReq();

  PlayerLoginReq(const PlayerLoginReq& from);

  inline PlayerLoginReq& operator=(const PlayerLoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerLoginReq(PlayerLoginReq&& from) noexcept
    : PlayerLoginReq() {
    *this = ::std::move(from);
  }

  inline PlayerLoginReq& operator=(PlayerLoginReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerLoginReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerLoginReq* internal_default_instance() {
    return reinterpret_cast<const PlayerLoginReq*>(
               &_PlayerLoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PlayerLoginReq* other);
  friend void swap(PlayerLoginReq& a, PlayerLoginReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerLoginReq* New() const final {
    return CreateMaybeMessage<PlayerLoginReq>(NULL);
  }

  PlayerLoginReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerLoginReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerLoginReq& from);
  void MergeFrom(const PlayerLoginReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerLoginReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerLoginReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerLoginRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerLoginRsp) */ {
 public:
  PlayerLoginRsp();
  virtual ~PlayerLoginRsp();

  PlayerLoginRsp(const PlayerLoginRsp& from);

  inline PlayerLoginRsp& operator=(const PlayerLoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerLoginRsp(PlayerLoginRsp&& from) noexcept
    : PlayerLoginRsp() {
    *this = ::std::move(from);
  }

  inline PlayerLoginRsp& operator=(PlayerLoginRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerLoginRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerLoginRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerLoginRsp*>(
               &_PlayerLoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PlayerLoginRsp* other);
  friend void swap(PlayerLoginRsp& a, PlayerLoginRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerLoginRsp* New() const final {
    return CreateMaybeMessage<PlayerLoginRsp>(NULL);
  }

  PlayerLoginRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerLoginRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerLoginRsp& from);
  void MergeFrom(const PlayerLoginRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerLoginRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // .TCCamp.PlayerSyncData PlayerData = 3;
  bool has_playerdata() const;
  void clear_playerdata();
  static const int kPlayerDataFieldNumber = 3;
  private:
  const ::TCCamp::PlayerSyncData& _internal_playerdata() const;
  public:
  const ::TCCamp::PlayerSyncData& playerdata() const;
  ::TCCamp::PlayerSyncData* release_playerdata();
  ::TCCamp::PlayerSyncData* mutable_playerdata();
  void set_allocated_playerdata(::TCCamp::PlayerSyncData* playerdata);

  // int32 Result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerLoginRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::TCCamp::PlayerSyncData* playerdata_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerSaveData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerSaveData) */ {
 public:
  PlayerSaveData();
  virtual ~PlayerSaveData();

  PlayerSaveData(const PlayerSaveData& from);

  inline PlayerSaveData& operator=(const PlayerSaveData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerSaveData(PlayerSaveData&& from) noexcept
    : PlayerSaveData() {
    *this = ::std::move(from);
  }

  inline PlayerSaveData& operator=(PlayerSaveData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSaveData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerSaveData* internal_default_instance() {
    return reinterpret_cast<const PlayerSaveData*>(
               &_PlayerSaveData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(PlayerSaveData* other);
  friend void swap(PlayerSaveData& a, PlayerSaveData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerSaveData* New() const final {
    return CreateMaybeMessage<PlayerSaveData>(NULL);
  }

  PlayerSaveData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerSaveData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerSaveData& from);
  void MergeFrom(const PlayerSaveData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSaveData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // bytes Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerSaveData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerSyncData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerSyncData) */ {
 public:
  PlayerSyncData();
  virtual ~PlayerSyncData();

  PlayerSyncData(const PlayerSyncData& from);

  inline PlayerSyncData& operator=(const PlayerSyncData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerSyncData(PlayerSyncData&& from) noexcept
    : PlayerSyncData() {
    *this = ::std::move(from);
  }

  inline PlayerSyncData& operator=(PlayerSyncData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerSyncData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerSyncData* internal_default_instance() {
    return reinterpret_cast<const PlayerSyncData*>(
               &_PlayerSyncData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(PlayerSyncData* other);
  friend void swap(PlayerSyncData& a, PlayerSyncData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerSyncData* New() const final {
    return CreateMaybeMessage<PlayerSyncData>(NULL);
  }

  PlayerSyncData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerSyncData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerSyncData& from);
  void MergeFrom(const PlayerSyncData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerSyncData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Playerid = 2;
  void clear_playerid();
  static const int kPlayeridFieldNumber = 2;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerSyncData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoomInfoMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.RoomInfoMsg) */ {
 public:
  RoomInfoMsg();
  virtual ~RoomInfoMsg();

  RoomInfoMsg(const RoomInfoMsg& from);

  inline RoomInfoMsg& operator=(const RoomInfoMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoomInfoMsg(RoomInfoMsg&& from) noexcept
    : RoomInfoMsg() {
    *this = ::std::move(from);
  }

  inline RoomInfoMsg& operator=(RoomInfoMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomInfoMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomInfoMsg* internal_default_instance() {
    return reinterpret_cast<const RoomInfoMsg*>(
               &_RoomInfoMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(RoomInfoMsg* other);
  friend void swap(RoomInfoMsg& a, RoomInfoMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomInfoMsg* New() const final {
    return CreateMaybeMessage<RoomInfoMsg>(NULL);
  }

  RoomInfoMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoomInfoMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoomInfoMsg& from);
  void MergeFrom(const RoomInfoMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfoMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string roomName = 1;
  void clear_roomname();
  static const int kRoomNameFieldNumber = 1;
  const ::std::string& roomname() const;
  void set_roomname(const ::std::string& value);
  #if LANG_CXX11
  void set_roomname(::std::string&& value);
  #endif
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  ::std::string* mutable_roomname();
  ::std::string* release_roomname();
  void set_allocated_roomname(::std::string* roomname);

  // int32 roomId = 2;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 2;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // int32 maxNum = 3;
  void clear_maxnum();
  static const int kMaxNumFieldNumber = 3;
  ::google::protobuf::int32 maxnum() const;
  void set_maxnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.RoomInfoMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr roomname_;
  ::google::protobuf::int32 roomid_;
  ::google::protobuf::int32 maxnum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoomInfoReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.RoomInfoReq) */ {
 public:
  RoomInfoReq();
  virtual ~RoomInfoReq();

  RoomInfoReq(const RoomInfoReq& from);

  inline RoomInfoReq& operator=(const RoomInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoomInfoReq(RoomInfoReq&& from) noexcept
    : RoomInfoReq() {
    *this = ::std::move(from);
  }

  inline RoomInfoReq& operator=(RoomInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomInfoReq* internal_default_instance() {
    return reinterpret_cast<const RoomInfoReq*>(
               &_RoomInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(RoomInfoReq* other);
  friend void swap(RoomInfoReq& a, RoomInfoReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomInfoReq* New() const final {
    return CreateMaybeMessage<RoomInfoReq>(NULL);
  }

  RoomInfoReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoomInfoReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoomInfoReq& from);
  void MergeFrom(const RoomInfoReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfoReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 sceneId = 1;
  void clear_sceneid();
  static const int kSceneIdFieldNumber = 1;
  ::google::protobuf::int32 sceneid() const;
  void set_sceneid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.RoomInfoReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 sceneid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoomInfoRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.RoomInfoRsp) */ {
 public:
  RoomInfoRsp();
  virtual ~RoomInfoRsp();

  RoomInfoRsp(const RoomInfoRsp& from);

  inline RoomInfoRsp& operator=(const RoomInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoomInfoRsp(RoomInfoRsp&& from) noexcept
    : RoomInfoRsp() {
    *this = ::std::move(from);
  }

  inline RoomInfoRsp& operator=(RoomInfoRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomInfoRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomInfoRsp* internal_default_instance() {
    return reinterpret_cast<const RoomInfoRsp*>(
               &_RoomInfoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(RoomInfoRsp* other);
  friend void swap(RoomInfoRsp& a, RoomInfoRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomInfoRsp* New() const final {
    return CreateMaybeMessage<RoomInfoRsp>(NULL);
  }

  RoomInfoRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoomInfoRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoomInfoRsp& from);
  void MergeFrom(const RoomInfoRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomInfoRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.RoomInfoMsg RoomInfoList = 1;
  int roominfolist_size() const;
  void clear_roominfolist();
  static const int kRoomInfoListFieldNumber = 1;
  ::TCCamp::RoomInfoMsg* mutable_roominfolist(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::RoomInfoMsg >*
      mutable_roominfolist();
  const ::TCCamp::RoomInfoMsg& roominfolist(int index) const;
  ::TCCamp::RoomInfoMsg* add_roominfolist();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::RoomInfoMsg >&
      roominfolist() const;

  // @@protoc_insertion_point(class_scope:TCCamp.RoomInfoRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::RoomInfoMsg > roominfolist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoomNumChange : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.RoomNumChange) */ {
 public:
  RoomNumChange();
  virtual ~RoomNumChange();

  RoomNumChange(const RoomNumChange& from);

  inline RoomNumChange& operator=(const RoomNumChange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RoomNumChange(RoomNumChange&& from) noexcept
    : RoomNumChange() {
    *this = ::std::move(from);
  }

  inline RoomNumChange& operator=(RoomNumChange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RoomNumChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoomNumChange* internal_default_instance() {
    return reinterpret_cast<const RoomNumChange*>(
               &_RoomNumChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(RoomNumChange* other);
  friend void swap(RoomNumChange& a, RoomNumChange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RoomNumChange* New() const final {
    return CreateMaybeMessage<RoomNumChange>(NULL);
  }

  RoomNumChange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RoomNumChange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RoomNumChange& from);
  void MergeFrom(const RoomNumChange& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoomNumChange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 currentNum = 1;
  void clear_currentnum();
  static const int kCurrentNumFieldNumber = 1;
  ::google::protobuf::int32 currentnum() const;
  void set_currentnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.RoomNumChange)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 currentnum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EnterRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.EnterRoomReq) */ {
 public:
  EnterRoomReq();
  virtual ~EnterRoomReq();

  EnterRoomReq(const EnterRoomReq& from);

  inline EnterRoomReq& operator=(const EnterRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnterRoomReq(EnterRoomReq&& from) noexcept
    : EnterRoomReq() {
    *this = ::std::move(from);
  }

  inline EnterRoomReq& operator=(EnterRoomReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterRoomReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterRoomReq* internal_default_instance() {
    return reinterpret_cast<const EnterRoomReq*>(
               &_EnterRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(EnterRoomReq* other);
  friend void swap(EnterRoomReq& a, EnterRoomReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnterRoomReq* New() const final {
    return CreateMaybeMessage<EnterRoomReq>(NULL);
  }

  EnterRoomReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnterRoomReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EnterRoomReq& from);
  void MergeFrom(const EnterRoomReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 roomId = 1;
  void clear_roomid();
  static const int kRoomIdFieldNumber = 1;
  ::google::protobuf::int32 roomid() const;
  void set_roomid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.EnterRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 roomid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EnterRoomRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.EnterRoomRsp) */ {
 public:
  EnterRoomRsp();
  virtual ~EnterRoomRsp();

  EnterRoomRsp(const EnterRoomRsp& from);

  inline EnterRoomRsp& operator=(const EnterRoomRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnterRoomRsp(EnterRoomRsp&& from) noexcept
    : EnterRoomRsp() {
    *this = ::std::move(from);
  }

  inline EnterRoomRsp& operator=(EnterRoomRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnterRoomRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnterRoomRsp* internal_default_instance() {
    return reinterpret_cast<const EnterRoomRsp*>(
               &_EnterRoomRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(EnterRoomRsp* other);
  friend void swap(EnterRoomRsp& a, EnterRoomRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnterRoomRsp* New() const final {
    return CreateMaybeMessage<EnterRoomRsp>(NULL);
  }

  EnterRoomRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnterRoomRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EnterRoomRsp& from);
  void MergeFrom(const EnterRoomRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnterRoomRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string resStr = 2;
  void clear_resstr();
  static const int kResStrFieldNumber = 2;
  const ::std::string& resstr() const;
  void set_resstr(const ::std::string& value);
  #if LANG_CXX11
  void set_resstr(::std::string&& value);
  #endif
  void set_resstr(const char* value);
  void set_resstr(const char* value, size_t size);
  ::std::string* mutable_resstr();
  ::std::string* release_resstr();
  void set_allocated_resstr(::std::string* resstr);

  // .TCCamp.RoomInfoMsg roomInfo = 3;
  bool has_roominfo() const;
  void clear_roominfo();
  static const int kRoomInfoFieldNumber = 3;
  private:
  const ::TCCamp::RoomInfoMsg& _internal_roominfo() const;
  public:
  const ::TCCamp::RoomInfoMsg& roominfo() const;
  ::TCCamp::RoomInfoMsg* release_roominfo();
  ::TCCamp::RoomInfoMsg* mutable_roominfo();
  void set_allocated_roominfo(::TCCamp::RoomInfoMsg* roominfo);

  // int32 resCode = 1;
  void clear_rescode();
  static const int kResCodeFieldNumber = 1;
  ::google::protobuf::int32 rescode() const;
  void set_rescode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.EnterRoomRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr resstr_;
  ::TCCamp::RoomInfoMsg* roominfo_;
  ::google::protobuf::int32 rescode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateRoomReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.CreateRoomReq) */ {
 public:
  CreateRoomReq();
  virtual ~CreateRoomReq();

  CreateRoomReq(const CreateRoomReq& from);

  inline CreateRoomReq& operator=(const CreateRoomReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateRoomReq(CreateRoomReq&& from) noexcept
    : CreateRoomReq() {
    *this = ::std::move(from);
  }

  inline CreateRoomReq& operator=(CreateRoomReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRoomReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateRoomReq* internal_default_instance() {
    return reinterpret_cast<const CreateRoomReq*>(
               &_CreateRoomReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(CreateRoomReq* other);
  friend void swap(CreateRoomReq& a, CreateRoomReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateRoomReq* New() const final {
    return CreateMaybeMessage<CreateRoomReq>(NULL);
  }

  CreateRoomReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateRoomReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateRoomReq& from);
  void MergeFrom(const CreateRoomReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRoomReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string roomName = 1;
  void clear_roomname();
  static const int kRoomNameFieldNumber = 1;
  const ::std::string& roomname() const;
  void set_roomname(const ::std::string& value);
  #if LANG_CXX11
  void set_roomname(::std::string&& value);
  #endif
  void set_roomname(const char* value);
  void set_roomname(const char* value, size_t size);
  ::std::string* mutable_roomname();
  ::std::string* release_roomname();
  void set_allocated_roomname(::std::string* roomname);

  // int32 sceneId = 2;
  void clear_sceneid();
  static const int kSceneIdFieldNumber = 2;
  ::google::protobuf::int32 sceneid() const;
  void set_sceneid(::google::protobuf::int32 value);

  // int32 maxNum = 3;
  void clear_maxnum();
  static const int kMaxNumFieldNumber = 3;
  ::google::protobuf::int32 maxnum() const;
  void set_maxnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.CreateRoomReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr roomname_;
  ::google::protobuf::int32 sceneid_;
  ::google::protobuf::int32 maxnum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerCreateReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerCreateReq) */ {
 public:
  PlayerCreateReq();
  virtual ~PlayerCreateReq();

  PlayerCreateReq(const PlayerCreateReq& from);

  inline PlayerCreateReq& operator=(const PlayerCreateReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerCreateReq(PlayerCreateReq&& from) noexcept
    : PlayerCreateReq() {
    *this = ::std::move(from);
  }

  inline PlayerCreateReq& operator=(PlayerCreateReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerCreateReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerCreateReq* internal_default_instance() {
    return reinterpret_cast<const PlayerCreateReq*>(
               &_PlayerCreateReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(PlayerCreateReq* other);
  friend void swap(PlayerCreateReq& a, PlayerCreateReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerCreateReq* New() const final {
    return CreateMaybeMessage<PlayerCreateReq>(NULL);
  }

  PlayerCreateReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerCreateReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerCreateReq& from);
  void MergeFrom(const PlayerCreateReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerCreateReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 1;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string Password = 2;
  void clear_password();
  static const int kPasswordFieldNumber = 2;
  const ::std::string& password() const;
  void set_password(const ::std::string& value);
  #if LANG_CXX11
  void set_password(::std::string&& value);
  #endif
  void set_password(const char* value);
  void set_password(const char* value, size_t size);
  ::std::string* mutable_password();
  ::std::string* release_password();
  void set_allocated_password(::std::string* password);

  // bytes Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const void* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerCreateReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PlayerCreateRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.PlayerCreateRsp) */ {
 public:
  PlayerCreateRsp();
  virtual ~PlayerCreateRsp();

  PlayerCreateRsp(const PlayerCreateRsp& from);

  inline PlayerCreateRsp& operator=(const PlayerCreateRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerCreateRsp(PlayerCreateRsp&& from) noexcept
    : PlayerCreateRsp() {
    *this = ::std::move(from);
  }

  inline PlayerCreateRsp& operator=(PlayerCreateRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerCreateRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerCreateRsp* internal_default_instance() {
    return reinterpret_cast<const PlayerCreateRsp*>(
               &_PlayerCreateRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(PlayerCreateRsp* other);
  friend void swap(PlayerCreateRsp& a, PlayerCreateRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerCreateRsp* New() const final {
    return CreateMaybeMessage<PlayerCreateRsp>(NULL);
  }

  PlayerCreateRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PlayerCreateRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PlayerCreateRsp& from);
  void MergeFrom(const PlayerCreateRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerCreateRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string PlayerID = 2;
  void clear_playerid();
  static const int kPlayerIDFieldNumber = 2;
  const ::std::string& playerid() const;
  void set_playerid(const ::std::string& value);
  #if LANG_CXX11
  void set_playerid(::std::string&& value);
  #endif
  void set_playerid(const char* value);
  void set_playerid(const char* value, size_t size);
  ::std::string* mutable_playerid();
  ::std::string* release_playerid();
  void set_allocated_playerid(::std::string* playerid);

  // string Name = 3;
  void clear_name();
  static const int kNameFieldNumber = 3;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Reason = 4;
  void clear_reason();
  static const int kReasonFieldNumber = 4;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // int32 Result = 1;
  void clear_result();
  static const int kResultFieldNumber = 1;
  ::google::protobuf::int32 result() const;
  void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.PlayerCreateRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr playerid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  ::google::protobuf::int32 result_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SyncAnnounce : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.SyncAnnounce) */ {
 public:
  SyncAnnounce();
  virtual ~SyncAnnounce();

  SyncAnnounce(const SyncAnnounce& from);

  inline SyncAnnounce& operator=(const SyncAnnounce& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncAnnounce(SyncAnnounce&& from) noexcept
    : SyncAnnounce() {
    *this = ::std::move(from);
  }

  inline SyncAnnounce& operator=(SyncAnnounce&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncAnnounce& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncAnnounce* internal_default_instance() {
    return reinterpret_cast<const SyncAnnounce*>(
               &_SyncAnnounce_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(SyncAnnounce* other);
  friend void swap(SyncAnnounce& a, SyncAnnounce& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncAnnounce* New() const final {
    return CreateMaybeMessage<SyncAnnounce>(NULL);
  }

  SyncAnnounce* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncAnnounce>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncAnnounce& from);
  void MergeFrom(const SyncAnnounce& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncAnnounce* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes Announce = 1;
  void clear_announce();
  static const int kAnnounceFieldNumber = 1;
  const ::std::string& announce() const;
  void set_announce(const ::std::string& value);
  #if LANG_CXX11
  void set_announce(::std::string&& value);
  #endif
  void set_announce(const char* value);
  void set_announce(const void* value, size_t size);
  ::std::string* mutable_announce();
  ::std::string* release_announce();
  void set_allocated_announce(::std::string* announce);

  // @@protoc_insertion_point(class_scope:TCCamp.SyncAnnounce)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr announce_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneBriefRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.SceneBriefRsp) */ {
 public:
  SceneBriefRsp();
  virtual ~SceneBriefRsp();

  SceneBriefRsp(const SceneBriefRsp& from);

  inline SceneBriefRsp& operator=(const SceneBriefRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneBriefRsp(SceneBriefRsp&& from) noexcept
    : SceneBriefRsp() {
    *this = ::std::move(from);
  }

  inline SceneBriefRsp& operator=(SceneBriefRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneBriefRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneBriefRsp* internal_default_instance() {
    return reinterpret_cast<const SceneBriefRsp*>(
               &_SceneBriefRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(SceneBriefRsp* other);
  friend void swap(SceneBriefRsp& a, SceneBriefRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneBriefRsp* New() const final {
    return CreateMaybeMessage<SceneBriefRsp>(NULL);
  }

  SceneBriefRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SceneBriefRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SceneBriefRsp& from);
  void MergeFrom(const SceneBriefRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneBriefRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.SceneBriefMsg SceneBrief = 1;
  int scenebrief_size() const;
  void clear_scenebrief();
  static const int kSceneBriefFieldNumber = 1;
  ::TCCamp::SceneBriefMsg* mutable_scenebrief(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::SceneBriefMsg >*
      mutable_scenebrief();
  const ::TCCamp::SceneBriefMsg& scenebrief(int index) const;
  ::TCCamp::SceneBriefMsg* add_scenebrief();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::SceneBriefMsg >&
      scenebrief() const;

  // @@protoc_insertion_point(class_scope:TCCamp.SceneBriefRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::SceneBriefMsg > scenebrief_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneBriefMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.SceneBriefMsg) */ {
 public:
  SceneBriefMsg();
  virtual ~SceneBriefMsg();

  SceneBriefMsg(const SceneBriefMsg& from);

  inline SceneBriefMsg& operator=(const SceneBriefMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneBriefMsg(SceneBriefMsg&& from) noexcept
    : SceneBriefMsg() {
    *this = ::std::move(from);
  }

  inline SceneBriefMsg& operator=(SceneBriefMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneBriefMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneBriefMsg* internal_default_instance() {
    return reinterpret_cast<const SceneBriefMsg*>(
               &_SceneBriefMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(SceneBriefMsg* other);
  friend void swap(SceneBriefMsg& a, SceneBriefMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneBriefMsg* New() const final {
    return CreateMaybeMessage<SceneBriefMsg>(NULL);
  }

  SceneBriefMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SceneBriefMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SceneBriefMsg& from);
  void MergeFrom(const SceneBriefMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneBriefMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string SceneName = 1;
  void clear_scenename();
  static const int kSceneNameFieldNumber = 1;
  const ::std::string& scenename() const;
  void set_scenename(const ::std::string& value);
  #if LANG_CXX11
  void set_scenename(::std::string&& value);
  #endif
  void set_scenename(const char* value);
  void set_scenename(const char* value, size_t size);
  ::std::string* mutable_scenename();
  ::std::string* release_scenename();
  void set_allocated_scenename(::std::string* scenename);

  // int32 SceneId = 2;
  void clear_sceneid();
  static const int kSceneIdFieldNumber = 2;
  ::google::protobuf::int32 sceneid() const;
  void set_sceneid(::google::protobuf::int32 value);

  // int32 GargoyleCount = 3;
  void clear_gargoylecount();
  static const int kGargoyleCountFieldNumber = 3;
  ::google::protobuf::int32 gargoylecount() const;
  void set_gargoylecount(::google::protobuf::int32 value);

  // int32 GhostCount = 4;
  void clear_ghostcount();
  static const int kGhostCountFieldNumber = 4;
  ::google::protobuf::int32 ghostcount() const;
  void set_ghostcount(::google::protobuf::int32 value);

  // int32 Difficult = 5;
  void clear_difficult();
  static const int kDifficultFieldNumber = 5;
  ::google::protobuf::int32 difficult() const;
  void set_difficult(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.SceneBriefMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr scenename_;
  ::google::protobuf::int32 sceneid_;
  ::google::protobuf::int32 gargoylecount_;
  ::google::protobuf::int32 ghostcount_;
  ::google::protobuf::int32 difficult_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneObjectMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.SceneObjectMsg) */ {
 public:
  SceneObjectMsg();
  virtual ~SceneObjectMsg();

  SceneObjectMsg(const SceneObjectMsg& from);

  inline SceneObjectMsg& operator=(const SceneObjectMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneObjectMsg(SceneObjectMsg&& from) noexcept
    : SceneObjectMsg() {
    *this = ::std::move(from);
  }

  inline SceneObjectMsg& operator=(SceneObjectMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneObjectMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneObjectMsg* internal_default_instance() {
    return reinterpret_cast<const SceneObjectMsg*>(
               &_SceneObjectMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(SceneObjectMsg* other);
  friend void swap(SceneObjectMsg& a, SceneObjectMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneObjectMsg* New() const final {
    return CreateMaybeMessage<SceneObjectMsg>(NULL);
  }

  SceneObjectMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SceneObjectMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SceneObjectMsg& from);
  void MergeFrom(const SceneObjectMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneObjectMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TCCamp.Vec3Msg Position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  private:
  const ::TCCamp::Vec3Msg& _internal_position() const;
  public:
  const ::TCCamp::Vec3Msg& position() const;
  ::TCCamp::Vec3Msg* release_position();
  ::TCCamp::Vec3Msg* mutable_position();
  void set_allocated_position(::TCCamp::Vec3Msg* position);

  // .TCCamp.Vec3Msg Rotation = 4;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 4;
  private:
  const ::TCCamp::Vec3Msg& _internal_rotation() const;
  public:
  const ::TCCamp::Vec3Msg& rotation() const;
  ::TCCamp::Vec3Msg* release_rotation();
  ::TCCamp::Vec3Msg* mutable_rotation();
  void set_allocated_rotation(::TCCamp::Vec3Msg* rotation);

  // int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // .TCCamp.SceneObjectType Type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::TCCamp::SceneObjectType type() const;
  void set_type(::TCCamp::SceneObjectType value);

  // @@protoc_insertion_point(class_scope:TCCamp.SceneObjectMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TCCamp::Vec3Msg* position_;
  ::TCCamp::Vec3Msg* rotation_;
  ::google::protobuf::int32 id_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneMonsterRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.SceneMonsterRsp) */ {
 public:
  SceneMonsterRsp();
  virtual ~SceneMonsterRsp();

  SceneMonsterRsp(const SceneMonsterRsp& from);

  inline SceneMonsterRsp& operator=(const SceneMonsterRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneMonsterRsp(SceneMonsterRsp&& from) noexcept
    : SceneMonsterRsp() {
    *this = ::std::move(from);
  }

  inline SceneMonsterRsp& operator=(SceneMonsterRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneMonsterRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneMonsterRsp* internal_default_instance() {
    return reinterpret_cast<const SceneMonsterRsp*>(
               &_SceneMonsterRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(SceneMonsterRsp* other);
  friend void swap(SceneMonsterRsp& a, SceneMonsterRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneMonsterRsp* New() const final {
    return CreateMaybeMessage<SceneMonsterRsp>(NULL);
  }

  SceneMonsterRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SceneMonsterRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SceneMonsterRsp& from);
  void MergeFrom(const SceneMonsterRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneMonsterRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.SceneObjectMsg MonsterList = 1;
  int monsterlist_size() const;
  void clear_monsterlist();
  static const int kMonsterListFieldNumber = 1;
  ::TCCamp::SceneObjectMsg* mutable_monsterlist(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::SceneObjectMsg >*
      mutable_monsterlist();
  const ::TCCamp::SceneObjectMsg& monsterlist(int index) const;
  ::TCCamp::SceneObjectMsg* add_monsterlist();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::SceneObjectMsg >&
      monsterlist() const;

  // int32 NetId = 2;
  void clear_netid();
  static const int kNetIdFieldNumber = 2;
  ::google::protobuf::int32 netid() const;
  void set_netid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.SceneMonsterRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::SceneObjectMsg > monsterlist_;
  ::google::protobuf::int32 netid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SceneObjectRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.SceneObjectRsp) */ {
 public:
  SceneObjectRsp();
  virtual ~SceneObjectRsp();

  SceneObjectRsp(const SceneObjectRsp& from);

  inline SceneObjectRsp& operator=(const SceneObjectRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SceneObjectRsp(SceneObjectRsp&& from) noexcept
    : SceneObjectRsp() {
    *this = ::std::move(from);
  }

  inline SceneObjectRsp& operator=(SceneObjectRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneObjectRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SceneObjectRsp* internal_default_instance() {
    return reinterpret_cast<const SceneObjectRsp*>(
               &_SceneObjectRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(SceneObjectRsp* other);
  friend void swap(SceneObjectRsp& a, SceneObjectRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SceneObjectRsp* New() const final {
    return CreateMaybeMessage<SceneObjectRsp>(NULL);
  }

  SceneObjectRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SceneObjectRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SceneObjectRsp& from);
  void MergeFrom(const SceneObjectRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SceneObjectRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.SceneObjectMsg ObjectList = 1;
  int objectlist_size() const;
  void clear_objectlist();
  static const int kObjectListFieldNumber = 1;
  ::TCCamp::SceneObjectMsg* mutable_objectlist(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::SceneObjectMsg >*
      mutable_objectlist();
  const ::TCCamp::SceneObjectMsg& objectlist(int index) const;
  ::TCCamp::SceneObjectMsg* add_objectlist();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::SceneObjectMsg >&
      objectlist() const;

  // @@protoc_insertion_point(class_scope:TCCamp.SceneObjectRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::SceneObjectMsg > objectlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Vec3Msg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.Vec3Msg) */ {
 public:
  Vec3Msg();
  virtual ~Vec3Msg();

  Vec3Msg(const Vec3Msg& from);

  inline Vec3Msg& operator=(const Vec3Msg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Vec3Msg(Vec3Msg&& from) noexcept
    : Vec3Msg() {
    *this = ::std::move(from);
  }

  inline Vec3Msg& operator=(Vec3Msg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vec3Msg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vec3Msg* internal_default_instance() {
    return reinterpret_cast<const Vec3Msg*>(
               &_Vec3Msg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(Vec3Msg* other);
  friend void swap(Vec3Msg& a, Vec3Msg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Vec3Msg* New() const final {
    return CreateMaybeMessage<Vec3Msg>(NULL);
  }

  Vec3Msg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Vec3Msg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Vec3Msg& from);
  void MergeFrom(const Vec3Msg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vec3Msg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // @@protoc_insertion_point(class_scope:TCCamp.Vec3Msg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MonsterAttributeMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.MonsterAttributeMsg) */ {
 public:
  MonsterAttributeMsg();
  virtual ~MonsterAttributeMsg();

  MonsterAttributeMsg(const MonsterAttributeMsg& from);

  inline MonsterAttributeMsg& operator=(const MonsterAttributeMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonsterAttributeMsg(MonsterAttributeMsg&& from) noexcept
    : MonsterAttributeMsg() {
    *this = ::std::move(from);
  }

  inline MonsterAttributeMsg& operator=(MonsterAttributeMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterAttributeMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonsterAttributeMsg* internal_default_instance() {
    return reinterpret_cast<const MonsterAttributeMsg*>(
               &_MonsterAttributeMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(MonsterAttributeMsg* other);
  friend void swap(MonsterAttributeMsg& a, MonsterAttributeMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonsterAttributeMsg* New() const final {
    return CreateMaybeMessage<MonsterAttributeMsg>(NULL);
  }

  MonsterAttributeMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MonsterAttributeMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MonsterAttributeMsg& from);
  void MergeFrom(const MonsterAttributeMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonsterAttributeMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .TCCamp.SceneObjectType Type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::TCCamp::SceneObjectType type() const;
  void set_type(::TCCamp::SceneObjectType value);

  // int32 Attack = 3;
  void clear_attack();
  static const int kAttackFieldNumber = 3;
  ::google::protobuf::int32 attack() const;
  void set_attack(::google::protobuf::int32 value);

  // int32 Hp = 4;
  void clear_hp();
  static const int kHpFieldNumber = 4;
  ::google::protobuf::int32 hp() const;
  void set_hp(::google::protobuf::int32 value);

  // float Speed = 5;
  void clear_speed();
  static const int kSpeedFieldNumber = 5;
  float speed() const;
  void set_speed(float value);

  // int32 Value = 6;
  void clear_value();
  static const int kValueFieldNumber = 6;
  ::google::protobuf::int32 value() const;
  void set_value(::google::protobuf::int32 value);

  // float RebornTime = 7;
  void clear_reborntime();
  static const int kRebornTimeFieldNumber = 7;
  float reborntime() const;
  void set_reborntime(float value);

  // float DetectRange = 8;
  void clear_detectrange();
  static const int kDetectRangeFieldNumber = 8;
  float detectrange() const;
  void set_detectrange(float value);

  // @@protoc_insertion_point(class_scope:TCCamp.MonsterAttributeMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int type_;
  ::google::protobuf::int32 attack_;
  ::google::protobuf::int32 hp_;
  float speed_;
  ::google::protobuf::int32 value_;
  float reborntime_;
  float detectrange_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MonsterAttributeRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.MonsterAttributeRsp) */ {
 public:
  MonsterAttributeRsp();
  virtual ~MonsterAttributeRsp();

  MonsterAttributeRsp(const MonsterAttributeRsp& from);

  inline MonsterAttributeRsp& operator=(const MonsterAttributeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonsterAttributeRsp(MonsterAttributeRsp&& from) noexcept
    : MonsterAttributeRsp() {
    *this = ::std::move(from);
  }

  inline MonsterAttributeRsp& operator=(MonsterAttributeRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterAttributeRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonsterAttributeRsp* internal_default_instance() {
    return reinterpret_cast<const MonsterAttributeRsp*>(
               &_MonsterAttributeRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(MonsterAttributeRsp* other);
  friend void swap(MonsterAttributeRsp& a, MonsterAttributeRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonsterAttributeRsp* New() const final {
    return CreateMaybeMessage<MonsterAttributeRsp>(NULL);
  }

  MonsterAttributeRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MonsterAttributeRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MonsterAttributeRsp& from);
  void MergeFrom(const MonsterAttributeRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonsterAttributeRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.MonsterAttributeMsg AttributeList = 1;
  int attributelist_size() const;
  void clear_attributelist();
  static const int kAttributeListFieldNumber = 1;
  ::TCCamp::MonsterAttributeMsg* mutable_attributelist(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::MonsterAttributeMsg >*
      mutable_attributelist();
  const ::TCCamp::MonsterAttributeMsg& attributelist(int index) const;
  ::TCCamp::MonsterAttributeMsg* add_attributelist();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::MonsterAttributeMsg >&
      attributelist() const;

  // @@protoc_insertion_point(class_scope:TCCamp.MonsterAttributeRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::MonsterAttributeMsg > attributelist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MonsterSynMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.MonsterSynMsg) */ {
 public:
  MonsterSynMsg();
  virtual ~MonsterSynMsg();

  MonsterSynMsg(const MonsterSynMsg& from);

  inline MonsterSynMsg& operator=(const MonsterSynMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonsterSynMsg(MonsterSynMsg&& from) noexcept
    : MonsterSynMsg() {
    *this = ::std::move(from);
  }

  inline MonsterSynMsg& operator=(MonsterSynMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonsterSynMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonsterSynMsg* internal_default_instance() {
    return reinterpret_cast<const MonsterSynMsg*>(
               &_MonsterSynMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(MonsterSynMsg* other);
  friend void swap(MonsterSynMsg& a, MonsterSynMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonsterSynMsg* New() const final {
    return CreateMaybeMessage<MonsterSynMsg>(NULL);
  }

  MonsterSynMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MonsterSynMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MonsterSynMsg& from);
  void MergeFrom(const MonsterSynMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonsterSynMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TCCamp.Vec3Msg Position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  private:
  const ::TCCamp::Vec3Msg& _internal_position() const;
  public:
  const ::TCCamp::Vec3Msg& position() const;
  ::TCCamp::Vec3Msg* release_position();
  ::TCCamp::Vec3Msg* mutable_position();
  void set_allocated_position(::TCCamp::Vec3Msg* position);

  // .TCCamp.Vec3Msg Rotation = 4;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 4;
  private:
  const ::TCCamp::Vec3Msg& _internal_rotation() const;
  public:
  const ::TCCamp::Vec3Msg& rotation() const;
  ::TCCamp::Vec3Msg* release_rotation();
  ::TCCamp::Vec3Msg* mutable_rotation();
  void set_allocated_rotation(::TCCamp::Vec3Msg* rotation);

  // .TCCamp.Vec3Msg TargetPos = 5;
  bool has_targetpos() const;
  void clear_targetpos();
  static const int kTargetPosFieldNumber = 5;
  private:
  const ::TCCamp::Vec3Msg& _internal_targetpos() const;
  public:
  const ::TCCamp::Vec3Msg& targetpos() const;
  ::TCCamp::Vec3Msg* release_targetpos();
  ::TCCamp::Vec3Msg* mutable_targetpos();
  void set_allocated_targetpos(::TCCamp::Vec3Msg* targetpos);

  // int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 Hp = 2;
  void clear_hp();
  static const int kHpFieldNumber = 2;
  ::google::protobuf::int32 hp() const;
  void set_hp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.MonsterSynMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TCCamp::Vec3Msg* position_;
  ::TCCamp::Vec3Msg* rotation_;
  ::TCCamp::Vec3Msg* targetpos_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 hp_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MonstersSynMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.MonstersSynMsg) */ {
 public:
  MonstersSynMsg();
  virtual ~MonstersSynMsg();

  MonstersSynMsg(const MonstersSynMsg& from);

  inline MonstersSynMsg& operator=(const MonstersSynMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MonstersSynMsg(MonstersSynMsg&& from) noexcept
    : MonstersSynMsg() {
    *this = ::std::move(from);
  }

  inline MonstersSynMsg& operator=(MonstersSynMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MonstersSynMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MonstersSynMsg* internal_default_instance() {
    return reinterpret_cast<const MonstersSynMsg*>(
               &_MonstersSynMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(MonstersSynMsg* other);
  friend void swap(MonstersSynMsg& a, MonstersSynMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MonstersSynMsg* New() const final {
    return CreateMaybeMessage<MonstersSynMsg>(NULL);
  }

  MonstersSynMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MonstersSynMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MonstersSynMsg& from);
  void MergeFrom(const MonstersSynMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MonstersSynMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.MonsterSynMsg MonsterList = 1;
  int monsterlist_size() const;
  void clear_monsterlist();
  static const int kMonsterListFieldNumber = 1;
  ::TCCamp::MonsterSynMsg* mutable_monsterlist(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::MonsterSynMsg >*
      mutable_monsterlist();
  const ::TCCamp::MonsterSynMsg& monsterlist(int index) const;
  ::TCCamp::MonsterSynMsg* add_monsterlist();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::MonsterSynMsg >&
      monsterlist() const;

  // int32 Netid = 2;
  void clear_netid();
  static const int kNetidFieldNumber = 2;
  ::google::protobuf::int32 netid() const;
  void set_netid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.MonstersSynMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::MonsterSynMsg > monsterlist_;
  ::google::protobuf::int32 netid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BulletSynMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.BulletSynMsg) */ {
 public:
  BulletSynMsg();
  virtual ~BulletSynMsg();

  BulletSynMsg(const BulletSynMsg& from);

  inline BulletSynMsg& operator=(const BulletSynMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BulletSynMsg(BulletSynMsg&& from) noexcept
    : BulletSynMsg() {
    *this = ::std::move(from);
  }

  inline BulletSynMsg& operator=(BulletSynMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BulletSynMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulletSynMsg* internal_default_instance() {
    return reinterpret_cast<const BulletSynMsg*>(
               &_BulletSynMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(BulletSynMsg* other);
  friend void swap(BulletSynMsg& a, BulletSynMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BulletSynMsg* New() const final {
    return CreateMaybeMessage<BulletSynMsg>(NULL);
  }

  BulletSynMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BulletSynMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BulletSynMsg& from);
  void MergeFrom(const BulletSynMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulletSynMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TCCamp.Vec3Msg Position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  private:
  const ::TCCamp::Vec3Msg& _internal_position() const;
  public:
  const ::TCCamp::Vec3Msg& position() const;
  ::TCCamp::Vec3Msg* release_position();
  ::TCCamp::Vec3Msg* mutable_position();
  void set_allocated_position(::TCCamp::Vec3Msg* position);

  // .TCCamp.Vec3Msg Rotation = 3;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 3;
  private:
  const ::TCCamp::Vec3Msg& _internal_rotation() const;
  public:
  const ::TCCamp::Vec3Msg& rotation() const;
  ::TCCamp::Vec3Msg* release_rotation();
  ::TCCamp::Vec3Msg* mutable_rotation();
  void set_allocated_rotation(::TCCamp::Vec3Msg* rotation);

  // int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // bool IsActive = 4;
  void clear_isactive();
  static const int kIsActiveFieldNumber = 4;
  bool isactive() const;
  void set_isactive(bool value);

  // @@protoc_insertion_point(class_scope:TCCamp.BulletSynMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TCCamp::Vec3Msg* position_;
  ::TCCamp::Vec3Msg* rotation_;
  ::google::protobuf::int32 id_;
  bool isactive_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BulletsSynMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.BulletsSynMsg) */ {
 public:
  BulletsSynMsg();
  virtual ~BulletsSynMsg();

  BulletsSynMsg(const BulletsSynMsg& from);

  inline BulletsSynMsg& operator=(const BulletsSynMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BulletsSynMsg(BulletsSynMsg&& from) noexcept
    : BulletsSynMsg() {
    *this = ::std::move(from);
  }

  inline BulletsSynMsg& operator=(BulletsSynMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BulletsSynMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BulletsSynMsg* internal_default_instance() {
    return reinterpret_cast<const BulletsSynMsg*>(
               &_BulletsSynMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(BulletsSynMsg* other);
  friend void swap(BulletsSynMsg& a, BulletsSynMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BulletsSynMsg* New() const final {
    return CreateMaybeMessage<BulletsSynMsg>(NULL);
  }

  BulletsSynMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BulletsSynMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BulletsSynMsg& from);
  void MergeFrom(const BulletsSynMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BulletsSynMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.BulletSynMsg BulletList = 1;
  int bulletlist_size() const;
  void clear_bulletlist();
  static const int kBulletListFieldNumber = 1;
  ::TCCamp::BulletSynMsg* mutable_bulletlist(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::BulletSynMsg >*
      mutable_bulletlist();
  const ::TCCamp::BulletSynMsg& bulletlist(int index) const;
  ::TCCamp::BulletSynMsg* add_bulletlist();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::BulletSynMsg >&
      bulletlist() const;

  // @@protoc_insertion_point(class_scope:TCCamp.BulletsSynMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::BulletSynMsg > bulletlist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AttackReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.AttackReq) */ {
 public:
  AttackReq();
  virtual ~AttackReq();

  AttackReq(const AttackReq& from);

  inline AttackReq& operator=(const AttackReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AttackReq(AttackReq&& from) noexcept
    : AttackReq() {
    *this = ::std::move(from);
  }

  inline AttackReq& operator=(AttackReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AttackReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AttackReq* internal_default_instance() {
    return reinterpret_cast<const AttackReq*>(
               &_AttackReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(AttackReq* other);
  friend void swap(AttackReq& a, AttackReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AttackReq* New() const final {
    return CreateMaybeMessage<AttackReq>(NULL);
  }

  AttackReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AttackReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AttackReq& from);
  void MergeFrom(const AttackReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AttackReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TCCamp.Vec3Msg Position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  private:
  const ::TCCamp::Vec3Msg& _internal_position() const;
  public:
  const ::TCCamp::Vec3Msg& position() const;
  ::TCCamp::Vec3Msg* release_position();
  ::TCCamp::Vec3Msg* mutable_position();
  void set_allocated_position(::TCCamp::Vec3Msg* position);

  // .TCCamp.Vec3Msg Rotation = 3;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 3;
  private:
  const ::TCCamp::Vec3Msg& _internal_rotation() const;
  public:
  const ::TCCamp::Vec3Msg& rotation() const;
  ::TCCamp::Vec3Msg* release_rotation();
  ::TCCamp::Vec3Msg* mutable_rotation();
  void set_allocated_rotation(::TCCamp::Vec3Msg* rotation);

  // int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.AttackReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TCCamp::Vec3Msg* position_;
  ::TCCamp::Vec3Msg* rotation_;
  ::google::protobuf::int32 id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RankListMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.RankListMsg) */ {
 public:
  RankListMsg();
  virtual ~RankListMsg();

  RankListMsg(const RankListMsg& from);

  inline RankListMsg& operator=(const RankListMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankListMsg(RankListMsg&& from) noexcept
    : RankListMsg() {
    *this = ::std::move(from);
  }

  inline RankListMsg& operator=(RankListMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RankListMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListMsg* internal_default_instance() {
    return reinterpret_cast<const RankListMsg*>(
               &_RankListMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(RankListMsg* other);
  friend void swap(RankListMsg& a, RankListMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankListMsg* New() const final {
    return CreateMaybeMessage<RankListMsg>(NULL);
  }

  RankListMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RankListMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RankListMsg& from);
  void MergeFrom(const RankListMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 Score = 2;
  void clear_score();
  static const int kScoreFieldNumber = 2;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // int32 Time = 3;
  void clear_time();
  static const int kTimeFieldNumber = 3;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.RankListMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RankListReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.RankListReq) */ {
 public:
  RankListReq();
  virtual ~RankListReq();

  RankListReq(const RankListReq& from);

  inline RankListReq& operator=(const RankListReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankListReq(RankListReq&& from) noexcept
    : RankListReq() {
    *this = ::std::move(from);
  }

  inline RankListReq& operator=(RankListReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RankListReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListReq* internal_default_instance() {
    return reinterpret_cast<const RankListReq*>(
               &_RankListReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(RankListReq* other);
  friend void swap(RankListReq& a, RankListReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankListReq* New() const final {
    return CreateMaybeMessage<RankListReq>(NULL);
  }

  RankListReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RankListReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RankListReq& from);
  void MergeFrom(const RankListReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 sceneId = 1;
  void clear_sceneid();
  static const int kSceneIdFieldNumber = 1;
  ::google::protobuf::int32 sceneid() const;
  void set_sceneid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.RankListReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 sceneid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameTimeRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.GameTimeRsp) */ {
 public:
  GameTimeRsp();
  virtual ~GameTimeRsp();

  GameTimeRsp(const GameTimeRsp& from);

  inline GameTimeRsp& operator=(const GameTimeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameTimeRsp(GameTimeRsp&& from) noexcept
    : GameTimeRsp() {
    *this = ::std::move(from);
  }

  inline GameTimeRsp& operator=(GameTimeRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameTimeRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameTimeRsp* internal_default_instance() {
    return reinterpret_cast<const GameTimeRsp*>(
               &_GameTimeRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(GameTimeRsp* other);
  friend void swap(GameTimeRsp& a, GameTimeRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameTimeRsp* New() const final {
    return CreateMaybeMessage<GameTimeRsp>(NULL);
  }

  GameTimeRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameTimeRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameTimeRsp& from);
  void MergeFrom(const GameTimeRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameTimeRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  ::google::protobuf::int32 time() const;
  void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.GameTimeRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RankListRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.RankListRsp) */ {
 public:
  RankListRsp();
  virtual ~RankListRsp();

  RankListRsp(const RankListRsp& from);

  inline RankListRsp& operator=(const RankListRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankListRsp(RankListRsp&& from) noexcept
    : RankListRsp() {
    *this = ::std::move(from);
  }

  inline RankListRsp& operator=(RankListRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RankListRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListRsp* internal_default_instance() {
    return reinterpret_cast<const RankListRsp*>(
               &_RankListRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(RankListRsp* other);
  friend void swap(RankListRsp& a, RankListRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankListRsp* New() const final {
    return CreateMaybeMessage<RankListRsp>(NULL);
  }

  RankListRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RankListRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RankListRsp& from);
  void MergeFrom(const RankListRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.RankListMsg RankList = 1;
  int ranklist_size() const;
  void clear_ranklist();
  static const int kRankListFieldNumber = 1;
  ::TCCamp::RankListMsg* mutable_ranklist(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::RankListMsg >*
      mutable_ranklist();
  const ::TCCamp::RankListMsg& ranklist(int index) const;
  ::TCCamp::RankListMsg* add_ranklist();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::RankListMsg >&
      ranklist() const;

  // @@protoc_insertion_point(class_scope:TCCamp.RankListRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::RankListMsg > ranklist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RankListData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.RankListData) */ {
 public:
  RankListData();
  virtual ~RankListData();

  RankListData(const RankListData& from);

  inline RankListData& operator=(const RankListData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RankListData(RankListData&& from) noexcept
    : RankListData() {
    *this = ::std::move(from);
  }

  inline RankListData& operator=(RankListData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RankListData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankListData* internal_default_instance() {
    return reinterpret_cast<const RankListData*>(
               &_RankListData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(RankListData* other);
  friend void swap(RankListData& a, RankListData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RankListData* New() const final {
    return CreateMaybeMessage<RankListData>(NULL);
  }

  RankListData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RankListData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RankListData& from);
  void MergeFrom(const RankListData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankListData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.RankListRsp RankData = 1;
  int rankdata_size() const;
  void clear_rankdata();
  static const int kRankDataFieldNumber = 1;
  ::TCCamp::RankListRsp* mutable_rankdata(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::RankListRsp >*
      mutable_rankdata();
  const ::TCCamp::RankListRsp& rankdata(int index) const;
  ::TCCamp::RankListRsp* add_rankdata();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::RankListRsp >&
      rankdata() const;

  // @@protoc_insertion_point(class_scope:TCCamp.RankListData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::RankListRsp > rankdata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CharacterStatueMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.CharacterStatueMsg) */ {
 public:
  CharacterStatueMsg();
  virtual ~CharacterStatueMsg();

  CharacterStatueMsg(const CharacterStatueMsg& from);

  inline CharacterStatueMsg& operator=(const CharacterStatueMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CharacterStatueMsg(CharacterStatueMsg&& from) noexcept
    : CharacterStatueMsg() {
    *this = ::std::move(from);
  }

  inline CharacterStatueMsg& operator=(CharacterStatueMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterStatueMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CharacterStatueMsg* internal_default_instance() {
    return reinterpret_cast<const CharacterStatueMsg*>(
               &_CharacterStatueMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(CharacterStatueMsg* other);
  friend void swap(CharacterStatueMsg& a, CharacterStatueMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CharacterStatueMsg* New() const final {
    return CreateMaybeMessage<CharacterStatueMsg>(NULL);
  }

  CharacterStatueMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CharacterStatueMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CharacterStatueMsg& from);
  void MergeFrom(const CharacterStatueMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterStatueMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TCCamp.Vec3Msg Position = 5;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 5;
  private:
  const ::TCCamp::Vec3Msg& _internal_position() const;
  public:
  const ::TCCamp::Vec3Msg& position() const;
  ::TCCamp::Vec3Msg* release_position();
  ::TCCamp::Vec3Msg* mutable_position();
  void set_allocated_position(::TCCamp::Vec3Msg* position);

  // .TCCamp.Vec3Msg Rotation = 6;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 6;
  private:
  const ::TCCamp::Vec3Msg& _internal_rotation() const;
  public:
  const ::TCCamp::Vec3Msg& rotation() const;
  ::TCCamp::Vec3Msg* release_rotation();
  ::TCCamp::Vec3Msg* mutable_rotation();
  void set_allocated_rotation(::TCCamp::Vec3Msg* rotation);

  // int32 NetId = 1;
  void clear_netid();
  static const int kNetIdFieldNumber = 1;
  ::google::protobuf::int32 netid() const;
  void set_netid(::google::protobuf::int32 value);

  // int32 Hp = 2;
  void clear_hp();
  static const int kHpFieldNumber = 2;
  ::google::protobuf::int32 hp() const;
  void set_hp(::google::protobuf::int32 value);

  // float Speed = 3;
  void clear_speed();
  static const int kSpeedFieldNumber = 3;
  float speed() const;
  void set_speed(float value);

  // float MaxSpeed = 4;
  void clear_maxspeed();
  static const int kMaxSpeedFieldNumber = 4;
  float maxspeed() const;
  void set_maxspeed(float value);

  // bool IsDeath = 7;
  void clear_isdeath();
  static const int kIsDeathFieldNumber = 7;
  bool isdeath() const;
  void set_isdeath(bool value);

  // bool IsArmed = 8;
  void clear_isarmed();
  static const int kIsArmedFieldNumber = 8;
  bool isarmed() const;
  void set_isarmed(bool value);

  // bool IsImmunity = 9;
  void clear_isimmunity();
  static const int kIsImmunityFieldNumber = 9;
  bool isimmunity() const;
  void set_isimmunity(bool value);

  // int32 actionType = 10;
  void clear_actiontype();
  static const int kActionTypeFieldNumber = 10;
  ::google::protobuf::int32 actiontype() const;
  void set_actiontype(::google::protobuf::int32 value);

  // int32 score = 11;
  void clear_score();
  static const int kScoreFieldNumber = 11;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.CharacterStatueMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TCCamp::Vec3Msg* position_;
  ::TCCamp::Vec3Msg* rotation_;
  ::google::protobuf::int32 netid_;
  ::google::protobuf::int32 hp_;
  float speed_;
  float maxspeed_;
  bool isdeath_;
  bool isarmed_;
  bool isimmunity_;
  ::google::protobuf::int32 actiontype_;
  ::google::protobuf::int32 score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CharacterStatueReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.CharacterStatueReq) */ {
 public:
  CharacterStatueReq();
  virtual ~CharacterStatueReq();

  CharacterStatueReq(const CharacterStatueReq& from);

  inline CharacterStatueReq& operator=(const CharacterStatueReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CharacterStatueReq(CharacterStatueReq&& from) noexcept
    : CharacterStatueReq() {
    *this = ::std::move(from);
  }

  inline CharacterStatueReq& operator=(CharacterStatueReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterStatueReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CharacterStatueReq* internal_default_instance() {
    return reinterpret_cast<const CharacterStatueReq*>(
               &_CharacterStatueReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(CharacterStatueReq* other);
  friend void swap(CharacterStatueReq& a, CharacterStatueReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CharacterStatueReq* New() const final {
    return CreateMaybeMessage<CharacterStatueReq>(NULL);
  }

  CharacterStatueReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CharacterStatueReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CharacterStatueReq& from);
  void MergeFrom(const CharacterStatueReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterStatueReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TCCamp.Vec3Msg Position = 3;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 3;
  private:
  const ::TCCamp::Vec3Msg& _internal_position() const;
  public:
  const ::TCCamp::Vec3Msg& position() const;
  ::TCCamp::Vec3Msg* release_position();
  ::TCCamp::Vec3Msg* mutable_position();
  void set_allocated_position(::TCCamp::Vec3Msg* position);

  // .TCCamp.Vec3Msg Rotation = 4;
  bool has_rotation() const;
  void clear_rotation();
  static const int kRotationFieldNumber = 4;
  private:
  const ::TCCamp::Vec3Msg& _internal_rotation() const;
  public:
  const ::TCCamp::Vec3Msg& rotation() const;
  ::TCCamp::Vec3Msg* release_rotation();
  ::TCCamp::Vec3Msg* mutable_rotation();
  void set_allocated_rotation(::TCCamp::Vec3Msg* rotation);

  // int32 NetId = 1;
  void clear_netid();
  static const int kNetIdFieldNumber = 1;
  ::google::protobuf::int32 netid() const;
  void set_netid(::google::protobuf::int32 value);

  // float Speed = 2;
  void clear_speed();
  static const int kSpeedFieldNumber = 2;
  float speed() const;
  void set_speed(float value);

  // @@protoc_insertion_point(class_scope:TCCamp.CharacterStatueReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::TCCamp::Vec3Msg* position_;
  ::TCCamp::Vec3Msg* rotation_;
  ::google::protobuf::int32 netid_;
  float speed_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CharacterAnimSynMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.CharacterAnimSynMsg) */ {
 public:
  CharacterAnimSynMsg();
  virtual ~CharacterAnimSynMsg();

  CharacterAnimSynMsg(const CharacterAnimSynMsg& from);

  inline CharacterAnimSynMsg& operator=(const CharacterAnimSynMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CharacterAnimSynMsg(CharacterAnimSynMsg&& from) noexcept
    : CharacterAnimSynMsg() {
    *this = ::std::move(from);
  }

  inline CharacterAnimSynMsg& operator=(CharacterAnimSynMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const CharacterAnimSynMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CharacterAnimSynMsg* internal_default_instance() {
    return reinterpret_cast<const CharacterAnimSynMsg*>(
               &_CharacterAnimSynMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(CharacterAnimSynMsg* other);
  friend void swap(CharacterAnimSynMsg& a, CharacterAnimSynMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CharacterAnimSynMsg* New() const final {
    return CreateMaybeMessage<CharacterAnimSynMsg>(NULL);
  }

  CharacterAnimSynMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CharacterAnimSynMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CharacterAnimSynMsg& from);
  void MergeFrom(const CharacterAnimSynMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CharacterAnimSynMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TCCamp.CharacterAnimType AnimtType = 1;
  void clear_animttype();
  static const int kAnimtTypeFieldNumber = 1;
  ::TCCamp::CharacterAnimType animttype() const;
  void set_animttype(::TCCamp::CharacterAnimType value);

  // int32 NetId = 2;
  void clear_netid();
  static const int kNetIdFieldNumber = 2;
  ::google::protobuf::int32 netid() const;
  void set_netid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.CharacterAnimSynMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int animttype_;
  ::google::protobuf::int32 netid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetAsyncMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.NetAsyncMsg) */ {
 public:
  NetAsyncMsg();
  virtual ~NetAsyncMsg();

  NetAsyncMsg(const NetAsyncMsg& from);

  inline NetAsyncMsg& operator=(const NetAsyncMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetAsyncMsg(NetAsyncMsg&& from) noexcept
    : NetAsyncMsg() {
    *this = ::std::move(from);
  }

  inline NetAsyncMsg& operator=(NetAsyncMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const NetAsyncMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetAsyncMsg* internal_default_instance() {
    return reinterpret_cast<const NetAsyncMsg*>(
               &_NetAsyncMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(NetAsyncMsg* other);
  friend void swap(NetAsyncMsg& a, NetAsyncMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetAsyncMsg* New() const final {
    return CreateMaybeMessage<NetAsyncMsg>(NULL);
  }

  NetAsyncMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetAsyncMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetAsyncMsg& from);
  void MergeFrom(const NetAsyncMsg& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetAsyncMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.CharacterStatueMsg CharacterStatueList = 1;
  int characterstatuelist_size() const;
  void clear_characterstatuelist();
  static const int kCharacterStatueListFieldNumber = 1;
  ::TCCamp::CharacterStatueMsg* mutable_characterstatuelist(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::CharacterStatueMsg >*
      mutable_characterstatuelist();
  const ::TCCamp::CharacterStatueMsg& characterstatuelist(int index) const;
  ::TCCamp::CharacterStatueMsg* add_characterstatuelist();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::CharacterStatueMsg >&
      characterstatuelist() const;

  // @@protoc_insertion_point(class_scope:TCCamp.NetAsyncMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::CharacterStatueMsg > characterstatuelist_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveCharacterRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.RemoveCharacterRsp) */ {
 public:
  RemoveCharacterRsp();
  virtual ~RemoveCharacterRsp();

  RemoveCharacterRsp(const RemoveCharacterRsp& from);

  inline RemoveCharacterRsp& operator=(const RemoveCharacterRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveCharacterRsp(RemoveCharacterRsp&& from) noexcept
    : RemoveCharacterRsp() {
    *this = ::std::move(from);
  }

  inline RemoveCharacterRsp& operator=(RemoveCharacterRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveCharacterRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveCharacterRsp* internal_default_instance() {
    return reinterpret_cast<const RemoveCharacterRsp*>(
               &_RemoveCharacterRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(RemoveCharacterRsp* other);
  friend void swap(RemoveCharacterRsp& a, RemoveCharacterRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveCharacterRsp* New() const final {
    return CreateMaybeMessage<RemoveCharacterRsp>(NULL);
  }

  RemoveCharacterRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveCharacterRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveCharacterRsp& from);
  void MergeFrom(const RemoveCharacterRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveCharacterRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 NetId = 1;
  void clear_netid();
  static const int kNetIdFieldNumber = 1;
  ::google::protobuf::int32 netid() const;
  void set_netid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.RemoveCharacterRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 netid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ScoreRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.ScoreRsp) */ {
 public:
  ScoreRsp();
  virtual ~ScoreRsp();

  ScoreRsp(const ScoreRsp& from);

  inline ScoreRsp& operator=(const ScoreRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ScoreRsp(ScoreRsp&& from) noexcept
    : ScoreRsp() {
    *this = ::std::move(from);
  }

  inline ScoreRsp& operator=(ScoreRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ScoreRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ScoreRsp* internal_default_instance() {
    return reinterpret_cast<const ScoreRsp*>(
               &_ScoreRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(ScoreRsp* other);
  friend void swap(ScoreRsp& a, ScoreRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ScoreRsp* New() const final {
    return CreateMaybeMessage<ScoreRsp>(NULL);
  }

  ScoreRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ScoreRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ScoreRsp& from);
  void MergeFrom(const ScoreRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScoreRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 Score = 1;
  void clear_score();
  static const int kScoreFieldNumber = 1;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.ScoreRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 score_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameResultRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.GameResultRsp) */ {
 public:
  GameResultRsp();
  virtual ~GameResultRsp();

  GameResultRsp(const GameResultRsp& from);

  inline GameResultRsp& operator=(const GameResultRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameResultRsp(GameResultRsp&& from) noexcept
    : GameResultRsp() {
    *this = ::std::move(from);
  }

  inline GameResultRsp& operator=(GameResultRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameResultRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameResultRsp* internal_default_instance() {
    return reinterpret_cast<const GameResultRsp*>(
               &_GameResultRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(GameResultRsp* other);
  friend void swap(GameResultRsp& a, GameResultRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameResultRsp* New() const final {
    return CreateMaybeMessage<GameResultRsp>(NULL);
  }

  GameResultRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameResultRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameResultRsp& from);
  void MergeFrom(const GameResultRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameResultRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 Score = 1;
  void clear_score();
  static const int kScoreFieldNumber = 1;
  ::google::protobuf::int32 score() const;
  void set_score(::google::protobuf::int32 value);

  // int32 RoomRank = 2;
  void clear_roomrank();
  static const int kRoomRankFieldNumber = 2;
  ::google::protobuf::int32 roomrank() const;
  void set_roomrank(::google::protobuf::int32 value);

  // int32 GameTime = 3;
  void clear_gametime();
  static const int kGameTimeFieldNumber = 3;
  ::google::protobuf::int32 gametime() const;
  void set_gametime(::google::protobuf::int32 value);

  // bool Success = 4;
  void clear_success();
  static const int kSuccessFieldNumber = 4;
  bool success() const;
  void set_success(bool value);

  // bool IsFinished = 5;
  void clear_isfinished();
  static const int kIsFinishedFieldNumber = 5;
  bool isfinished() const;
  void set_isfinished(bool value);

  // int32 BeatCount = 6;
  void clear_beatcount();
  static const int kBeatCountFieldNumber = 6;
  ::google::protobuf::int32 beatcount() const;
  void set_beatcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.GameResultRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int32 roomrank_;
  ::google::protobuf::int32 gametime_;
  bool success_;
  bool isfinished_;
  ::google::protobuf::int32 beatcount_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GameContinueRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.GameContinueRsp) */ {
 public:
  GameContinueRsp();
  virtual ~GameContinueRsp();

  GameContinueRsp(const GameContinueRsp& from);

  inline GameContinueRsp& operator=(const GameContinueRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameContinueRsp(GameContinueRsp&& from) noexcept
    : GameContinueRsp() {
    *this = ::std::move(from);
  }

  inline GameContinueRsp& operator=(GameContinueRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GameContinueRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameContinueRsp* internal_default_instance() {
    return reinterpret_cast<const GameContinueRsp*>(
               &_GameContinueRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(GameContinueRsp* other);
  friend void swap(GameContinueRsp& a, GameContinueRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameContinueRsp* New() const final {
    return CreateMaybeMessage<GameContinueRsp>(NULL);
  }

  GameContinueRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameContinueRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameContinueRsp& from);
  void MergeFrom(const GameContinueRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameContinueRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool needContinue = 1;
  void clear_needcontinue();
  static const int kNeedContinueFieldNumber = 1;
  bool needcontinue() const;
  void set_needcontinue(bool value);

  // @@protoc_insertion_point(class_scope:TCCamp.GameContinueRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool needcontinue_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ItemConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.ItemConfig) */ {
 public:
  ItemConfig();
  virtual ~ItemConfig();

  ItemConfig(const ItemConfig& from);

  inline ItemConfig& operator=(const ItemConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ItemConfig(ItemConfig&& from) noexcept
    : ItemConfig() {
    *this = ::std::move(from);
  }

  inline ItemConfig& operator=(ItemConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemConfig* internal_default_instance() {
    return reinterpret_cast<const ItemConfig*>(
               &_ItemConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(ItemConfig* other);
  friend void swap(ItemConfig& a, ItemConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ItemConfig* New() const final {
    return CreateMaybeMessage<ItemConfig>(NULL);
  }

  ItemConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ItemConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ItemConfig& from);
  void MergeFrom(const ItemConfig& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string Introduce = 3;
  void clear_introduce();
  static const int kIntroduceFieldNumber = 3;
  const ::std::string& introduce() const;
  void set_introduce(const ::std::string& value);
  #if LANG_CXX11
  void set_introduce(::std::string&& value);
  #endif
  void set_introduce(const char* value);
  void set_introduce(const char* value, size_t size);
  ::std::string* mutable_introduce();
  ::std::string* release_introduce();
  void set_allocated_introduce(::std::string* introduce);

  // string IconName = 5;
  void clear_iconname();
  static const int kIconNameFieldNumber = 5;
  const ::std::string& iconname() const;
  void set_iconname(const ::std::string& value);
  #if LANG_CXX11
  void set_iconname(::std::string&& value);
  #endif
  void set_iconname(const char* value);
  void set_iconname(const char* value, size_t size);
  ::std::string* mutable_iconname();
  ::std::string* release_iconname();
  void set_allocated_iconname(::std::string* iconname);

  // int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 Price = 4;
  void clear_price();
  static const int kPriceFieldNumber = 4;
  ::google::protobuf::int32 price() const;
  void set_price(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.ItemConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr introduce_;
  ::google::protobuf::internal::ArenaStringPtr iconname_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 price_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ItemConfigs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.ItemConfigs) */ {
 public:
  ItemConfigs();
  virtual ~ItemConfigs();

  ItemConfigs(const ItemConfigs& from);

  inline ItemConfigs& operator=(const ItemConfigs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ItemConfigs(ItemConfigs&& from) noexcept
    : ItemConfigs() {
    *this = ::std::move(from);
  }

  inline ItemConfigs& operator=(ItemConfigs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemConfigs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemConfigs* internal_default_instance() {
    return reinterpret_cast<const ItemConfigs*>(
               &_ItemConfigs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(ItemConfigs* other);
  friend void swap(ItemConfigs& a, ItemConfigs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ItemConfigs* New() const final {
    return CreateMaybeMessage<ItemConfigs>(NULL);
  }

  ItemConfigs* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ItemConfigs>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ItemConfigs& from);
  void MergeFrom(const ItemConfigs& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemConfigs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.ItemConfig Item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  ::TCCamp::ItemConfig* mutable_item(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::ItemConfig >*
      mutable_item();
  const ::TCCamp::ItemConfig& item(int index) const;
  ::TCCamp::ItemConfig* add_item();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::ItemConfig >&
      item() const;

  // @@protoc_insertion_point(class_scope:TCCamp.ItemConfigs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::ItemConfig > item_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ItemInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.ItemInfo) */ {
 public:
  ItemInfo();
  virtual ~ItemInfo();

  ItemInfo(const ItemInfo& from);

  inline ItemInfo& operator=(const ItemInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ItemInfo(ItemInfo&& from) noexcept
    : ItemInfo() {
    *this = ::std::move(from);
  }

  inline ItemInfo& operator=(ItemInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ItemInfo* internal_default_instance() {
    return reinterpret_cast<const ItemInfo*>(
               &_ItemInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(ItemInfo* other);
  friend void swap(ItemInfo& a, ItemInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ItemInfo* New() const final {
    return CreateMaybeMessage<ItemInfo>(NULL);
  }

  ItemInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ItemInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ItemInfo& from);
  void MergeFrom(const ItemInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 Num = 2;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.ItemInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShopItemRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.ShopItemRsp) */ {
 public:
  ShopItemRsp();
  virtual ~ShopItemRsp();

  ShopItemRsp(const ShopItemRsp& from);

  inline ShopItemRsp& operator=(const ShopItemRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShopItemRsp(ShopItemRsp&& from) noexcept
    : ShopItemRsp() {
    *this = ::std::move(from);
  }

  inline ShopItemRsp& operator=(ShopItemRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShopItemRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShopItemRsp* internal_default_instance() {
    return reinterpret_cast<const ShopItemRsp*>(
               &_ShopItemRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(ShopItemRsp* other);
  friend void swap(ShopItemRsp& a, ShopItemRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShopItemRsp* New() const final {
    return CreateMaybeMessage<ShopItemRsp>(NULL);
  }

  ShopItemRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShopItemRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShopItemRsp& from);
  void MergeFrom(const ShopItemRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShopItemRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.ItemInfo Item = 1;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 1;
  ::TCCamp::ItemInfo* mutable_item(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::ItemInfo >*
      mutable_item();
  const ::TCCamp::ItemInfo& item(int index) const;
  ::TCCamp::ItemInfo* add_item();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::ItemInfo >&
      item() const;

  // @@protoc_insertion_point(class_scope:TCCamp.ShopItemRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::ItemInfo > item_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BagItemRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.BagItemRsp) */ {
 public:
  BagItemRsp();
  virtual ~BagItemRsp();

  BagItemRsp(const BagItemRsp& from);

  inline BagItemRsp& operator=(const BagItemRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BagItemRsp(BagItemRsp&& from) noexcept
    : BagItemRsp() {
    *this = ::std::move(from);
  }

  inline BagItemRsp& operator=(BagItemRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BagItemRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BagItemRsp* internal_default_instance() {
    return reinterpret_cast<const BagItemRsp*>(
               &_BagItemRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(BagItemRsp* other);
  friend void swap(BagItemRsp& a, BagItemRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BagItemRsp* New() const final {
    return CreateMaybeMessage<BagItemRsp>(NULL);
  }

  BagItemRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BagItemRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BagItemRsp& from);
  void MergeFrom(const BagItemRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BagItemRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TCCamp.ItemInfo Item = 2;
  int item_size() const;
  void clear_item();
  static const int kItemFieldNumber = 2;
  ::TCCamp::ItemInfo* mutable_item(int index);
  ::google::protobuf::RepeatedPtrField< ::TCCamp::ItemInfo >*
      mutable_item();
  const ::TCCamp::ItemInfo& item(int index) const;
  ::TCCamp::ItemInfo* add_item();
  const ::google::protobuf::RepeatedPtrField< ::TCCamp::ItemInfo >&
      item() const;

  // int32 Money = 1;
  void clear_money();
  static const int kMoneyFieldNumber = 1;
  ::google::protobuf::int32 money() const;
  void set_money(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.BagItemRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::TCCamp::ItemInfo > item_;
  ::google::protobuf::int32 money_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class BuyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.BuyReq) */ {
 public:
  BuyReq();
  virtual ~BuyReq();

  BuyReq(const BuyReq& from);

  inline BuyReq& operator=(const BuyReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BuyReq(BuyReq&& from) noexcept
    : BuyReq() {
    *this = ::std::move(from);
  }

  inline BuyReq& operator=(BuyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const BuyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BuyReq* internal_default_instance() {
    return reinterpret_cast<const BuyReq*>(
               &_BuyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(BuyReq* other);
  friend void swap(BuyReq& a, BuyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BuyReq* New() const final {
    return CreateMaybeMessage<BuyReq>(NULL);
  }

  BuyReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BuyReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BuyReq& from);
  void MergeFrom(const BuyReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BuyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 Num = 2;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.BuyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteItemReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.DeleteItemReq) */ {
 public:
  DeleteItemReq();
  virtual ~DeleteItemReq();

  DeleteItemReq(const DeleteItemReq& from);

  inline DeleteItemReq& operator=(const DeleteItemReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteItemReq(DeleteItemReq&& from) noexcept
    : DeleteItemReq() {
    *this = ::std::move(from);
  }

  inline DeleteItemReq& operator=(DeleteItemReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteItemReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteItemReq* internal_default_instance() {
    return reinterpret_cast<const DeleteItemReq*>(
               &_DeleteItemReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(DeleteItemReq* other);
  friend void swap(DeleteItemReq& a, DeleteItemReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteItemReq* New() const final {
    return CreateMaybeMessage<DeleteItemReq>(NULL);
  }

  DeleteItemReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteItemReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteItemReq& from);
  void MergeFrom(const DeleteItemReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteItemReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 Id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // int32 Num = 2;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.DeleteItemReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddMoneyReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.AddMoneyReq) */ {
 public:
  AddMoneyReq();
  virtual ~AddMoneyReq();

  AddMoneyReq(const AddMoneyReq& from);

  inline AddMoneyReq& operator=(const AddMoneyReq& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddMoneyReq(AddMoneyReq&& from) noexcept
    : AddMoneyReq() {
    *this = ::std::move(from);
  }

  inline AddMoneyReq& operator=(AddMoneyReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddMoneyReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddMoneyReq* internal_default_instance() {
    return reinterpret_cast<const AddMoneyReq*>(
               &_AddMoneyReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(AddMoneyReq* other);
  friend void swap(AddMoneyReq& a, AddMoneyReq& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddMoneyReq* New() const final {
    return CreateMaybeMessage<AddMoneyReq>(NULL);
  }

  AddMoneyReq* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddMoneyReq>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddMoneyReq& from);
  void MergeFrom(const AddMoneyReq& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddMoneyReq* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 Num = 1;
  void clear_num();
  static const int kNumFieldNumber = 1;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.AddMoneyReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MoneyRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.MoneyRsp) */ {
 public:
  MoneyRsp();
  virtual ~MoneyRsp();

  MoneyRsp(const MoneyRsp& from);

  inline MoneyRsp& operator=(const MoneyRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoneyRsp(MoneyRsp&& from) noexcept
    : MoneyRsp() {
    *this = ::std::move(from);
  }

  inline MoneyRsp& operator=(MoneyRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MoneyRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoneyRsp* internal_default_instance() {
    return reinterpret_cast<const MoneyRsp*>(
               &_MoneyRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(MoneyRsp* other);
  friend void swap(MoneyRsp& a, MoneyRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoneyRsp* New() const final {
    return CreateMaybeMessage<MoneyRsp>(NULL);
  }

  MoneyRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MoneyRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MoneyRsp& from);
  void MergeFrom(const MoneyRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoneyRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .TCCamp.StatueCode Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::TCCamp::StatueCode code() const;
  void set_code(::TCCamp::StatueCode value);

  // int32 Num = 2;
  void clear_num();
  static const int kNumFieldNumber = 2;
  ::google::protobuf::int32 num() const;
  void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:TCCamp.MoneyRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int code_;
  ::google::protobuf::int32 num_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StatueCodeRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TCCamp.StatueCodeRsp) */ {
 public:
  StatueCodeRsp();
  virtual ~StatueCodeRsp();

  StatueCodeRsp(const StatueCodeRsp& from);

  inline StatueCodeRsp& operator=(const StatueCodeRsp& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatueCodeRsp(StatueCodeRsp&& from) noexcept
    : StatueCodeRsp() {
    *this = ::std::move(from);
  }

  inline StatueCodeRsp& operator=(StatueCodeRsp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatueCodeRsp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatueCodeRsp* internal_default_instance() {
    return reinterpret_cast<const StatueCodeRsp*>(
               &_StatueCodeRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(StatueCodeRsp* other);
  friend void swap(StatueCodeRsp& a, StatueCodeRsp& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatueCodeRsp* New() const final {
    return CreateMaybeMessage<StatueCodeRsp>(NULL);
  }

  StatueCodeRsp* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatueCodeRsp>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatueCodeRsp& from);
  void MergeFrom(const StatueCodeRsp& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatueCodeRsp* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string Reason = 2;
  void clear_reason();
  static const int kReasonFieldNumber = 2;
  const ::std::string& reason() const;
  void set_reason(const ::std::string& value);
  #if LANG_CXX11
  void set_reason(::std::string&& value);
  #endif
  void set_reason(const char* value);
  void set_reason(const char* value, size_t size);
  ::std::string* mutable_reason();
  ::std::string* release_reason();
  void set_allocated_reason(::std::string* reason);

  // .TCCamp.StatueCode Code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::TCCamp::StatueCode code() const;
  void set_code(::TCCamp::StatueCode value);

  // @@protoc_insertion_point(class_scope:TCCamp.StatueCodeRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr reason_;
  int code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_player_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CollisionReq

// .TCCamp.SceneObjectType typeA = 1;
inline void CollisionReq::clear_typea() {
  typea_ = 0;
}
inline ::TCCamp::SceneObjectType CollisionReq::typea() const {
  // @@protoc_insertion_point(field_get:TCCamp.CollisionReq.typeA)
  return static_cast< ::TCCamp::SceneObjectType >(typea_);
}
inline void CollisionReq::set_typea(::TCCamp::SceneObjectType value) {
  
  typea_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CollisionReq.typeA)
}

// int32 idA = 2;
inline void CollisionReq::clear_ida() {
  ida_ = 0;
}
inline ::google::protobuf::int32 CollisionReq::ida() const {
  // @@protoc_insertion_point(field_get:TCCamp.CollisionReq.idA)
  return ida_;
}
inline void CollisionReq::set_ida(::google::protobuf::int32 value) {
  
  ida_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CollisionReq.idA)
}

// .TCCamp.SceneObjectType typeB = 3;
inline void CollisionReq::clear_typeb() {
  typeb_ = 0;
}
inline ::TCCamp::SceneObjectType CollisionReq::typeb() const {
  // @@protoc_insertion_point(field_get:TCCamp.CollisionReq.typeB)
  return static_cast< ::TCCamp::SceneObjectType >(typeb_);
}
inline void CollisionReq::set_typeb(::TCCamp::SceneObjectType value) {
  
  typeb_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CollisionReq.typeB)
}

// int32 idB = 4;
inline void CollisionReq::clear_idb() {
  idb_ = 0;
}
inline ::google::protobuf::int32 CollisionReq::idb() const {
  // @@protoc_insertion_point(field_get:TCCamp.CollisionReq.idB)
  return idb_;
}
inline void CollisionReq::set_idb(::google::protobuf::int32 value) {
  
  idb_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CollisionReq.idB)
}

// -------------------------------------------------------------------

// RPC

// .TCCamp.RPC_CMD cmd = 1;
inline void RPC::clear_cmd() {
  cmd_ = 0;
}
inline ::TCCamp::RPC_CMD RPC::cmd() const {
  // @@protoc_insertion_point(field_get:TCCamp.RPC.cmd)
  return static_cast< ::TCCamp::RPC_CMD >(cmd_);
}
inline void RPC::set_cmd(::TCCamp::RPC_CMD value) {
  
  cmd_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.RPC.cmd)
}

// repeated int32 param = 2;
inline int RPC::param_size() const {
  return param_.size();
}
inline void RPC::clear_param() {
  param_.Clear();
}
inline ::google::protobuf::int32 RPC::param(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.RPC.param)
  return param_.Get(index);
}
inline void RPC::set_param(int index, ::google::protobuf::int32 value) {
  param_.Set(index, value);
  // @@protoc_insertion_point(field_set:TCCamp.RPC.param)
}
inline void RPC::add_param(::google::protobuf::int32 value) {
  param_.Add(value);
  // @@protoc_insertion_point(field_add:TCCamp.RPC.param)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RPC::param() const {
  // @@protoc_insertion_point(field_list:TCCamp.RPC.param)
  return param_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RPC::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.RPC.param)
  return &param_;
}

// -------------------------------------------------------------------

// PlayerLoginReq

// string PlayerID = 1;
inline void PlayerLoginReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerLoginReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerLoginReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerLoginReq.PlayerID)
}
#if LANG_CXX11
inline void PlayerLoginReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerLoginReq.PlayerID)
}
#endif
inline void PlayerLoginReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerLoginReq.PlayerID)
}
inline void PlayerLoginReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerLoginReq.PlayerID)
}
inline ::std::string* PlayerLoginReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerLoginReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerLoginReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerLoginReq.PlayerID)
}

// string Password = 2;
inline void PlayerLoginReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerLoginReq::password() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginReq.Password)
  return password_.GetNoArena();
}
inline void PlayerLoginReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerLoginReq.Password)
}
#if LANG_CXX11
inline void PlayerLoginReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerLoginReq.Password)
}
#endif
inline void PlayerLoginReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerLoginReq.Password)
}
inline void PlayerLoginReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerLoginReq.Password)
}
inline ::std::string* PlayerLoginReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerLoginReq.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginReq::release_password() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerLoginReq.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerLoginReq.Password)
}

// -------------------------------------------------------------------

// PlayerLoginRsp

// int32 Result = 1;
inline void PlayerLoginRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 PlayerLoginRsp::result() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginRsp.Result)
  return result_;
}
inline void PlayerLoginRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerLoginRsp.Result)
}

// string Reason = 2;
inline void PlayerLoginRsp::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerLoginRsp::reason() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginRsp.Reason)
  return reason_.GetNoArena();
}
inline void PlayerLoginRsp::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerLoginRsp.Reason)
}
#if LANG_CXX11
inline void PlayerLoginRsp::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerLoginRsp.Reason)
}
#endif
inline void PlayerLoginRsp::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerLoginRsp.Reason)
}
inline void PlayerLoginRsp::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerLoginRsp.Reason)
}
inline ::std::string* PlayerLoginRsp::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerLoginRsp.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerLoginRsp::release_reason() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerLoginRsp.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerLoginRsp::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerLoginRsp.Reason)
}

// .TCCamp.PlayerSyncData PlayerData = 3;
inline bool PlayerLoginRsp::has_playerdata() const {
  return this != internal_default_instance() && playerdata_ != NULL;
}
inline void PlayerLoginRsp::clear_playerdata() {
  if (GetArenaNoVirtual() == NULL && playerdata_ != NULL) {
    delete playerdata_;
  }
  playerdata_ = NULL;
}
inline const ::TCCamp::PlayerSyncData& PlayerLoginRsp::_internal_playerdata() const {
  return *playerdata_;
}
inline const ::TCCamp::PlayerSyncData& PlayerLoginRsp::playerdata() const {
  const ::TCCamp::PlayerSyncData* p = playerdata_;
  // @@protoc_insertion_point(field_get:TCCamp.PlayerLoginRsp.PlayerData)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::PlayerSyncData*>(
      &::TCCamp::_PlayerSyncData_default_instance_);
}
inline ::TCCamp::PlayerSyncData* PlayerLoginRsp::release_playerdata() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerLoginRsp.PlayerData)
  
  ::TCCamp::PlayerSyncData* temp = playerdata_;
  playerdata_ = NULL;
  return temp;
}
inline ::TCCamp::PlayerSyncData* PlayerLoginRsp::mutable_playerdata() {
  
  if (playerdata_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::PlayerSyncData>(GetArenaNoVirtual());
    playerdata_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerLoginRsp.PlayerData)
  return playerdata_;
}
inline void PlayerLoginRsp::set_allocated_playerdata(::TCCamp::PlayerSyncData* playerdata) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete playerdata_;
  }
  if (playerdata) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      playerdata = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, playerdata, submessage_arena);
    }
    
  } else {
    
  }
  playerdata_ = playerdata;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerLoginRsp.PlayerData)
}

// -------------------------------------------------------------------

// PlayerSaveData

// string PlayerID = 1;
inline void PlayerSaveData::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSaveData::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSaveData.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerSaveData::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSaveData.PlayerID)
}
#if LANG_CXX11
inline void PlayerSaveData::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerSaveData.PlayerID)
}
#endif
inline void PlayerSaveData::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerSaveData.PlayerID)
}
inline void PlayerSaveData::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerSaveData.PlayerID)
}
inline ::std::string* PlayerSaveData::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSaveData.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSaveData::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSaveData.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSaveData::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSaveData.PlayerID)
}

// string Password = 2;
inline void PlayerSaveData::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSaveData::password() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSaveData.Password)
  return password_.GetNoArena();
}
inline void PlayerSaveData::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSaveData.Password)
}
#if LANG_CXX11
inline void PlayerSaveData::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerSaveData.Password)
}
#endif
inline void PlayerSaveData::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerSaveData.Password)
}
inline void PlayerSaveData::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerSaveData.Password)
}
inline ::std::string* PlayerSaveData::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSaveData.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSaveData::release_password() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSaveData.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSaveData::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSaveData.Password)
}

// bytes Name = 3;
inline void PlayerSaveData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSaveData::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSaveData.Name)
  return name_.GetNoArena();
}
inline void PlayerSaveData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSaveData.Name)
}
#if LANG_CXX11
inline void PlayerSaveData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerSaveData.Name)
}
#endif
inline void PlayerSaveData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerSaveData.Name)
}
inline void PlayerSaveData::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerSaveData.Name)
}
inline ::std::string* PlayerSaveData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSaveData.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSaveData::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSaveData.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSaveData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSaveData.Name)
}

// -------------------------------------------------------------------

// PlayerSyncData

// string Name = 1;
inline void PlayerSyncData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSyncData::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSyncData.Name)
  return name_.GetNoArena();
}
inline void PlayerSyncData::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSyncData.Name)
}
#if LANG_CXX11
inline void PlayerSyncData::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerSyncData.Name)
}
#endif
inline void PlayerSyncData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerSyncData.Name)
}
inline void PlayerSyncData::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerSyncData.Name)
}
inline ::std::string* PlayerSyncData::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSyncData.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSyncData::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSyncData.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSyncData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSyncData.Name)
}

// string Playerid = 2;
inline void PlayerSyncData::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerSyncData::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerSyncData.Playerid)
  return playerid_.GetNoArena();
}
inline void PlayerSyncData::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerSyncData.Playerid)
}
#if LANG_CXX11
inline void PlayerSyncData::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerSyncData.Playerid)
}
#endif
inline void PlayerSyncData::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerSyncData.Playerid)
}
inline void PlayerSyncData::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerSyncData.Playerid)
}
inline ::std::string* PlayerSyncData::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerSyncData.Playerid)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerSyncData::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerSyncData.Playerid)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerSyncData::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerSyncData.Playerid)
}

// -------------------------------------------------------------------

// RoomInfoMsg

// string roomName = 1;
inline void RoomInfoMsg::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RoomInfoMsg::roomname() const {
  // @@protoc_insertion_point(field_get:TCCamp.RoomInfoMsg.roomName)
  return roomname_.GetNoArena();
}
inline void RoomInfoMsg::set_roomname(const ::std::string& value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.RoomInfoMsg.roomName)
}
#if LANG_CXX11
inline void RoomInfoMsg::set_roomname(::std::string&& value) {
  
  roomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.RoomInfoMsg.roomName)
}
#endif
inline void RoomInfoMsg::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.RoomInfoMsg.roomName)
}
inline void RoomInfoMsg::set_roomname(const char* value, size_t size) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.RoomInfoMsg.roomName)
}
inline ::std::string* RoomInfoMsg::mutable_roomname() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.RoomInfoMsg.roomName)
  return roomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RoomInfoMsg::release_roomname() {
  // @@protoc_insertion_point(field_release:TCCamp.RoomInfoMsg.roomName)
  
  return roomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RoomInfoMsg::set_allocated_roomname(::std::string* roomname) {
  if (roomname != NULL) {
    
  } else {
    
  }
  roomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.RoomInfoMsg.roomName)
}

// int32 roomId = 2;
inline void RoomInfoMsg::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 RoomInfoMsg::roomid() const {
  // @@protoc_insertion_point(field_get:TCCamp.RoomInfoMsg.roomId)
  return roomid_;
}
inline void RoomInfoMsg::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.RoomInfoMsg.roomId)
}

// int32 maxNum = 3;
inline void RoomInfoMsg::clear_maxnum() {
  maxnum_ = 0;
}
inline ::google::protobuf::int32 RoomInfoMsg::maxnum() const {
  // @@protoc_insertion_point(field_get:TCCamp.RoomInfoMsg.maxNum)
  return maxnum_;
}
inline void RoomInfoMsg::set_maxnum(::google::protobuf::int32 value) {
  
  maxnum_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.RoomInfoMsg.maxNum)
}

// -------------------------------------------------------------------

// RoomInfoReq

// int32 sceneId = 1;
inline void RoomInfoReq::clear_sceneid() {
  sceneid_ = 0;
}
inline ::google::protobuf::int32 RoomInfoReq::sceneid() const {
  // @@protoc_insertion_point(field_get:TCCamp.RoomInfoReq.sceneId)
  return sceneid_;
}
inline void RoomInfoReq::set_sceneid(::google::protobuf::int32 value) {
  
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.RoomInfoReq.sceneId)
}

// -------------------------------------------------------------------

// RoomInfoRsp

// repeated .TCCamp.RoomInfoMsg RoomInfoList = 1;
inline int RoomInfoRsp::roominfolist_size() const {
  return roominfolist_.size();
}
inline void RoomInfoRsp::clear_roominfolist() {
  roominfolist_.Clear();
}
inline ::TCCamp::RoomInfoMsg* RoomInfoRsp::mutable_roominfolist(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.RoomInfoRsp.RoomInfoList)
  return roominfolist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::RoomInfoMsg >*
RoomInfoRsp::mutable_roominfolist() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.RoomInfoRsp.RoomInfoList)
  return &roominfolist_;
}
inline const ::TCCamp::RoomInfoMsg& RoomInfoRsp::roominfolist(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.RoomInfoRsp.RoomInfoList)
  return roominfolist_.Get(index);
}
inline ::TCCamp::RoomInfoMsg* RoomInfoRsp::add_roominfolist() {
  // @@protoc_insertion_point(field_add:TCCamp.RoomInfoRsp.RoomInfoList)
  return roominfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::RoomInfoMsg >&
RoomInfoRsp::roominfolist() const {
  // @@protoc_insertion_point(field_list:TCCamp.RoomInfoRsp.RoomInfoList)
  return roominfolist_;
}

// -------------------------------------------------------------------

// RoomNumChange

// int32 currentNum = 1;
inline void RoomNumChange::clear_currentnum() {
  currentnum_ = 0;
}
inline ::google::protobuf::int32 RoomNumChange::currentnum() const {
  // @@protoc_insertion_point(field_get:TCCamp.RoomNumChange.currentNum)
  return currentnum_;
}
inline void RoomNumChange::set_currentnum(::google::protobuf::int32 value) {
  
  currentnum_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.RoomNumChange.currentNum)
}

// -------------------------------------------------------------------

// EnterRoomReq

// int32 roomId = 1;
inline void EnterRoomReq::clear_roomid() {
  roomid_ = 0;
}
inline ::google::protobuf::int32 EnterRoomReq::roomid() const {
  // @@protoc_insertion_point(field_get:TCCamp.EnterRoomReq.roomId)
  return roomid_;
}
inline void EnterRoomReq::set_roomid(::google::protobuf::int32 value) {
  
  roomid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.EnterRoomReq.roomId)
}

// -------------------------------------------------------------------

// EnterRoomRsp

// int32 resCode = 1;
inline void EnterRoomRsp::clear_rescode() {
  rescode_ = 0;
}
inline ::google::protobuf::int32 EnterRoomRsp::rescode() const {
  // @@protoc_insertion_point(field_get:TCCamp.EnterRoomRsp.resCode)
  return rescode_;
}
inline void EnterRoomRsp::set_rescode(::google::protobuf::int32 value) {
  
  rescode_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.EnterRoomRsp.resCode)
}

// string resStr = 2;
inline void EnterRoomRsp::clear_resstr() {
  resstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& EnterRoomRsp::resstr() const {
  // @@protoc_insertion_point(field_get:TCCamp.EnterRoomRsp.resStr)
  return resstr_.GetNoArena();
}
inline void EnterRoomRsp::set_resstr(const ::std::string& value) {
  
  resstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.EnterRoomRsp.resStr)
}
#if LANG_CXX11
inline void EnterRoomRsp::set_resstr(::std::string&& value) {
  
  resstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.EnterRoomRsp.resStr)
}
#endif
inline void EnterRoomRsp::set_resstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  resstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.EnterRoomRsp.resStr)
}
inline void EnterRoomRsp::set_resstr(const char* value, size_t size) {
  
  resstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.EnterRoomRsp.resStr)
}
inline ::std::string* EnterRoomRsp::mutable_resstr() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.EnterRoomRsp.resStr)
  return resstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EnterRoomRsp::release_resstr() {
  // @@protoc_insertion_point(field_release:TCCamp.EnterRoomRsp.resStr)
  
  return resstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EnterRoomRsp::set_allocated_resstr(::std::string* resstr) {
  if (resstr != NULL) {
    
  } else {
    
  }
  resstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resstr);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.EnterRoomRsp.resStr)
}

// .TCCamp.RoomInfoMsg roomInfo = 3;
inline bool EnterRoomRsp::has_roominfo() const {
  return this != internal_default_instance() && roominfo_ != NULL;
}
inline void EnterRoomRsp::clear_roominfo() {
  if (GetArenaNoVirtual() == NULL && roominfo_ != NULL) {
    delete roominfo_;
  }
  roominfo_ = NULL;
}
inline const ::TCCamp::RoomInfoMsg& EnterRoomRsp::_internal_roominfo() const {
  return *roominfo_;
}
inline const ::TCCamp::RoomInfoMsg& EnterRoomRsp::roominfo() const {
  const ::TCCamp::RoomInfoMsg* p = roominfo_;
  // @@protoc_insertion_point(field_get:TCCamp.EnterRoomRsp.roomInfo)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::RoomInfoMsg*>(
      &::TCCamp::_RoomInfoMsg_default_instance_);
}
inline ::TCCamp::RoomInfoMsg* EnterRoomRsp::release_roominfo() {
  // @@protoc_insertion_point(field_release:TCCamp.EnterRoomRsp.roomInfo)
  
  ::TCCamp::RoomInfoMsg* temp = roominfo_;
  roominfo_ = NULL;
  return temp;
}
inline ::TCCamp::RoomInfoMsg* EnterRoomRsp::mutable_roominfo() {
  
  if (roominfo_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::RoomInfoMsg>(GetArenaNoVirtual());
    roominfo_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.EnterRoomRsp.roomInfo)
  return roominfo_;
}
inline void EnterRoomRsp::set_allocated_roominfo(::TCCamp::RoomInfoMsg* roominfo) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete roominfo_;
  }
  if (roominfo) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      roominfo = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, roominfo, submessage_arena);
    }
    
  } else {
    
  }
  roominfo_ = roominfo;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.EnterRoomRsp.roomInfo)
}

// -------------------------------------------------------------------

// CreateRoomReq

// string roomName = 1;
inline void CreateRoomReq::clear_roomname() {
  roomname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateRoomReq::roomname() const {
  // @@protoc_insertion_point(field_get:TCCamp.CreateRoomReq.roomName)
  return roomname_.GetNoArena();
}
inline void CreateRoomReq::set_roomname(const ::std::string& value) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.CreateRoomReq.roomName)
}
#if LANG_CXX11
inline void CreateRoomReq::set_roomname(::std::string&& value) {
  
  roomname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.CreateRoomReq.roomName)
}
#endif
inline void CreateRoomReq::set_roomname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.CreateRoomReq.roomName)
}
inline void CreateRoomReq::set_roomname(const char* value, size_t size) {
  
  roomname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.CreateRoomReq.roomName)
}
inline ::std::string* CreateRoomReq::mutable_roomname() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.CreateRoomReq.roomName)
  return roomname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateRoomReq::release_roomname() {
  // @@protoc_insertion_point(field_release:TCCamp.CreateRoomReq.roomName)
  
  return roomname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateRoomReq::set_allocated_roomname(::std::string* roomname) {
  if (roomname != NULL) {
    
  } else {
    
  }
  roomname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), roomname);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.CreateRoomReq.roomName)
}

// int32 sceneId = 2;
inline void CreateRoomReq::clear_sceneid() {
  sceneid_ = 0;
}
inline ::google::protobuf::int32 CreateRoomReq::sceneid() const {
  // @@protoc_insertion_point(field_get:TCCamp.CreateRoomReq.sceneId)
  return sceneid_;
}
inline void CreateRoomReq::set_sceneid(::google::protobuf::int32 value) {
  
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CreateRoomReq.sceneId)
}

// int32 maxNum = 3;
inline void CreateRoomReq::clear_maxnum() {
  maxnum_ = 0;
}
inline ::google::protobuf::int32 CreateRoomReq::maxnum() const {
  // @@protoc_insertion_point(field_get:TCCamp.CreateRoomReq.maxNum)
  return maxnum_;
}
inline void CreateRoomReq::set_maxnum(::google::protobuf::int32 value) {
  
  maxnum_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CreateRoomReq.maxNum)
}

// -------------------------------------------------------------------

// PlayerCreateReq

// string PlayerID = 1;
inline void PlayerCreateReq::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateReq::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateReq.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerCreateReq::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateReq.PlayerID)
}
#if LANG_CXX11
inline void PlayerCreateReq::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateReq.PlayerID)
}
#endif
inline void PlayerCreateReq::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateReq.PlayerID)
}
inline void PlayerCreateReq::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateReq.PlayerID)
}
inline ::std::string* PlayerCreateReq::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateReq.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateReq::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateReq.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateReq::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateReq.PlayerID)
}

// string Password = 2;
inline void PlayerCreateReq::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateReq::password() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateReq.Password)
  return password_.GetNoArena();
}
inline void PlayerCreateReq::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateReq.Password)
}
#if LANG_CXX11
inline void PlayerCreateReq::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateReq.Password)
}
#endif
inline void PlayerCreateReq::set_password(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateReq.Password)
}
inline void PlayerCreateReq::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateReq.Password)
}
inline ::std::string* PlayerCreateReq::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateReq.Password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateReq::release_password() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateReq.Password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateReq::set_allocated_password(::std::string* password) {
  if (password != NULL) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateReq.Password)
}

// bytes Name = 3;
inline void PlayerCreateReq::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateReq::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateReq.Name)
  return name_.GetNoArena();
}
inline void PlayerCreateReq::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateReq.Name)
}
#if LANG_CXX11
inline void PlayerCreateReq::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateReq.Name)
}
#endif
inline void PlayerCreateReq::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateReq.Name)
}
inline void PlayerCreateReq::set_name(const void* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateReq.Name)
}
inline ::std::string* PlayerCreateReq::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateReq.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateReq::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateReq.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateReq::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateReq.Name)
}

// -------------------------------------------------------------------

// PlayerCreateRsp

// int32 Result = 1;
inline void PlayerCreateRsp::clear_result() {
  result_ = 0;
}
inline ::google::protobuf::int32 PlayerCreateRsp::result() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateRsp.Result)
  return result_;
}
inline void PlayerCreateRsp::set_result(::google::protobuf::int32 value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateRsp.Result)
}

// string PlayerID = 2;
inline void PlayerCreateRsp::clear_playerid() {
  playerid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateRsp::playerid() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateRsp.PlayerID)
  return playerid_.GetNoArena();
}
inline void PlayerCreateRsp::set_playerid(const ::std::string& value) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateRsp.PlayerID)
}
#if LANG_CXX11
inline void PlayerCreateRsp::set_playerid(::std::string&& value) {
  
  playerid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateRsp.PlayerID)
}
#endif
inline void PlayerCreateRsp::set_playerid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateRsp.PlayerID)
}
inline void PlayerCreateRsp::set_playerid(const char* value, size_t size) {
  
  playerid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateRsp.PlayerID)
}
inline ::std::string* PlayerCreateRsp::mutable_playerid() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateRsp.PlayerID)
  return playerid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateRsp::release_playerid() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateRsp.PlayerID)
  
  return playerid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateRsp::set_allocated_playerid(::std::string* playerid) {
  if (playerid != NULL) {
    
  } else {
    
  }
  playerid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), playerid);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateRsp.PlayerID)
}

// string Name = 3;
inline void PlayerCreateRsp::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateRsp::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateRsp.Name)
  return name_.GetNoArena();
}
inline void PlayerCreateRsp::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateRsp.Name)
}
#if LANG_CXX11
inline void PlayerCreateRsp::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateRsp.Name)
}
#endif
inline void PlayerCreateRsp::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateRsp.Name)
}
inline void PlayerCreateRsp::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateRsp.Name)
}
inline ::std::string* PlayerCreateRsp::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateRsp.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateRsp::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateRsp.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateRsp::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateRsp.Name)
}

// string Reason = 4;
inline void PlayerCreateRsp::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PlayerCreateRsp::reason() const {
  // @@protoc_insertion_point(field_get:TCCamp.PlayerCreateRsp.Reason)
  return reason_.GetNoArena();
}
inline void PlayerCreateRsp::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.PlayerCreateRsp.Reason)
}
#if LANG_CXX11
inline void PlayerCreateRsp::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.PlayerCreateRsp.Reason)
}
#endif
inline void PlayerCreateRsp::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.PlayerCreateRsp.Reason)
}
inline void PlayerCreateRsp::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.PlayerCreateRsp.Reason)
}
inline ::std::string* PlayerCreateRsp::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.PlayerCreateRsp.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PlayerCreateRsp::release_reason() {
  // @@protoc_insertion_point(field_release:TCCamp.PlayerCreateRsp.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PlayerCreateRsp::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.PlayerCreateRsp.Reason)
}

// -------------------------------------------------------------------

// SyncAnnounce

// bytes Announce = 1;
inline void SyncAnnounce::clear_announce() {
  announce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SyncAnnounce::announce() const {
  // @@protoc_insertion_point(field_get:TCCamp.SyncAnnounce.Announce)
  return announce_.GetNoArena();
}
inline void SyncAnnounce::set_announce(const ::std::string& value) {
  
  announce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.SyncAnnounce.Announce)
}
#if LANG_CXX11
inline void SyncAnnounce::set_announce(::std::string&& value) {
  
  announce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.SyncAnnounce.Announce)
}
#endif
inline void SyncAnnounce::set_announce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  announce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.SyncAnnounce.Announce)
}
inline void SyncAnnounce::set_announce(const void* value, size_t size) {
  
  announce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.SyncAnnounce.Announce)
}
inline ::std::string* SyncAnnounce::mutable_announce() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.SyncAnnounce.Announce)
  return announce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncAnnounce::release_announce() {
  // @@protoc_insertion_point(field_release:TCCamp.SyncAnnounce.Announce)
  
  return announce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncAnnounce::set_allocated_announce(::std::string* announce) {
  if (announce != NULL) {
    
  } else {
    
  }
  announce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), announce);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.SyncAnnounce.Announce)
}

// -------------------------------------------------------------------

// SceneBriefRsp

// repeated .TCCamp.SceneBriefMsg SceneBrief = 1;
inline int SceneBriefRsp::scenebrief_size() const {
  return scenebrief_.size();
}
inline void SceneBriefRsp::clear_scenebrief() {
  scenebrief_.Clear();
}
inline ::TCCamp::SceneBriefMsg* SceneBriefRsp::mutable_scenebrief(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.SceneBriefRsp.SceneBrief)
  return scenebrief_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::SceneBriefMsg >*
SceneBriefRsp::mutable_scenebrief() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.SceneBriefRsp.SceneBrief)
  return &scenebrief_;
}
inline const ::TCCamp::SceneBriefMsg& SceneBriefRsp::scenebrief(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.SceneBriefRsp.SceneBrief)
  return scenebrief_.Get(index);
}
inline ::TCCamp::SceneBriefMsg* SceneBriefRsp::add_scenebrief() {
  // @@protoc_insertion_point(field_add:TCCamp.SceneBriefRsp.SceneBrief)
  return scenebrief_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::SceneBriefMsg >&
SceneBriefRsp::scenebrief() const {
  // @@protoc_insertion_point(field_list:TCCamp.SceneBriefRsp.SceneBrief)
  return scenebrief_;
}

// -------------------------------------------------------------------

// SceneBriefMsg

// string SceneName = 1;
inline void SceneBriefMsg::clear_scenename() {
  scenename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SceneBriefMsg::scenename() const {
  // @@protoc_insertion_point(field_get:TCCamp.SceneBriefMsg.SceneName)
  return scenename_.GetNoArena();
}
inline void SceneBriefMsg::set_scenename(const ::std::string& value) {
  
  scenename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.SceneBriefMsg.SceneName)
}
#if LANG_CXX11
inline void SceneBriefMsg::set_scenename(::std::string&& value) {
  
  scenename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.SceneBriefMsg.SceneName)
}
#endif
inline void SceneBriefMsg::set_scenename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  scenename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.SceneBriefMsg.SceneName)
}
inline void SceneBriefMsg::set_scenename(const char* value, size_t size) {
  
  scenename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.SceneBriefMsg.SceneName)
}
inline ::std::string* SceneBriefMsg::mutable_scenename() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.SceneBriefMsg.SceneName)
  return scenename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SceneBriefMsg::release_scenename() {
  // @@protoc_insertion_point(field_release:TCCamp.SceneBriefMsg.SceneName)
  
  return scenename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SceneBriefMsg::set_allocated_scenename(::std::string* scenename) {
  if (scenename != NULL) {
    
  } else {
    
  }
  scenename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), scenename);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.SceneBriefMsg.SceneName)
}

// int32 SceneId = 2;
inline void SceneBriefMsg::clear_sceneid() {
  sceneid_ = 0;
}
inline ::google::protobuf::int32 SceneBriefMsg::sceneid() const {
  // @@protoc_insertion_point(field_get:TCCamp.SceneBriefMsg.SceneId)
  return sceneid_;
}
inline void SceneBriefMsg::set_sceneid(::google::protobuf::int32 value) {
  
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.SceneBriefMsg.SceneId)
}

// int32 GargoyleCount = 3;
inline void SceneBriefMsg::clear_gargoylecount() {
  gargoylecount_ = 0;
}
inline ::google::protobuf::int32 SceneBriefMsg::gargoylecount() const {
  // @@protoc_insertion_point(field_get:TCCamp.SceneBriefMsg.GargoyleCount)
  return gargoylecount_;
}
inline void SceneBriefMsg::set_gargoylecount(::google::protobuf::int32 value) {
  
  gargoylecount_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.SceneBriefMsg.GargoyleCount)
}

// int32 GhostCount = 4;
inline void SceneBriefMsg::clear_ghostcount() {
  ghostcount_ = 0;
}
inline ::google::protobuf::int32 SceneBriefMsg::ghostcount() const {
  // @@protoc_insertion_point(field_get:TCCamp.SceneBriefMsg.GhostCount)
  return ghostcount_;
}
inline void SceneBriefMsg::set_ghostcount(::google::protobuf::int32 value) {
  
  ghostcount_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.SceneBriefMsg.GhostCount)
}

// int32 Difficult = 5;
inline void SceneBriefMsg::clear_difficult() {
  difficult_ = 0;
}
inline ::google::protobuf::int32 SceneBriefMsg::difficult() const {
  // @@protoc_insertion_point(field_get:TCCamp.SceneBriefMsg.Difficult)
  return difficult_;
}
inline void SceneBriefMsg::set_difficult(::google::protobuf::int32 value) {
  
  difficult_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.SceneBriefMsg.Difficult)
}

// -------------------------------------------------------------------

// SceneObjectMsg

// int32 Id = 1;
inline void SceneObjectMsg::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 SceneObjectMsg::id() const {
  // @@protoc_insertion_point(field_get:TCCamp.SceneObjectMsg.Id)
  return id_;
}
inline void SceneObjectMsg::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.SceneObjectMsg.Id)
}

// .TCCamp.SceneObjectType Type = 2;
inline void SceneObjectMsg::clear_type() {
  type_ = 0;
}
inline ::TCCamp::SceneObjectType SceneObjectMsg::type() const {
  // @@protoc_insertion_point(field_get:TCCamp.SceneObjectMsg.Type)
  return static_cast< ::TCCamp::SceneObjectType >(type_);
}
inline void SceneObjectMsg::set_type(::TCCamp::SceneObjectType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.SceneObjectMsg.Type)
}

// .TCCamp.Vec3Msg Position = 3;
inline bool SceneObjectMsg::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void SceneObjectMsg::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::TCCamp::Vec3Msg& SceneObjectMsg::_internal_position() const {
  return *position_;
}
inline const ::TCCamp::Vec3Msg& SceneObjectMsg::position() const {
  const ::TCCamp::Vec3Msg* p = position_;
  // @@protoc_insertion_point(field_get:TCCamp.SceneObjectMsg.Position)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Vec3Msg*>(
      &::TCCamp::_Vec3Msg_default_instance_);
}
inline ::TCCamp::Vec3Msg* SceneObjectMsg::release_position() {
  // @@protoc_insertion_point(field_release:TCCamp.SceneObjectMsg.Position)
  
  ::TCCamp::Vec3Msg* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::TCCamp::Vec3Msg* SceneObjectMsg::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Vec3Msg>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.SceneObjectMsg.Position)
  return position_;
}
inline void SceneObjectMsg::set_allocated_position(::TCCamp::Vec3Msg* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.SceneObjectMsg.Position)
}

// .TCCamp.Vec3Msg Rotation = 4;
inline bool SceneObjectMsg::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
inline void SceneObjectMsg::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) {
    delete rotation_;
  }
  rotation_ = NULL;
}
inline const ::TCCamp::Vec3Msg& SceneObjectMsg::_internal_rotation() const {
  return *rotation_;
}
inline const ::TCCamp::Vec3Msg& SceneObjectMsg::rotation() const {
  const ::TCCamp::Vec3Msg* p = rotation_;
  // @@protoc_insertion_point(field_get:TCCamp.SceneObjectMsg.Rotation)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Vec3Msg*>(
      &::TCCamp::_Vec3Msg_default_instance_);
}
inline ::TCCamp::Vec3Msg* SceneObjectMsg::release_rotation() {
  // @@protoc_insertion_point(field_release:TCCamp.SceneObjectMsg.Rotation)
  
  ::TCCamp::Vec3Msg* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline ::TCCamp::Vec3Msg* SceneObjectMsg::mutable_rotation() {
  
  if (rotation_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Vec3Msg>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.SceneObjectMsg.Rotation)
  return rotation_;
}
inline void SceneObjectMsg::set_allocated_rotation(::TCCamp::Vec3Msg* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rotation_;
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.SceneObjectMsg.Rotation)
}

// -------------------------------------------------------------------

// SceneMonsterRsp

// repeated .TCCamp.SceneObjectMsg MonsterList = 1;
inline int SceneMonsterRsp::monsterlist_size() const {
  return monsterlist_.size();
}
inline void SceneMonsterRsp::clear_monsterlist() {
  monsterlist_.Clear();
}
inline ::TCCamp::SceneObjectMsg* SceneMonsterRsp::mutable_monsterlist(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.SceneMonsterRsp.MonsterList)
  return monsterlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::SceneObjectMsg >*
SceneMonsterRsp::mutable_monsterlist() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.SceneMonsterRsp.MonsterList)
  return &monsterlist_;
}
inline const ::TCCamp::SceneObjectMsg& SceneMonsterRsp::monsterlist(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.SceneMonsterRsp.MonsterList)
  return monsterlist_.Get(index);
}
inline ::TCCamp::SceneObjectMsg* SceneMonsterRsp::add_monsterlist() {
  // @@protoc_insertion_point(field_add:TCCamp.SceneMonsterRsp.MonsterList)
  return monsterlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::SceneObjectMsg >&
SceneMonsterRsp::monsterlist() const {
  // @@protoc_insertion_point(field_list:TCCamp.SceneMonsterRsp.MonsterList)
  return monsterlist_;
}

// int32 NetId = 2;
inline void SceneMonsterRsp::clear_netid() {
  netid_ = 0;
}
inline ::google::protobuf::int32 SceneMonsterRsp::netid() const {
  // @@protoc_insertion_point(field_get:TCCamp.SceneMonsterRsp.NetId)
  return netid_;
}
inline void SceneMonsterRsp::set_netid(::google::protobuf::int32 value) {
  
  netid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.SceneMonsterRsp.NetId)
}

// -------------------------------------------------------------------

// SceneObjectRsp

// repeated .TCCamp.SceneObjectMsg ObjectList = 1;
inline int SceneObjectRsp::objectlist_size() const {
  return objectlist_.size();
}
inline void SceneObjectRsp::clear_objectlist() {
  objectlist_.Clear();
}
inline ::TCCamp::SceneObjectMsg* SceneObjectRsp::mutable_objectlist(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.SceneObjectRsp.ObjectList)
  return objectlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::SceneObjectMsg >*
SceneObjectRsp::mutable_objectlist() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.SceneObjectRsp.ObjectList)
  return &objectlist_;
}
inline const ::TCCamp::SceneObjectMsg& SceneObjectRsp::objectlist(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.SceneObjectRsp.ObjectList)
  return objectlist_.Get(index);
}
inline ::TCCamp::SceneObjectMsg* SceneObjectRsp::add_objectlist() {
  // @@protoc_insertion_point(field_add:TCCamp.SceneObjectRsp.ObjectList)
  return objectlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::SceneObjectMsg >&
SceneObjectRsp::objectlist() const {
  // @@protoc_insertion_point(field_list:TCCamp.SceneObjectRsp.ObjectList)
  return objectlist_;
}

// -------------------------------------------------------------------

// Vec3Msg

// float x = 1;
inline void Vec3Msg::clear_x() {
  x_ = 0;
}
inline float Vec3Msg::x() const {
  // @@protoc_insertion_point(field_get:TCCamp.Vec3Msg.x)
  return x_;
}
inline void Vec3Msg::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.Vec3Msg.x)
}

// float y = 2;
inline void Vec3Msg::clear_y() {
  y_ = 0;
}
inline float Vec3Msg::y() const {
  // @@protoc_insertion_point(field_get:TCCamp.Vec3Msg.y)
  return y_;
}
inline void Vec3Msg::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.Vec3Msg.y)
}

// float z = 3;
inline void Vec3Msg::clear_z() {
  z_ = 0;
}
inline float Vec3Msg::z() const {
  // @@protoc_insertion_point(field_get:TCCamp.Vec3Msg.z)
  return z_;
}
inline void Vec3Msg::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.Vec3Msg.z)
}

// -------------------------------------------------------------------

// MonsterAttributeMsg

// .TCCamp.SceneObjectType Type = 1;
inline void MonsterAttributeMsg::clear_type() {
  type_ = 0;
}
inline ::TCCamp::SceneObjectType MonsterAttributeMsg::type() const {
  // @@protoc_insertion_point(field_get:TCCamp.MonsterAttributeMsg.Type)
  return static_cast< ::TCCamp::SceneObjectType >(type_);
}
inline void MonsterAttributeMsg::set_type(::TCCamp::SceneObjectType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.MonsterAttributeMsg.Type)
}

// string name = 2;
inline void MonsterAttributeMsg::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MonsterAttributeMsg::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.MonsterAttributeMsg.name)
  return name_.GetNoArena();
}
inline void MonsterAttributeMsg::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.MonsterAttributeMsg.name)
}
#if LANG_CXX11
inline void MonsterAttributeMsg::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.MonsterAttributeMsg.name)
}
#endif
inline void MonsterAttributeMsg::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.MonsterAttributeMsg.name)
}
inline void MonsterAttributeMsg::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.MonsterAttributeMsg.name)
}
inline ::std::string* MonsterAttributeMsg::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.MonsterAttributeMsg.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MonsterAttributeMsg::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.MonsterAttributeMsg.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MonsterAttributeMsg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.MonsterAttributeMsg.name)
}

// int32 Attack = 3;
inline void MonsterAttributeMsg::clear_attack() {
  attack_ = 0;
}
inline ::google::protobuf::int32 MonsterAttributeMsg::attack() const {
  // @@protoc_insertion_point(field_get:TCCamp.MonsterAttributeMsg.Attack)
  return attack_;
}
inline void MonsterAttributeMsg::set_attack(::google::protobuf::int32 value) {
  
  attack_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.MonsterAttributeMsg.Attack)
}

// int32 Hp = 4;
inline void MonsterAttributeMsg::clear_hp() {
  hp_ = 0;
}
inline ::google::protobuf::int32 MonsterAttributeMsg::hp() const {
  // @@protoc_insertion_point(field_get:TCCamp.MonsterAttributeMsg.Hp)
  return hp_;
}
inline void MonsterAttributeMsg::set_hp(::google::protobuf::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.MonsterAttributeMsg.Hp)
}

// float Speed = 5;
inline void MonsterAttributeMsg::clear_speed() {
  speed_ = 0;
}
inline float MonsterAttributeMsg::speed() const {
  // @@protoc_insertion_point(field_get:TCCamp.MonsterAttributeMsg.Speed)
  return speed_;
}
inline void MonsterAttributeMsg::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.MonsterAttributeMsg.Speed)
}

// int32 Value = 6;
inline void MonsterAttributeMsg::clear_value() {
  value_ = 0;
}
inline ::google::protobuf::int32 MonsterAttributeMsg::value() const {
  // @@protoc_insertion_point(field_get:TCCamp.MonsterAttributeMsg.Value)
  return value_;
}
inline void MonsterAttributeMsg::set_value(::google::protobuf::int32 value) {
  
  value_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.MonsterAttributeMsg.Value)
}

// float RebornTime = 7;
inline void MonsterAttributeMsg::clear_reborntime() {
  reborntime_ = 0;
}
inline float MonsterAttributeMsg::reborntime() const {
  // @@protoc_insertion_point(field_get:TCCamp.MonsterAttributeMsg.RebornTime)
  return reborntime_;
}
inline void MonsterAttributeMsg::set_reborntime(float value) {
  
  reborntime_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.MonsterAttributeMsg.RebornTime)
}

// float DetectRange = 8;
inline void MonsterAttributeMsg::clear_detectrange() {
  detectrange_ = 0;
}
inline float MonsterAttributeMsg::detectrange() const {
  // @@protoc_insertion_point(field_get:TCCamp.MonsterAttributeMsg.DetectRange)
  return detectrange_;
}
inline void MonsterAttributeMsg::set_detectrange(float value) {
  
  detectrange_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.MonsterAttributeMsg.DetectRange)
}

// -------------------------------------------------------------------

// MonsterAttributeRsp

// repeated .TCCamp.MonsterAttributeMsg AttributeList = 1;
inline int MonsterAttributeRsp::attributelist_size() const {
  return attributelist_.size();
}
inline void MonsterAttributeRsp::clear_attributelist() {
  attributelist_.Clear();
}
inline ::TCCamp::MonsterAttributeMsg* MonsterAttributeRsp::mutable_attributelist(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.MonsterAttributeRsp.AttributeList)
  return attributelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::MonsterAttributeMsg >*
MonsterAttributeRsp::mutable_attributelist() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.MonsterAttributeRsp.AttributeList)
  return &attributelist_;
}
inline const ::TCCamp::MonsterAttributeMsg& MonsterAttributeRsp::attributelist(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.MonsterAttributeRsp.AttributeList)
  return attributelist_.Get(index);
}
inline ::TCCamp::MonsterAttributeMsg* MonsterAttributeRsp::add_attributelist() {
  // @@protoc_insertion_point(field_add:TCCamp.MonsterAttributeRsp.AttributeList)
  return attributelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::MonsterAttributeMsg >&
MonsterAttributeRsp::attributelist() const {
  // @@protoc_insertion_point(field_list:TCCamp.MonsterAttributeRsp.AttributeList)
  return attributelist_;
}

// -------------------------------------------------------------------

// MonsterSynMsg

// int32 Id = 1;
inline void MonsterSynMsg::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 MonsterSynMsg::id() const {
  // @@protoc_insertion_point(field_get:TCCamp.MonsterSynMsg.Id)
  return id_;
}
inline void MonsterSynMsg::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.MonsterSynMsg.Id)
}

// int32 Hp = 2;
inline void MonsterSynMsg::clear_hp() {
  hp_ = 0;
}
inline ::google::protobuf::int32 MonsterSynMsg::hp() const {
  // @@protoc_insertion_point(field_get:TCCamp.MonsterSynMsg.Hp)
  return hp_;
}
inline void MonsterSynMsg::set_hp(::google::protobuf::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.MonsterSynMsg.Hp)
}

// .TCCamp.Vec3Msg Position = 3;
inline bool MonsterSynMsg::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void MonsterSynMsg::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::TCCamp::Vec3Msg& MonsterSynMsg::_internal_position() const {
  return *position_;
}
inline const ::TCCamp::Vec3Msg& MonsterSynMsg::position() const {
  const ::TCCamp::Vec3Msg* p = position_;
  // @@protoc_insertion_point(field_get:TCCamp.MonsterSynMsg.Position)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Vec3Msg*>(
      &::TCCamp::_Vec3Msg_default_instance_);
}
inline ::TCCamp::Vec3Msg* MonsterSynMsg::release_position() {
  // @@protoc_insertion_point(field_release:TCCamp.MonsterSynMsg.Position)
  
  ::TCCamp::Vec3Msg* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::TCCamp::Vec3Msg* MonsterSynMsg::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Vec3Msg>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.MonsterSynMsg.Position)
  return position_;
}
inline void MonsterSynMsg::set_allocated_position(::TCCamp::Vec3Msg* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.MonsterSynMsg.Position)
}

// .TCCamp.Vec3Msg Rotation = 4;
inline bool MonsterSynMsg::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
inline void MonsterSynMsg::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) {
    delete rotation_;
  }
  rotation_ = NULL;
}
inline const ::TCCamp::Vec3Msg& MonsterSynMsg::_internal_rotation() const {
  return *rotation_;
}
inline const ::TCCamp::Vec3Msg& MonsterSynMsg::rotation() const {
  const ::TCCamp::Vec3Msg* p = rotation_;
  // @@protoc_insertion_point(field_get:TCCamp.MonsterSynMsg.Rotation)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Vec3Msg*>(
      &::TCCamp::_Vec3Msg_default_instance_);
}
inline ::TCCamp::Vec3Msg* MonsterSynMsg::release_rotation() {
  // @@protoc_insertion_point(field_release:TCCamp.MonsterSynMsg.Rotation)
  
  ::TCCamp::Vec3Msg* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline ::TCCamp::Vec3Msg* MonsterSynMsg::mutable_rotation() {
  
  if (rotation_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Vec3Msg>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.MonsterSynMsg.Rotation)
  return rotation_;
}
inline void MonsterSynMsg::set_allocated_rotation(::TCCamp::Vec3Msg* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rotation_;
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.MonsterSynMsg.Rotation)
}

// .TCCamp.Vec3Msg TargetPos = 5;
inline bool MonsterSynMsg::has_targetpos() const {
  return this != internal_default_instance() && targetpos_ != NULL;
}
inline void MonsterSynMsg::clear_targetpos() {
  if (GetArenaNoVirtual() == NULL && targetpos_ != NULL) {
    delete targetpos_;
  }
  targetpos_ = NULL;
}
inline const ::TCCamp::Vec3Msg& MonsterSynMsg::_internal_targetpos() const {
  return *targetpos_;
}
inline const ::TCCamp::Vec3Msg& MonsterSynMsg::targetpos() const {
  const ::TCCamp::Vec3Msg* p = targetpos_;
  // @@protoc_insertion_point(field_get:TCCamp.MonsterSynMsg.TargetPos)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Vec3Msg*>(
      &::TCCamp::_Vec3Msg_default_instance_);
}
inline ::TCCamp::Vec3Msg* MonsterSynMsg::release_targetpos() {
  // @@protoc_insertion_point(field_release:TCCamp.MonsterSynMsg.TargetPos)
  
  ::TCCamp::Vec3Msg* temp = targetpos_;
  targetpos_ = NULL;
  return temp;
}
inline ::TCCamp::Vec3Msg* MonsterSynMsg::mutable_targetpos() {
  
  if (targetpos_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Vec3Msg>(GetArenaNoVirtual());
    targetpos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.MonsterSynMsg.TargetPos)
  return targetpos_;
}
inline void MonsterSynMsg::set_allocated_targetpos(::TCCamp::Vec3Msg* targetpos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete targetpos_;
  }
  if (targetpos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      targetpos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, targetpos, submessage_arena);
    }
    
  } else {
    
  }
  targetpos_ = targetpos;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.MonsterSynMsg.TargetPos)
}

// -------------------------------------------------------------------

// MonstersSynMsg

// repeated .TCCamp.MonsterSynMsg MonsterList = 1;
inline int MonstersSynMsg::monsterlist_size() const {
  return monsterlist_.size();
}
inline void MonstersSynMsg::clear_monsterlist() {
  monsterlist_.Clear();
}
inline ::TCCamp::MonsterSynMsg* MonstersSynMsg::mutable_monsterlist(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.MonstersSynMsg.MonsterList)
  return monsterlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::MonsterSynMsg >*
MonstersSynMsg::mutable_monsterlist() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.MonstersSynMsg.MonsterList)
  return &monsterlist_;
}
inline const ::TCCamp::MonsterSynMsg& MonstersSynMsg::monsterlist(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.MonstersSynMsg.MonsterList)
  return monsterlist_.Get(index);
}
inline ::TCCamp::MonsterSynMsg* MonstersSynMsg::add_monsterlist() {
  // @@protoc_insertion_point(field_add:TCCamp.MonstersSynMsg.MonsterList)
  return monsterlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::MonsterSynMsg >&
MonstersSynMsg::monsterlist() const {
  // @@protoc_insertion_point(field_list:TCCamp.MonstersSynMsg.MonsterList)
  return monsterlist_;
}

// int32 Netid = 2;
inline void MonstersSynMsg::clear_netid() {
  netid_ = 0;
}
inline ::google::protobuf::int32 MonstersSynMsg::netid() const {
  // @@protoc_insertion_point(field_get:TCCamp.MonstersSynMsg.Netid)
  return netid_;
}
inline void MonstersSynMsg::set_netid(::google::protobuf::int32 value) {
  
  netid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.MonstersSynMsg.Netid)
}

// -------------------------------------------------------------------

// BulletSynMsg

// int32 Id = 1;
inline void BulletSynMsg::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 BulletSynMsg::id() const {
  // @@protoc_insertion_point(field_get:TCCamp.BulletSynMsg.Id)
  return id_;
}
inline void BulletSynMsg::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.BulletSynMsg.Id)
}

// .TCCamp.Vec3Msg Position = 2;
inline bool BulletSynMsg::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void BulletSynMsg::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::TCCamp::Vec3Msg& BulletSynMsg::_internal_position() const {
  return *position_;
}
inline const ::TCCamp::Vec3Msg& BulletSynMsg::position() const {
  const ::TCCamp::Vec3Msg* p = position_;
  // @@protoc_insertion_point(field_get:TCCamp.BulletSynMsg.Position)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Vec3Msg*>(
      &::TCCamp::_Vec3Msg_default_instance_);
}
inline ::TCCamp::Vec3Msg* BulletSynMsg::release_position() {
  // @@protoc_insertion_point(field_release:TCCamp.BulletSynMsg.Position)
  
  ::TCCamp::Vec3Msg* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::TCCamp::Vec3Msg* BulletSynMsg::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Vec3Msg>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.BulletSynMsg.Position)
  return position_;
}
inline void BulletSynMsg::set_allocated_position(::TCCamp::Vec3Msg* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.BulletSynMsg.Position)
}

// .TCCamp.Vec3Msg Rotation = 3;
inline bool BulletSynMsg::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
inline void BulletSynMsg::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) {
    delete rotation_;
  }
  rotation_ = NULL;
}
inline const ::TCCamp::Vec3Msg& BulletSynMsg::_internal_rotation() const {
  return *rotation_;
}
inline const ::TCCamp::Vec3Msg& BulletSynMsg::rotation() const {
  const ::TCCamp::Vec3Msg* p = rotation_;
  // @@protoc_insertion_point(field_get:TCCamp.BulletSynMsg.Rotation)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Vec3Msg*>(
      &::TCCamp::_Vec3Msg_default_instance_);
}
inline ::TCCamp::Vec3Msg* BulletSynMsg::release_rotation() {
  // @@protoc_insertion_point(field_release:TCCamp.BulletSynMsg.Rotation)
  
  ::TCCamp::Vec3Msg* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline ::TCCamp::Vec3Msg* BulletSynMsg::mutable_rotation() {
  
  if (rotation_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Vec3Msg>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.BulletSynMsg.Rotation)
  return rotation_;
}
inline void BulletSynMsg::set_allocated_rotation(::TCCamp::Vec3Msg* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rotation_;
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.BulletSynMsg.Rotation)
}

// bool IsActive = 4;
inline void BulletSynMsg::clear_isactive() {
  isactive_ = false;
}
inline bool BulletSynMsg::isactive() const {
  // @@protoc_insertion_point(field_get:TCCamp.BulletSynMsg.IsActive)
  return isactive_;
}
inline void BulletSynMsg::set_isactive(bool value) {
  
  isactive_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.BulletSynMsg.IsActive)
}

// -------------------------------------------------------------------

// BulletsSynMsg

// repeated .TCCamp.BulletSynMsg BulletList = 1;
inline int BulletsSynMsg::bulletlist_size() const {
  return bulletlist_.size();
}
inline void BulletsSynMsg::clear_bulletlist() {
  bulletlist_.Clear();
}
inline ::TCCamp::BulletSynMsg* BulletsSynMsg::mutable_bulletlist(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.BulletsSynMsg.BulletList)
  return bulletlist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::BulletSynMsg >*
BulletsSynMsg::mutable_bulletlist() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.BulletsSynMsg.BulletList)
  return &bulletlist_;
}
inline const ::TCCamp::BulletSynMsg& BulletsSynMsg::bulletlist(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.BulletsSynMsg.BulletList)
  return bulletlist_.Get(index);
}
inline ::TCCamp::BulletSynMsg* BulletsSynMsg::add_bulletlist() {
  // @@protoc_insertion_point(field_add:TCCamp.BulletsSynMsg.BulletList)
  return bulletlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::BulletSynMsg >&
BulletsSynMsg::bulletlist() const {
  // @@protoc_insertion_point(field_list:TCCamp.BulletsSynMsg.BulletList)
  return bulletlist_;
}

// -------------------------------------------------------------------

// AttackReq

// int32 Id = 1;
inline void AttackReq::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 AttackReq::id() const {
  // @@protoc_insertion_point(field_get:TCCamp.AttackReq.Id)
  return id_;
}
inline void AttackReq::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.AttackReq.Id)
}

// .TCCamp.Vec3Msg Position = 2;
inline bool AttackReq::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void AttackReq::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::TCCamp::Vec3Msg& AttackReq::_internal_position() const {
  return *position_;
}
inline const ::TCCamp::Vec3Msg& AttackReq::position() const {
  const ::TCCamp::Vec3Msg* p = position_;
  // @@protoc_insertion_point(field_get:TCCamp.AttackReq.Position)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Vec3Msg*>(
      &::TCCamp::_Vec3Msg_default_instance_);
}
inline ::TCCamp::Vec3Msg* AttackReq::release_position() {
  // @@protoc_insertion_point(field_release:TCCamp.AttackReq.Position)
  
  ::TCCamp::Vec3Msg* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::TCCamp::Vec3Msg* AttackReq::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Vec3Msg>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.AttackReq.Position)
  return position_;
}
inline void AttackReq::set_allocated_position(::TCCamp::Vec3Msg* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.AttackReq.Position)
}

// .TCCamp.Vec3Msg Rotation = 3;
inline bool AttackReq::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
inline void AttackReq::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) {
    delete rotation_;
  }
  rotation_ = NULL;
}
inline const ::TCCamp::Vec3Msg& AttackReq::_internal_rotation() const {
  return *rotation_;
}
inline const ::TCCamp::Vec3Msg& AttackReq::rotation() const {
  const ::TCCamp::Vec3Msg* p = rotation_;
  // @@protoc_insertion_point(field_get:TCCamp.AttackReq.Rotation)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Vec3Msg*>(
      &::TCCamp::_Vec3Msg_default_instance_);
}
inline ::TCCamp::Vec3Msg* AttackReq::release_rotation() {
  // @@protoc_insertion_point(field_release:TCCamp.AttackReq.Rotation)
  
  ::TCCamp::Vec3Msg* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline ::TCCamp::Vec3Msg* AttackReq::mutable_rotation() {
  
  if (rotation_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Vec3Msg>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.AttackReq.Rotation)
  return rotation_;
}
inline void AttackReq::set_allocated_rotation(::TCCamp::Vec3Msg* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rotation_;
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.AttackReq.Rotation)
}

// -------------------------------------------------------------------

// RankListMsg

// string Name = 1;
inline void RankListMsg::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RankListMsg::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.RankListMsg.Name)
  return name_.GetNoArena();
}
inline void RankListMsg::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.RankListMsg.Name)
}
#if LANG_CXX11
inline void RankListMsg::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.RankListMsg.Name)
}
#endif
inline void RankListMsg::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.RankListMsg.Name)
}
inline void RankListMsg::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.RankListMsg.Name)
}
inline ::std::string* RankListMsg::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.RankListMsg.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RankListMsg::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.RankListMsg.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RankListMsg::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.RankListMsg.Name)
}

// int32 Score = 2;
inline void RankListMsg::clear_score() {
  score_ = 0;
}
inline ::google::protobuf::int32 RankListMsg::score() const {
  // @@protoc_insertion_point(field_get:TCCamp.RankListMsg.Score)
  return score_;
}
inline void RankListMsg::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.RankListMsg.Score)
}

// int32 Time = 3;
inline void RankListMsg::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 RankListMsg::time() const {
  // @@protoc_insertion_point(field_get:TCCamp.RankListMsg.Time)
  return time_;
}
inline void RankListMsg::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.RankListMsg.Time)
}

// -------------------------------------------------------------------

// RankListReq

// int32 sceneId = 1;
inline void RankListReq::clear_sceneid() {
  sceneid_ = 0;
}
inline ::google::protobuf::int32 RankListReq::sceneid() const {
  // @@protoc_insertion_point(field_get:TCCamp.RankListReq.sceneId)
  return sceneid_;
}
inline void RankListReq::set_sceneid(::google::protobuf::int32 value) {
  
  sceneid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.RankListReq.sceneId)
}

// -------------------------------------------------------------------

// GameTimeRsp

// int32 time = 1;
inline void GameTimeRsp::clear_time() {
  time_ = 0;
}
inline ::google::protobuf::int32 GameTimeRsp::time() const {
  // @@protoc_insertion_point(field_get:TCCamp.GameTimeRsp.time)
  return time_;
}
inline void GameTimeRsp::set_time(::google::protobuf::int32 value) {
  
  time_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GameTimeRsp.time)
}

// -------------------------------------------------------------------

// RankListRsp

// repeated .TCCamp.RankListMsg RankList = 1;
inline int RankListRsp::ranklist_size() const {
  return ranklist_.size();
}
inline void RankListRsp::clear_ranklist() {
  ranklist_.Clear();
}
inline ::TCCamp::RankListMsg* RankListRsp::mutable_ranklist(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.RankListRsp.RankList)
  return ranklist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::RankListMsg >*
RankListRsp::mutable_ranklist() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.RankListRsp.RankList)
  return &ranklist_;
}
inline const ::TCCamp::RankListMsg& RankListRsp::ranklist(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.RankListRsp.RankList)
  return ranklist_.Get(index);
}
inline ::TCCamp::RankListMsg* RankListRsp::add_ranklist() {
  // @@protoc_insertion_point(field_add:TCCamp.RankListRsp.RankList)
  return ranklist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::RankListMsg >&
RankListRsp::ranklist() const {
  // @@protoc_insertion_point(field_list:TCCamp.RankListRsp.RankList)
  return ranklist_;
}

// -------------------------------------------------------------------

// RankListData

// repeated .TCCamp.RankListRsp RankData = 1;
inline int RankListData::rankdata_size() const {
  return rankdata_.size();
}
inline void RankListData::clear_rankdata() {
  rankdata_.Clear();
}
inline ::TCCamp::RankListRsp* RankListData::mutable_rankdata(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.RankListData.RankData)
  return rankdata_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::RankListRsp >*
RankListData::mutable_rankdata() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.RankListData.RankData)
  return &rankdata_;
}
inline const ::TCCamp::RankListRsp& RankListData::rankdata(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.RankListData.RankData)
  return rankdata_.Get(index);
}
inline ::TCCamp::RankListRsp* RankListData::add_rankdata() {
  // @@protoc_insertion_point(field_add:TCCamp.RankListData.RankData)
  return rankdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::RankListRsp >&
RankListData::rankdata() const {
  // @@protoc_insertion_point(field_list:TCCamp.RankListData.RankData)
  return rankdata_;
}

// -------------------------------------------------------------------

// CharacterStatueMsg

// int32 NetId = 1;
inline void CharacterStatueMsg::clear_netid() {
  netid_ = 0;
}
inline ::google::protobuf::int32 CharacterStatueMsg::netid() const {
  // @@protoc_insertion_point(field_get:TCCamp.CharacterStatueMsg.NetId)
  return netid_;
}
inline void CharacterStatueMsg::set_netid(::google::protobuf::int32 value) {
  
  netid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CharacterStatueMsg.NetId)
}

// int32 Hp = 2;
inline void CharacterStatueMsg::clear_hp() {
  hp_ = 0;
}
inline ::google::protobuf::int32 CharacterStatueMsg::hp() const {
  // @@protoc_insertion_point(field_get:TCCamp.CharacterStatueMsg.Hp)
  return hp_;
}
inline void CharacterStatueMsg::set_hp(::google::protobuf::int32 value) {
  
  hp_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CharacterStatueMsg.Hp)
}

// float Speed = 3;
inline void CharacterStatueMsg::clear_speed() {
  speed_ = 0;
}
inline float CharacterStatueMsg::speed() const {
  // @@protoc_insertion_point(field_get:TCCamp.CharacterStatueMsg.Speed)
  return speed_;
}
inline void CharacterStatueMsg::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CharacterStatueMsg.Speed)
}

// float MaxSpeed = 4;
inline void CharacterStatueMsg::clear_maxspeed() {
  maxspeed_ = 0;
}
inline float CharacterStatueMsg::maxspeed() const {
  // @@protoc_insertion_point(field_get:TCCamp.CharacterStatueMsg.MaxSpeed)
  return maxspeed_;
}
inline void CharacterStatueMsg::set_maxspeed(float value) {
  
  maxspeed_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CharacterStatueMsg.MaxSpeed)
}

// .TCCamp.Vec3Msg Position = 5;
inline bool CharacterStatueMsg::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void CharacterStatueMsg::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::TCCamp::Vec3Msg& CharacterStatueMsg::_internal_position() const {
  return *position_;
}
inline const ::TCCamp::Vec3Msg& CharacterStatueMsg::position() const {
  const ::TCCamp::Vec3Msg* p = position_;
  // @@protoc_insertion_point(field_get:TCCamp.CharacterStatueMsg.Position)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Vec3Msg*>(
      &::TCCamp::_Vec3Msg_default_instance_);
}
inline ::TCCamp::Vec3Msg* CharacterStatueMsg::release_position() {
  // @@protoc_insertion_point(field_release:TCCamp.CharacterStatueMsg.Position)
  
  ::TCCamp::Vec3Msg* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::TCCamp::Vec3Msg* CharacterStatueMsg::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Vec3Msg>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.CharacterStatueMsg.Position)
  return position_;
}
inline void CharacterStatueMsg::set_allocated_position(::TCCamp::Vec3Msg* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.CharacterStatueMsg.Position)
}

// .TCCamp.Vec3Msg Rotation = 6;
inline bool CharacterStatueMsg::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
inline void CharacterStatueMsg::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) {
    delete rotation_;
  }
  rotation_ = NULL;
}
inline const ::TCCamp::Vec3Msg& CharacterStatueMsg::_internal_rotation() const {
  return *rotation_;
}
inline const ::TCCamp::Vec3Msg& CharacterStatueMsg::rotation() const {
  const ::TCCamp::Vec3Msg* p = rotation_;
  // @@protoc_insertion_point(field_get:TCCamp.CharacterStatueMsg.Rotation)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Vec3Msg*>(
      &::TCCamp::_Vec3Msg_default_instance_);
}
inline ::TCCamp::Vec3Msg* CharacterStatueMsg::release_rotation() {
  // @@protoc_insertion_point(field_release:TCCamp.CharacterStatueMsg.Rotation)
  
  ::TCCamp::Vec3Msg* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline ::TCCamp::Vec3Msg* CharacterStatueMsg::mutable_rotation() {
  
  if (rotation_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Vec3Msg>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.CharacterStatueMsg.Rotation)
  return rotation_;
}
inline void CharacterStatueMsg::set_allocated_rotation(::TCCamp::Vec3Msg* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rotation_;
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.CharacterStatueMsg.Rotation)
}

// bool IsDeath = 7;
inline void CharacterStatueMsg::clear_isdeath() {
  isdeath_ = false;
}
inline bool CharacterStatueMsg::isdeath() const {
  // @@protoc_insertion_point(field_get:TCCamp.CharacterStatueMsg.IsDeath)
  return isdeath_;
}
inline void CharacterStatueMsg::set_isdeath(bool value) {
  
  isdeath_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CharacterStatueMsg.IsDeath)
}

// bool IsArmed = 8;
inline void CharacterStatueMsg::clear_isarmed() {
  isarmed_ = false;
}
inline bool CharacterStatueMsg::isarmed() const {
  // @@protoc_insertion_point(field_get:TCCamp.CharacterStatueMsg.IsArmed)
  return isarmed_;
}
inline void CharacterStatueMsg::set_isarmed(bool value) {
  
  isarmed_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CharacterStatueMsg.IsArmed)
}

// bool IsImmunity = 9;
inline void CharacterStatueMsg::clear_isimmunity() {
  isimmunity_ = false;
}
inline bool CharacterStatueMsg::isimmunity() const {
  // @@protoc_insertion_point(field_get:TCCamp.CharacterStatueMsg.IsImmunity)
  return isimmunity_;
}
inline void CharacterStatueMsg::set_isimmunity(bool value) {
  
  isimmunity_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CharacterStatueMsg.IsImmunity)
}

// int32 actionType = 10;
inline void CharacterStatueMsg::clear_actiontype() {
  actiontype_ = 0;
}
inline ::google::protobuf::int32 CharacterStatueMsg::actiontype() const {
  // @@protoc_insertion_point(field_get:TCCamp.CharacterStatueMsg.actionType)
  return actiontype_;
}
inline void CharacterStatueMsg::set_actiontype(::google::protobuf::int32 value) {
  
  actiontype_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CharacterStatueMsg.actionType)
}

// int32 score = 11;
inline void CharacterStatueMsg::clear_score() {
  score_ = 0;
}
inline ::google::protobuf::int32 CharacterStatueMsg::score() const {
  // @@protoc_insertion_point(field_get:TCCamp.CharacterStatueMsg.score)
  return score_;
}
inline void CharacterStatueMsg::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CharacterStatueMsg.score)
}

// -------------------------------------------------------------------

// CharacterStatueReq

// int32 NetId = 1;
inline void CharacterStatueReq::clear_netid() {
  netid_ = 0;
}
inline ::google::protobuf::int32 CharacterStatueReq::netid() const {
  // @@protoc_insertion_point(field_get:TCCamp.CharacterStatueReq.NetId)
  return netid_;
}
inline void CharacterStatueReq::set_netid(::google::protobuf::int32 value) {
  
  netid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CharacterStatueReq.NetId)
}

// float Speed = 2;
inline void CharacterStatueReq::clear_speed() {
  speed_ = 0;
}
inline float CharacterStatueReq::speed() const {
  // @@protoc_insertion_point(field_get:TCCamp.CharacterStatueReq.Speed)
  return speed_;
}
inline void CharacterStatueReq::set_speed(float value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CharacterStatueReq.Speed)
}

// .TCCamp.Vec3Msg Position = 3;
inline bool CharacterStatueReq::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline void CharacterStatueReq::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) {
    delete position_;
  }
  position_ = NULL;
}
inline const ::TCCamp::Vec3Msg& CharacterStatueReq::_internal_position() const {
  return *position_;
}
inline const ::TCCamp::Vec3Msg& CharacterStatueReq::position() const {
  const ::TCCamp::Vec3Msg* p = position_;
  // @@protoc_insertion_point(field_get:TCCamp.CharacterStatueReq.Position)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Vec3Msg*>(
      &::TCCamp::_Vec3Msg_default_instance_);
}
inline ::TCCamp::Vec3Msg* CharacterStatueReq::release_position() {
  // @@protoc_insertion_point(field_release:TCCamp.CharacterStatueReq.Position)
  
  ::TCCamp::Vec3Msg* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::TCCamp::Vec3Msg* CharacterStatueReq::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Vec3Msg>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.CharacterStatueReq.Position)
  return position_;
}
inline void CharacterStatueReq::set_allocated_position(::TCCamp::Vec3Msg* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete position_;
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.CharacterStatueReq.Position)
}

// .TCCamp.Vec3Msg Rotation = 4;
inline bool CharacterStatueReq::has_rotation() const {
  return this != internal_default_instance() && rotation_ != NULL;
}
inline void CharacterStatueReq::clear_rotation() {
  if (GetArenaNoVirtual() == NULL && rotation_ != NULL) {
    delete rotation_;
  }
  rotation_ = NULL;
}
inline const ::TCCamp::Vec3Msg& CharacterStatueReq::_internal_rotation() const {
  return *rotation_;
}
inline const ::TCCamp::Vec3Msg& CharacterStatueReq::rotation() const {
  const ::TCCamp::Vec3Msg* p = rotation_;
  // @@protoc_insertion_point(field_get:TCCamp.CharacterStatueReq.Rotation)
  return p != NULL ? *p : *reinterpret_cast<const ::TCCamp::Vec3Msg*>(
      &::TCCamp::_Vec3Msg_default_instance_);
}
inline ::TCCamp::Vec3Msg* CharacterStatueReq::release_rotation() {
  // @@protoc_insertion_point(field_release:TCCamp.CharacterStatueReq.Rotation)
  
  ::TCCamp::Vec3Msg* temp = rotation_;
  rotation_ = NULL;
  return temp;
}
inline ::TCCamp::Vec3Msg* CharacterStatueReq::mutable_rotation() {
  
  if (rotation_ == NULL) {
    auto* p = CreateMaybeMessage<::TCCamp::Vec3Msg>(GetArenaNoVirtual());
    rotation_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TCCamp.CharacterStatueReq.Rotation)
  return rotation_;
}
inline void CharacterStatueReq::set_allocated_rotation(::TCCamp::Vec3Msg* rotation) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rotation_;
  }
  if (rotation) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rotation = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    
  } else {
    
  }
  rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:TCCamp.CharacterStatueReq.Rotation)
}

// -------------------------------------------------------------------

// CharacterAnimSynMsg

// .TCCamp.CharacterAnimType AnimtType = 1;
inline void CharacterAnimSynMsg::clear_animttype() {
  animttype_ = 0;
}
inline ::TCCamp::CharacterAnimType CharacterAnimSynMsg::animttype() const {
  // @@protoc_insertion_point(field_get:TCCamp.CharacterAnimSynMsg.AnimtType)
  return static_cast< ::TCCamp::CharacterAnimType >(animttype_);
}
inline void CharacterAnimSynMsg::set_animttype(::TCCamp::CharacterAnimType value) {
  
  animttype_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CharacterAnimSynMsg.AnimtType)
}

// int32 NetId = 2;
inline void CharacterAnimSynMsg::clear_netid() {
  netid_ = 0;
}
inline ::google::protobuf::int32 CharacterAnimSynMsg::netid() const {
  // @@protoc_insertion_point(field_get:TCCamp.CharacterAnimSynMsg.NetId)
  return netid_;
}
inline void CharacterAnimSynMsg::set_netid(::google::protobuf::int32 value) {
  
  netid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.CharacterAnimSynMsg.NetId)
}

// -------------------------------------------------------------------

// NetAsyncMsg

// repeated .TCCamp.CharacterStatueMsg CharacterStatueList = 1;
inline int NetAsyncMsg::characterstatuelist_size() const {
  return characterstatuelist_.size();
}
inline void NetAsyncMsg::clear_characterstatuelist() {
  characterstatuelist_.Clear();
}
inline ::TCCamp::CharacterStatueMsg* NetAsyncMsg::mutable_characterstatuelist(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.NetAsyncMsg.CharacterStatueList)
  return characterstatuelist_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::CharacterStatueMsg >*
NetAsyncMsg::mutable_characterstatuelist() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.NetAsyncMsg.CharacterStatueList)
  return &characterstatuelist_;
}
inline const ::TCCamp::CharacterStatueMsg& NetAsyncMsg::characterstatuelist(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.NetAsyncMsg.CharacterStatueList)
  return characterstatuelist_.Get(index);
}
inline ::TCCamp::CharacterStatueMsg* NetAsyncMsg::add_characterstatuelist() {
  // @@protoc_insertion_point(field_add:TCCamp.NetAsyncMsg.CharacterStatueList)
  return characterstatuelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::CharacterStatueMsg >&
NetAsyncMsg::characterstatuelist() const {
  // @@protoc_insertion_point(field_list:TCCamp.NetAsyncMsg.CharacterStatueList)
  return characterstatuelist_;
}

// -------------------------------------------------------------------

// RemoveCharacterRsp

// int32 NetId = 1;
inline void RemoveCharacterRsp::clear_netid() {
  netid_ = 0;
}
inline ::google::protobuf::int32 RemoveCharacterRsp::netid() const {
  // @@protoc_insertion_point(field_get:TCCamp.RemoveCharacterRsp.NetId)
  return netid_;
}
inline void RemoveCharacterRsp::set_netid(::google::protobuf::int32 value) {
  
  netid_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.RemoveCharacterRsp.NetId)
}

// -------------------------------------------------------------------

// ScoreRsp

// int32 Score = 1;
inline void ScoreRsp::clear_score() {
  score_ = 0;
}
inline ::google::protobuf::int32 ScoreRsp::score() const {
  // @@protoc_insertion_point(field_get:TCCamp.ScoreRsp.Score)
  return score_;
}
inline void ScoreRsp::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ScoreRsp.Score)
}

// -------------------------------------------------------------------

// GameResultRsp

// int32 Score = 1;
inline void GameResultRsp::clear_score() {
  score_ = 0;
}
inline ::google::protobuf::int32 GameResultRsp::score() const {
  // @@protoc_insertion_point(field_get:TCCamp.GameResultRsp.Score)
  return score_;
}
inline void GameResultRsp::set_score(::google::protobuf::int32 value) {
  
  score_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GameResultRsp.Score)
}

// int32 RoomRank = 2;
inline void GameResultRsp::clear_roomrank() {
  roomrank_ = 0;
}
inline ::google::protobuf::int32 GameResultRsp::roomrank() const {
  // @@protoc_insertion_point(field_get:TCCamp.GameResultRsp.RoomRank)
  return roomrank_;
}
inline void GameResultRsp::set_roomrank(::google::protobuf::int32 value) {
  
  roomrank_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GameResultRsp.RoomRank)
}

// int32 GameTime = 3;
inline void GameResultRsp::clear_gametime() {
  gametime_ = 0;
}
inline ::google::protobuf::int32 GameResultRsp::gametime() const {
  // @@protoc_insertion_point(field_get:TCCamp.GameResultRsp.GameTime)
  return gametime_;
}
inline void GameResultRsp::set_gametime(::google::protobuf::int32 value) {
  
  gametime_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GameResultRsp.GameTime)
}

// bool Success = 4;
inline void GameResultRsp::clear_success() {
  success_ = false;
}
inline bool GameResultRsp::success() const {
  // @@protoc_insertion_point(field_get:TCCamp.GameResultRsp.Success)
  return success_;
}
inline void GameResultRsp::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GameResultRsp.Success)
}

// bool IsFinished = 5;
inline void GameResultRsp::clear_isfinished() {
  isfinished_ = false;
}
inline bool GameResultRsp::isfinished() const {
  // @@protoc_insertion_point(field_get:TCCamp.GameResultRsp.IsFinished)
  return isfinished_;
}
inline void GameResultRsp::set_isfinished(bool value) {
  
  isfinished_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GameResultRsp.IsFinished)
}

// int32 BeatCount = 6;
inline void GameResultRsp::clear_beatcount() {
  beatcount_ = 0;
}
inline ::google::protobuf::int32 GameResultRsp::beatcount() const {
  // @@protoc_insertion_point(field_get:TCCamp.GameResultRsp.BeatCount)
  return beatcount_;
}
inline void GameResultRsp::set_beatcount(::google::protobuf::int32 value) {
  
  beatcount_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GameResultRsp.BeatCount)
}

// -------------------------------------------------------------------

// GameContinueRsp

// bool needContinue = 1;
inline void GameContinueRsp::clear_needcontinue() {
  needcontinue_ = false;
}
inline bool GameContinueRsp::needcontinue() const {
  // @@protoc_insertion_point(field_get:TCCamp.GameContinueRsp.needContinue)
  return needcontinue_;
}
inline void GameContinueRsp::set_needcontinue(bool value) {
  
  needcontinue_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.GameContinueRsp.needContinue)
}

// -------------------------------------------------------------------

// ItemConfig

// int32 Id = 1;
inline void ItemConfig::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ItemConfig::id() const {
  // @@protoc_insertion_point(field_get:TCCamp.ItemConfig.Id)
  return id_;
}
inline void ItemConfig::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ItemConfig.Id)
}

// string Name = 2;
inline void ItemConfig::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemConfig::name() const {
  // @@protoc_insertion_point(field_get:TCCamp.ItemConfig.Name)
  return name_.GetNoArena();
}
inline void ItemConfig::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.ItemConfig.Name)
}
#if LANG_CXX11
inline void ItemConfig::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.ItemConfig.Name)
}
#endif
inline void ItemConfig::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.ItemConfig.Name)
}
inline void ItemConfig::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.ItemConfig.Name)
}
inline ::std::string* ItemConfig::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.ItemConfig.Name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemConfig::release_name() {
  // @@protoc_insertion_point(field_release:TCCamp.ItemConfig.Name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemConfig::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.ItemConfig.Name)
}

// string Introduce = 3;
inline void ItemConfig::clear_introduce() {
  introduce_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemConfig::introduce() const {
  // @@protoc_insertion_point(field_get:TCCamp.ItemConfig.Introduce)
  return introduce_.GetNoArena();
}
inline void ItemConfig::set_introduce(const ::std::string& value) {
  
  introduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.ItemConfig.Introduce)
}
#if LANG_CXX11
inline void ItemConfig::set_introduce(::std::string&& value) {
  
  introduce_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.ItemConfig.Introduce)
}
#endif
inline void ItemConfig::set_introduce(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  introduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.ItemConfig.Introduce)
}
inline void ItemConfig::set_introduce(const char* value, size_t size) {
  
  introduce_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.ItemConfig.Introduce)
}
inline ::std::string* ItemConfig::mutable_introduce() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.ItemConfig.Introduce)
  return introduce_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemConfig::release_introduce() {
  // @@protoc_insertion_point(field_release:TCCamp.ItemConfig.Introduce)
  
  return introduce_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemConfig::set_allocated_introduce(::std::string* introduce) {
  if (introduce != NULL) {
    
  } else {
    
  }
  introduce_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), introduce);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.ItemConfig.Introduce)
}

// int32 Price = 4;
inline void ItemConfig::clear_price() {
  price_ = 0;
}
inline ::google::protobuf::int32 ItemConfig::price() const {
  // @@protoc_insertion_point(field_get:TCCamp.ItemConfig.Price)
  return price_;
}
inline void ItemConfig::set_price(::google::protobuf::int32 value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ItemConfig.Price)
}

// string IconName = 5;
inline void ItemConfig::clear_iconname() {
  iconname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ItemConfig::iconname() const {
  // @@protoc_insertion_point(field_get:TCCamp.ItemConfig.IconName)
  return iconname_.GetNoArena();
}
inline void ItemConfig::set_iconname(const ::std::string& value) {
  
  iconname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.ItemConfig.IconName)
}
#if LANG_CXX11
inline void ItemConfig::set_iconname(::std::string&& value) {
  
  iconname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.ItemConfig.IconName)
}
#endif
inline void ItemConfig::set_iconname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  iconname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.ItemConfig.IconName)
}
inline void ItemConfig::set_iconname(const char* value, size_t size) {
  
  iconname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.ItemConfig.IconName)
}
inline ::std::string* ItemConfig::mutable_iconname() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.ItemConfig.IconName)
  return iconname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ItemConfig::release_iconname() {
  // @@protoc_insertion_point(field_release:TCCamp.ItemConfig.IconName)
  
  return iconname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ItemConfig::set_allocated_iconname(::std::string* iconname) {
  if (iconname != NULL) {
    
  } else {
    
  }
  iconname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iconname);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.ItemConfig.IconName)
}

// -------------------------------------------------------------------

// ItemConfigs

// repeated .TCCamp.ItemConfig Item = 1;
inline int ItemConfigs::item_size() const {
  return item_.size();
}
inline void ItemConfigs::clear_item() {
  item_.Clear();
}
inline ::TCCamp::ItemConfig* ItemConfigs::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.ItemConfigs.Item)
  return item_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::ItemConfig >*
ItemConfigs::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.ItemConfigs.Item)
  return &item_;
}
inline const ::TCCamp::ItemConfig& ItemConfigs::item(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.ItemConfigs.Item)
  return item_.Get(index);
}
inline ::TCCamp::ItemConfig* ItemConfigs::add_item() {
  // @@protoc_insertion_point(field_add:TCCamp.ItemConfigs.Item)
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::ItemConfig >&
ItemConfigs::item() const {
  // @@protoc_insertion_point(field_list:TCCamp.ItemConfigs.Item)
  return item_;
}

// -------------------------------------------------------------------

// ItemInfo

// int32 Id = 1;
inline void ItemInfo::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 ItemInfo::id() const {
  // @@protoc_insertion_point(field_get:TCCamp.ItemInfo.Id)
  return id_;
}
inline void ItemInfo::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ItemInfo.Id)
}

// int32 Num = 2;
inline void ItemInfo::clear_num() {
  num_ = 0;
}
inline ::google::protobuf::int32 ItemInfo::num() const {
  // @@protoc_insertion_point(field_get:TCCamp.ItemInfo.Num)
  return num_;
}
inline void ItemInfo::set_num(::google::protobuf::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.ItemInfo.Num)
}

// -------------------------------------------------------------------

// ShopItemRsp

// repeated .TCCamp.ItemInfo Item = 1;
inline int ShopItemRsp::item_size() const {
  return item_.size();
}
inline void ShopItemRsp::clear_item() {
  item_.Clear();
}
inline ::TCCamp::ItemInfo* ShopItemRsp::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.ShopItemRsp.Item)
  return item_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::ItemInfo >*
ShopItemRsp::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.ShopItemRsp.Item)
  return &item_;
}
inline const ::TCCamp::ItemInfo& ShopItemRsp::item(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.ShopItemRsp.Item)
  return item_.Get(index);
}
inline ::TCCamp::ItemInfo* ShopItemRsp::add_item() {
  // @@protoc_insertion_point(field_add:TCCamp.ShopItemRsp.Item)
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::ItemInfo >&
ShopItemRsp::item() const {
  // @@protoc_insertion_point(field_list:TCCamp.ShopItemRsp.Item)
  return item_;
}

// -------------------------------------------------------------------

// BagItemRsp

// int32 Money = 1;
inline void BagItemRsp::clear_money() {
  money_ = 0;
}
inline ::google::protobuf::int32 BagItemRsp::money() const {
  // @@protoc_insertion_point(field_get:TCCamp.BagItemRsp.Money)
  return money_;
}
inline void BagItemRsp::set_money(::google::protobuf::int32 value) {
  
  money_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.BagItemRsp.Money)
}

// repeated .TCCamp.ItemInfo Item = 2;
inline int BagItemRsp::item_size() const {
  return item_.size();
}
inline void BagItemRsp::clear_item() {
  item_.Clear();
}
inline ::TCCamp::ItemInfo* BagItemRsp::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:TCCamp.BagItemRsp.Item)
  return item_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TCCamp::ItemInfo >*
BagItemRsp::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:TCCamp.BagItemRsp.Item)
  return &item_;
}
inline const ::TCCamp::ItemInfo& BagItemRsp::item(int index) const {
  // @@protoc_insertion_point(field_get:TCCamp.BagItemRsp.Item)
  return item_.Get(index);
}
inline ::TCCamp::ItemInfo* BagItemRsp::add_item() {
  // @@protoc_insertion_point(field_add:TCCamp.BagItemRsp.Item)
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TCCamp::ItemInfo >&
BagItemRsp::item() const {
  // @@protoc_insertion_point(field_list:TCCamp.BagItemRsp.Item)
  return item_;
}

// -------------------------------------------------------------------

// BuyReq

// int32 Id = 1;
inline void BuyReq::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 BuyReq::id() const {
  // @@protoc_insertion_point(field_get:TCCamp.BuyReq.Id)
  return id_;
}
inline void BuyReq::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.BuyReq.Id)
}

// int32 Num = 2;
inline void BuyReq::clear_num() {
  num_ = 0;
}
inline ::google::protobuf::int32 BuyReq::num() const {
  // @@protoc_insertion_point(field_get:TCCamp.BuyReq.Num)
  return num_;
}
inline void BuyReq::set_num(::google::protobuf::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.BuyReq.Num)
}

// -------------------------------------------------------------------

// DeleteItemReq

// int32 Id = 1;
inline void DeleteItemReq::clear_id() {
  id_ = 0;
}
inline ::google::protobuf::int32 DeleteItemReq::id() const {
  // @@protoc_insertion_point(field_get:TCCamp.DeleteItemReq.Id)
  return id_;
}
inline void DeleteItemReq::set_id(::google::protobuf::int32 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.DeleteItemReq.Id)
}

// int32 Num = 2;
inline void DeleteItemReq::clear_num() {
  num_ = 0;
}
inline ::google::protobuf::int32 DeleteItemReq::num() const {
  // @@protoc_insertion_point(field_get:TCCamp.DeleteItemReq.Num)
  return num_;
}
inline void DeleteItemReq::set_num(::google::protobuf::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.DeleteItemReq.Num)
}

// -------------------------------------------------------------------

// AddMoneyReq

// int32 Num = 1;
inline void AddMoneyReq::clear_num() {
  num_ = 0;
}
inline ::google::protobuf::int32 AddMoneyReq::num() const {
  // @@protoc_insertion_point(field_get:TCCamp.AddMoneyReq.Num)
  return num_;
}
inline void AddMoneyReq::set_num(::google::protobuf::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.AddMoneyReq.Num)
}

// -------------------------------------------------------------------

// MoneyRsp

// .TCCamp.StatueCode Code = 1;
inline void MoneyRsp::clear_code() {
  code_ = 0;
}
inline ::TCCamp::StatueCode MoneyRsp::code() const {
  // @@protoc_insertion_point(field_get:TCCamp.MoneyRsp.Code)
  return static_cast< ::TCCamp::StatueCode >(code_);
}
inline void MoneyRsp::set_code(::TCCamp::StatueCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.MoneyRsp.Code)
}

// int32 Num = 2;
inline void MoneyRsp::clear_num() {
  num_ = 0;
}
inline ::google::protobuf::int32 MoneyRsp::num() const {
  // @@protoc_insertion_point(field_get:TCCamp.MoneyRsp.Num)
  return num_;
}
inline void MoneyRsp::set_num(::google::protobuf::int32 value) {
  
  num_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.MoneyRsp.Num)
}

// -------------------------------------------------------------------

// StatueCodeRsp

// .TCCamp.StatueCode Code = 1;
inline void StatueCodeRsp::clear_code() {
  code_ = 0;
}
inline ::TCCamp::StatueCode StatueCodeRsp::code() const {
  // @@protoc_insertion_point(field_get:TCCamp.StatueCodeRsp.Code)
  return static_cast< ::TCCamp::StatueCode >(code_);
}
inline void StatueCodeRsp::set_code(::TCCamp::StatueCode value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:TCCamp.StatueCodeRsp.Code)
}

// string Reason = 2;
inline void StatueCodeRsp::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatueCodeRsp::reason() const {
  // @@protoc_insertion_point(field_get:TCCamp.StatueCodeRsp.Reason)
  return reason_.GetNoArena();
}
inline void StatueCodeRsp::set_reason(const ::std::string& value) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:TCCamp.StatueCodeRsp.Reason)
}
#if LANG_CXX11
inline void StatueCodeRsp::set_reason(::std::string&& value) {
  
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:TCCamp.StatueCodeRsp.Reason)
}
#endif
inline void StatueCodeRsp::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:TCCamp.StatueCodeRsp.Reason)
}
inline void StatueCodeRsp::set_reason(const char* value, size_t size) {
  
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:TCCamp.StatueCodeRsp.Reason)
}
inline ::std::string* StatueCodeRsp::mutable_reason() {
  
  // @@protoc_insertion_point(field_mutable:TCCamp.StatueCodeRsp.Reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatueCodeRsp::release_reason() {
  // @@protoc_insertion_point(field_release:TCCamp.StatueCodeRsp.Reason)
  
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatueCodeRsp::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    
  } else {
    
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:TCCamp.StatueCodeRsp.Reason)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace TCCamp

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::TCCamp::CLIENT_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::CLIENT_CMD>() {
  return ::TCCamp::CLIENT_CMD_descriptor();
}
template <> struct is_proto_enum< ::TCCamp::SERVER_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::SERVER_CMD>() {
  return ::TCCamp::SERVER_CMD_descriptor();
}
template <> struct is_proto_enum< ::TCCamp::RPC_CMD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::RPC_CMD>() {
  return ::TCCamp::RPC_CMD_descriptor();
}
template <> struct is_proto_enum< ::TCCamp::SceneObjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::SceneObjectType>() {
  return ::TCCamp::SceneObjectType_descriptor();
}
template <> struct is_proto_enum< ::TCCamp::CharacterAnimType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::CharacterAnimType>() {
  return ::TCCamp::CharacterAnimType_descriptor();
}
template <> struct is_proto_enum< ::TCCamp::StatueCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TCCamp::StatueCode>() {
  return ::TCCamp::StatueCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_player_2eproto
