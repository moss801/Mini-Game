// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: player.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace TCCamp {

  /// <summary>Holder for reflection information generated from player.proto</summary>
  public static partial class PlayerReflection {

    #region Descriptor
    /// <summary>File descriptor for player.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxwbGF5ZXIucHJvdG8SBlRDQ2FtcCJ4CgxDb2xsaXNpb25SZXESJgoFdHlw",
            "ZUEYASABKA4yFy5UQ0NhbXAuU2NlbmVPYmplY3RUeXBlEgsKA2lkQRgCIAEo",
            "BRImCgV0eXBlQhgDIAEoDjIXLlRDQ2FtcC5TY2VuZU9iamVjdFR5cGUSCwoD",
            "aWRCGAQgASgFIjIKA1JQQxIcCgNjbWQYASABKA4yDy5UQ0NhbXAuUlBDX0NN",
            "RBINCgVwYXJhbRgCIAMoBSI0Cg5QbGF5ZXJMb2dpblJlcRIQCghQbGF5ZXJJ",
            "RBgBIAEoCRIQCghQYXNzd29yZBgCIAEoCSJcCg5QbGF5ZXJMb2dpblJzcBIO",
            "CgZSZXN1bHQYASABKAUSDgoGUmVhc29uGAIgASgJEioKClBsYXllckRhdGEY",
            "AyABKAsyFi5UQ0NhbXAuUGxheWVyU3luY0RhdGEiQgoOUGxheWVyU2F2ZURh",
            "dGESEAoIUGxheWVySUQYASABKAkSEAoIUGFzc3dvcmQYAiABKAkSDAoETmFt",
            "ZRgDIAEoDCIwCg5QbGF5ZXJTeW5jRGF0YRIMCgROYW1lGAEgASgJEhAKCFBs",
            "YXllcmlkGAIgASgJIj8KC1Jvb21JbmZvTXNnEhAKCHJvb21OYW1lGAEgASgJ",
            "Eg4KBnJvb21JZBgCIAEoBRIOCgZtYXhOdW0YAyABKAUiHgoLUm9vbUluZm9S",
            "ZXESDwoHc2NlbmVJZBgBIAEoBSI4CgtSb29tSW5mb1JzcBIpCgxSb29tSW5m",
            "b0xpc3QYASADKAsyEy5UQ0NhbXAuUm9vbUluZm9Nc2ciIwoNUm9vbU51bUNo",
            "YW5nZRISCgpjdXJyZW50TnVtGAEgASgFIh4KDEVudGVyUm9vbVJlcRIOCgZy",
            "b29tSWQYASABKAUiVgoMRW50ZXJSb29tUnNwEg8KB3Jlc0NvZGUYASABKAUS",
            "DgoGcmVzU3RyGAIgASgJEiUKCHJvb21JbmZvGAMgASgLMhMuVENDYW1wLlJv",
            "b21JbmZvTXNnIkIKDUNyZWF0ZVJvb21SZXESEAoIcm9vbU5hbWUYASABKAkS",
            "DwoHc2NlbmVJZBgCIAEoBRIOCgZtYXhOdW0YAyABKAUiQwoPUGxheWVyQ3Jl",
            "YXRlUmVxEhAKCFBsYXllcklEGAEgASgJEhAKCFBhc3N3b3JkGAIgASgJEgwK",
            "BE5hbWUYAyABKAwiUQoPUGxheWVyQ3JlYXRlUnNwEg4KBlJlc3VsdBgBIAEo",
            "BRIQCghQbGF5ZXJJRBgCIAEoCRIMCgROYW1lGAMgASgJEg4KBlJlYXNvbhgE",
            "IAEoCSIgCgxTeW5jQW5ub3VuY2USEAoIQW5ub3VuY2UYASABKAwiOgoNU2Nl",
            "bmVCcmllZlJzcBIpCgpTY2VuZUJyaWVmGAEgAygLMhUuVENDYW1wLlNjZW5l",
            "QnJpZWZNc2cicQoNU2NlbmVCcmllZk1zZxIRCglTY2VuZU5hbWUYASABKAkS",
            "DwoHU2NlbmVJZBgCIAEoBRIVCg1HYXJnb3lsZUNvdW50GAMgASgFEhIKCkdo",
            "b3N0Q291bnQYBCABKAUSEQoJRGlmZmljdWx0GAUgASgFIokBCg5TY2VuZU9i",
            "amVjdE1zZxIKCgJJZBgBIAEoBRIlCgRUeXBlGAIgASgOMhcuVENDYW1wLlNj",
            "ZW5lT2JqZWN0VHlwZRIhCghQb3NpdGlvbhgDIAEoCzIPLlRDQ2FtcC5WZWMz",
            "TXNnEiEKCFJvdGF0aW9uGAQgASgLMg8uVENDYW1wLlZlYzNNc2ciTQoPU2Nl",
            "bmVNb25zdGVyUnNwEisKC01vbnN0ZXJMaXN0GAEgAygLMhYuVENDYW1wLlNj",
            "ZW5lT2JqZWN0TXNnEg0KBU5ldElkGAIgASgFIjwKDlNjZW5lT2JqZWN0UnNw",
            "EioKCk9iamVjdExpc3QYASADKAsyFi5UQ0NhbXAuU2NlbmVPYmplY3RNc2ci",
            "KgoHVmVjM01zZxIJCgF4GAEgASgCEgkKAXkYAiABKAISCQoBehgDIAEoAiKt",
            "AQoTTW9uc3RlckF0dHJpYnV0ZU1zZxIlCgRUeXBlGAEgASgOMhcuVENDYW1w",
            "LlNjZW5lT2JqZWN0VHlwZRIMCgRuYW1lGAIgASgJEg4KBkF0dGFjaxgDIAEo",
            "BRIKCgJIcBgEIAEoBRINCgVTcGVlZBgFIAEoAhINCgVWYWx1ZRgGIAEoBRIS",
            "CgpSZWJvcm5UaW1lGAcgASgCEhMKC0RldGVjdFJhbmdlGAggASgCIkkKE01v",
            "bnN0ZXJBdHRyaWJ1dGVSc3ASMgoNQXR0cmlidXRlTGlzdBgBIAMoCzIbLlRD",
            "Q2FtcC5Nb25zdGVyQXR0cmlidXRlTXNnIpEBCg1Nb25zdGVyU3luTXNnEgoK",
            "AklkGAEgASgFEgoKAkhwGAIgASgFEiEKCFBvc2l0aW9uGAMgASgLMg8uVEND",
            "YW1wLlZlYzNNc2cSIQoIUm90YXRpb24YBCABKAsyDy5UQ0NhbXAuVmVjM01z",
            "ZxIiCglUYXJnZXRQb3MYBSABKAsyDy5UQ0NhbXAuVmVjM01zZyJLCg5Nb25z",
            "dGVyc1N5bk1zZxIqCgtNb25zdGVyTGlzdBgBIAMoCzIVLlRDQ2FtcC5Nb25z",
            "dGVyU3luTXNnEg0KBU5ldGlkGAIgASgFInIKDEJ1bGxldFN5bk1zZxIKCgJJ",
            "ZBgBIAEoBRIhCghQb3NpdGlvbhgCIAEoCzIPLlRDQ2FtcC5WZWMzTXNnEiEK",
            "CFJvdGF0aW9uGAMgASgLMg8uVENDYW1wLlZlYzNNc2cSEAoISXNBY3RpdmUY",
            "BCABKAgiOQoNQnVsbGV0c1N5bk1zZxIoCgpCdWxsZXRMaXN0GAEgAygLMhQu",
            "VENDYW1wLkJ1bGxldFN5bk1zZyJdCglBdHRhY2tSZXESCgoCSWQYASABKAUS",
            "IQoIUG9zaXRpb24YAiABKAsyDy5UQ0NhbXAuVmVjM01zZxIhCghSb3RhdGlv",
            "bhgDIAEoCzIPLlRDQ2FtcC5WZWMzTXNnIjgKC1JhbmtMaXN0TXNnEgwKBE5h",
            "bWUYASABKAkSDQoFU2NvcmUYAiABKAUSDAoEVGltZRgDIAEoBSIeCgtSYW5r",
            "TGlzdFJlcRIPCgdzY2VuZUlkGAEgASgFIhsKC0dhbWVUaW1lUnNwEgwKBHRp",
            "bWUYASABKAUiNAoLUmFua0xpc3RSc3ASJQoIUmFua0xpc3QYASADKAsyEy5U",
            "Q0NhbXAuUmFua0xpc3RNc2ciNQoMUmFua0xpc3REYXRhEiUKCFJhbmtEYXRh",
            "GAEgAygLMhMuVENDYW1wLlJhbmtMaXN0UnNwIu8BChJDaGFyYWN0ZXJTdGF0",
            "dWVNc2cSDQoFTmV0SWQYASABKAUSCgoCSHAYAiABKAUSDQoFU3BlZWQYAyAB",
            "KAISEAoITWF4U3BlZWQYBCABKAISIQoIUG9zaXRpb24YBSABKAsyDy5UQ0Nh",
            "bXAuVmVjM01zZxIhCghSb3RhdGlvbhgGIAEoCzIPLlRDQ2FtcC5WZWMzTXNn",
            "Eg8KB0lzRGVhdGgYByABKAgSDwoHSXNBcm1lZBgIIAEoCBISCgpJc0ltbXVu",
            "aXR5GAkgASgIEhIKCmFjdGlvblR5cGUYCiABKAUSDQoFc2NvcmUYCyABKAUi",
            "eAoSQ2hhcmFjdGVyU3RhdHVlUmVxEg0KBU5ldElkGAEgASgFEg0KBVNwZWVk",
            "GAIgASgCEiEKCFBvc2l0aW9uGAMgASgLMg8uVENDYW1wLlZlYzNNc2cSIQoI",
            "Um90YXRpb24YBCABKAsyDy5UQ0NhbXAuVmVjM01zZyJSChNDaGFyYWN0ZXJB",
            "bmltU3luTXNnEiwKCUFuaW10VHlwZRgBIAEoDjIZLlRDQ2FtcC5DaGFyYWN0",
            "ZXJBbmltVHlwZRINCgVOZXRJZBgCIAEoBSJGCgtOZXRBc3luY01zZxI3ChND",
            "aGFyYWN0ZXJTdGF0dWVMaXN0GAEgAygLMhouVENDYW1wLkNoYXJhY3RlclN0",
            "YXR1ZU1zZyIjChJSZW1vdmVDaGFyYWN0ZXJSc3ASDQoFTmV0SWQYASABKAUi",
            "GQoIU2NvcmVSc3ASDQoFU2NvcmUYASABKAUiegoNR2FtZVJlc3VsdFJzcBIN",
            "CgVTY29yZRgBIAEoBRIQCghSb29tUmFuaxgCIAEoBRIQCghHYW1lVGltZRgD",
            "IAEoBRIPCgdTdWNjZXNzGAQgASgIEhIKCklzRmluaXNoZWQYBSABKAgSEQoJ",
            "QmVhdENvdW50GAYgASgFIicKD0dhbWVDb250aW51ZVJzcBIUCgxuZWVkQ29u",
            "dGludWUYASABKAgiWgoKSXRlbUNvbmZpZxIKCgJJZBgBIAEoBRIMCgROYW1l",
            "GAIgASgJEhEKCUludHJvZHVjZRgDIAEoCRINCgVQcmljZRgEIAEoBRIQCghJ",
            "Y29uTmFtZRgFIAEoCSIvCgtJdGVtQ29uZmlncxIgCgRJdGVtGAEgAygLMhIu",
            "VENDYW1wLkl0ZW1Db25maWciIwoISXRlbUluZm8SCgoCSWQYASABKAUSCwoD",
            "TnVtGAIgASgFIi0KC1Nob3BJdGVtUnNwEh4KBEl0ZW0YASADKAsyEC5UQ0Nh",
            "bXAuSXRlbUluZm8iOwoKQmFnSXRlbVJzcBINCgVNb25leRgBIAEoBRIeCgRJ",
            "dGVtGAIgAygLMhAuVENDYW1wLkl0ZW1JbmZvIiEKBkJ1eVJlcRIKCgJJZBgB",
            "IAEoBRILCgNOdW0YAiABKAUiKAoNRGVsZXRlSXRlbVJlcRIKCgJJZBgBIAEo",
            "BRILCgNOdW0YAiABKAUiGgoLQWRkTW9uZXlSZXESCwoDTnVtGAEgASgFIjkK",
            "CE1vbmV5UnNwEiAKBENvZGUYASABKA4yEi5UQ0NhbXAuU3RhdHVlQ29kZRIL",
            "CgNOdW0YAiABKAUiQQoNU3RhdHVlQ29kZVJzcBIgCgRDb2RlGAEgASgOMhIu",
            "VENDYW1wLlN0YXR1ZUNvZGUSDgoGUmVhc29uGAIgASgJKpMICgpDTElFTlRf",
            "Q01EEhYKEkNMSUVOVF9DTURfSU5WQUxJRBAAEhYKEENMSUVOVF9DTURfQkVH",
            "SU4QsOoBEhEKC0NMSUVOVF9QSU5HELHqARIUCg5DTElFTlRfQUREX1JFURCz",
            "6gESFgoQQ0xJRU5UX0xPR0lOX1JFURC06gESFwoRQ0xJRU5UX0xPR09VVF9S",
            "RVEQteoBEhcKEUNMSUVOVF9DUkVBVEVfUkVRELbqARIZChNDTElFTlRfQU5O",
            "T1VOQ0VfUkVRELfqARIdChdDTElFTlRfQ0hBUkFDVEVSQUREX1JFURC+6gES",
            "HQoXQ0xJRU5UX1VQREFURVNUQVRVRV9SRVEQv+oBEiAKGkNMSUVOVF9DSEFS",
            "QUNURVJSRU1PVkVfUkVREMDqARIbChVDTElFTlRfU0NFTkVCUklFRl9SRVEQ",
            "yOoBEiEKG0NMSUVOVF9NT05TVEVSQVRUUklCVVRFX1JFURDJ6gESHAoWQ0xJ",
            "RU5UX1NDRU5FREVUQUlMX1JFURDK6gESGQoTQ0xJRU5UX1NDRU5FU1lOX1JF",
            "URDL6gESFwoRQ0xJRU5UX0FUVEFDS19SRVEQzOoBEhoKFENMSUVOVF9CVUxM",
            "RVRTWU5fUkVREM3qARIZChNDTElFTlRfUkFOS0xJU1RfUkVREM7qARIWChBD",
            "TElFTlRfU1RBUlRfUkVREM/qARIUCg5DTElFTlRfRU5EX1JFURDQ6gESFAoO",
            "Q0xJRU5UX1JQQ19SRVEQ0eoBEhUKD0NMSUVOVF9ST09NX1JFURDS6gESGgoU",
            "Q0xJRU5UX0VOVEVSUk9PTV9SRVEQ0+oBEhsKFUNMSUVOVF9DUkVBVEVST09N",
            "X1JFURDU6gESGQoTQ0xJRU5UX0VYSVRST09NX1JFURDV6gESHwoZQ0xJRU5U",
            "X0NPTExJU0lPTkNIRUNLX1JFURDW6gESGwoVQ0xJRU5UX01PTlNURVJTWU5f",
            "UkVRENfqARIZChNDTElFTlRfR0FNRVRJTUVfUkVRENjqARIaChRDTElFTlRf",
            "R0FNRVNDT1JFX1JFURDZ6gESHQoXQ0xJRU5UX0dBTUVDT05USU5VRV9SRVEQ",
            "2uoBEhgKEkNMSUVOVF9CVVlJVEVNX1JFURDi6gESGwoVQ0xJRU5UX0RFTEVU",
            "RUlURU1fUkVREOPqARIdChdDTElFTlRfR0VUU0hPUElURU1TX1JFURDk6gES",
            "HAoWQ0xJRU5UX0dFVEJBR0lURU1TX1JFURDl6gESGQoTQ0xJRU5UX0dFVE1P",
            "TkVZX1JFURDm6gESGQoTQ0xJRU5UX0FERE1PTkVZX1JFURDn6gESGwoVQ0xJ",
            "RU5UX0lURU1DT05GSUdfUkVREOjqARIUCg5DTElFTlRfQ01EX0VORBDogQIq",
            "/gcKClNFUlZFUl9DTUQSFgoSU0VSVkVSX0NNRF9JTlZBTElEEAASFQoQU0VS",
            "VkVSX0NNRF9CRUdJThDoBxIQCgtTRVJWRVJfUE9ORxDpBxITCg5TRVJWRVJf",
            "QUREX1JTUBDrBxIVChBTRVJWRVJfTE9HSU5fUlNQEOwHEhYKEVNFUlZFUl9D",
            "UkVBVEVfUlNQEO0HEhgKE1NFUlZFUl9BTk5PVU5DRV9SU1AQ7gcSHAoXU0VS",
            "VkVSX0NIQVJBQ1RFUkFERF9SU1AQ9gcSJQogU0VSVkVSX0JST0FEQ0FTVF9D",
            "SEFSQUNURVJTVEFUVUUQ9wcSHwoaU0VSVkVSX0NIQVJBQ1RFUlJFTU9WRV9S",
            "U1AQ+AcSIAobU0VSVkVSX0NIQVJBQ1RFUkFOSU1TWU5fUlNQEPkHEhoKFVNF",
            "UlZFUl9TQ0VORUJSSUVGX1JTUBCACBIgChtTRVJWRVJfTU9OU1RFUkFUVFJJ",
            "QlVURV9SU1AQgQgSFgoRU0VSVkVSX0FUVEFDS19SU1AQgwgSGAoTU0VSVkVS",
            "X1JBTktMSVNUX1JTUBCECBIVChBTRVJWRVJfU1RBUlRfUlNQEIUIEhMKDlNF",
            "UlZFUl9FTkRfUlNQEIYIEhMKDlNFUlZFUl9SUENfTVNHEIcIEhQKD1NFUlZF",
            "Ul9ST09NX1JTUBCICBIZChRTRVJWRVJfRU5URVJST09NX1JTUBCJCBIZChRT",
            "RVJWRVJfUk9PTVJFQURZX1JTUBCKCBIdChhTRVJWRVJfUk9PTU5VTUNIQU5H",
            "RV9SU1AQiwgSHAoXU0VSVkVSX1NDRU5FTU9OU1RFUl9SU1AQjAgSGwoWU0VS",
            "VkVSX1NDRU5FT0JKRUNUX1JTUBCNCBIaChVTRVJWRVJfTU9OU1RFUlNZTl9S",
            "U1AQjggSGQoUU0VSVkVSX0JVTExFVFNZTl9SU1AQjwgSGAoTU0VSVkVSX0dB",
            "TUVUSU1FX1JTUBCQCBIZChRTRVJWRVJfR0FNRVNDT1JFX1JTUBCRCBIcChdT",
            "RVJWRVJfR0FNRUNPTlRJTlVFX1JTUBCSCBIXChJTRVJWRVJfQlVZSVRFTV9S",
            "U1AQmggSGgoVU0VSVkVSX0RFTEVURUlURU1fUlNQEJsIEhwKF1NFUlZFUl9H",
            "RVRTSE9QSVRFTVNfUlNQEJwIEhsKFlNFUlZFUl9HRVRCQUdJVEVNU19SU1AQ",
            "nQgSGAoTU0VSVkVSX0dFVE1PTkVZX1JTUBCeCBIYChNTRVJWRVJfQURETU9O",
            "RVlfUlNQEJ8IEhoKFVNFUlZFUl9JVEVNQ09ORklHX1JTUBCgCBITCg5HTV9P",
            "UEVSQVRFX1JTUBDMCBITCg5TRVJWRVJfQ01EX0VORBCQTirmAQoHUlBDX0NN",
            "RBINCglSUENfQkVHSU4QABIWChJUUkFQX1NUQVRVRV9FTkFCTEUQARIXChNU",
            "UkFQX1NUQVRVRV9ESVNBQkxFEAISEwoPQk9YX1NUQVRVRV9PUEVOEAMSEwoP",
            "TElHSFRfU1RBVFVFX09OEAQSFAoQTElHSFRfU1RBVFVFX09GRhAFEhQKEERP",
            "T1JfU1RBVFVFX09QRU4QBhIVChFET09SX1NUQVRVRV9DTE9TRRAHEg8KC1RJ",
            "TUVfVVBEQVRFEAgSEAoMVEhST1dfV0VBUE9OEAkSCwoHUlBDX0VORBAUKpYB",
            "Cg9TY2VuZU9iamVjdFR5cGUSDwoLT0JKRUNUX05PTkUQABIKCgZQTEFZRVIQ",
            "ARIKCgZCVUxMRVQQAhIJCgVHSE9TVBADEgwKCEdBUkdPWUxFEAQSCAoERE9P",
            "UhAFEgkKBUxJR0hUEAYSBwoDQk9YEAcSCQoFU0xJTUUQCBIICgRUUkFQEAkS",
            "DgoKRklOSVNITElORRAKKoUBChFDaGFyYWN0ZXJBbmltVHlwZRINCglBTklN",
            "X05PTkUQABIMCghPUEVORE9PUhABEg0KCUNMT1NFRE9PUhACEg8KC1RVUk5P",
            "TkxJR0hUEAMSEAoMVFVSTk9GRkxJR0hUEAQSCwoHT1BFTkJPWBAFEgoKBkFU",
            "VEFDSxAGEggKBEhVUlQQByqDAgoKU3RhdHVlQ29kZRIXChNTVEFUVUVfQ09E",
            "RV9JTlZBTElEEAASFwoRU1RBVFVFX0NPREVfQkVHSU4Q0IYDEhQKDlNUQVRV",
            "RV9TVUNDRVNTENGGAxIcChZTVEFUVUVfTU9ORVlfTk9URU5PVUdIENKGAxIe",
            "ChhTVEFUVUVfQlVZX0lURU1OT1RFTk9VR0gQ04YDEiEKG1NUQVRVRV9ERUxF",
            "VEVfSVRFTU5PVEVOT1VHSBDUhgMSHgoYU1RBVFVFX0lURU1fSVRFTU5PVEVY",
            "SVNUENWGAxIVCg9TVEFUVUVfTk9URVhJU1QQ1oYDEhUKD1NUQVRVRV9DT0RF",
            "X0VORBC4jgNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::TCCamp.CLIENT_CMD), typeof(global::TCCamp.SERVER_CMD), typeof(global::TCCamp.RPC_CMD), typeof(global::TCCamp.SceneObjectType), typeof(global::TCCamp.CharacterAnimType), typeof(global::TCCamp.StatueCode), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.CollisionReq), global::TCCamp.CollisionReq.Parser, new[]{ "TypeA", "IdA", "TypeB", "IdB" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.RPC), global::TCCamp.RPC.Parser, new[]{ "Cmd", "Param" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.PlayerLoginReq), global::TCCamp.PlayerLoginReq.Parser, new[]{ "PlayerID", "Password" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.PlayerLoginRsp), global::TCCamp.PlayerLoginRsp.Parser, new[]{ "Result", "Reason", "PlayerData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.PlayerSaveData), global::TCCamp.PlayerSaveData.Parser, new[]{ "PlayerID", "Password", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.PlayerSyncData), global::TCCamp.PlayerSyncData.Parser, new[]{ "Name", "Playerid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.RoomInfoMsg), global::TCCamp.RoomInfoMsg.Parser, new[]{ "RoomName", "RoomId", "MaxNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.RoomInfoReq), global::TCCamp.RoomInfoReq.Parser, new[]{ "SceneId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.RoomInfoRsp), global::TCCamp.RoomInfoRsp.Parser, new[]{ "RoomInfoList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.RoomNumChange), global::TCCamp.RoomNumChange.Parser, new[]{ "CurrentNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.EnterRoomReq), global::TCCamp.EnterRoomReq.Parser, new[]{ "RoomId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.EnterRoomRsp), global::TCCamp.EnterRoomRsp.Parser, new[]{ "ResCode", "ResStr", "RoomInfo" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.CreateRoomReq), global::TCCamp.CreateRoomReq.Parser, new[]{ "RoomName", "SceneId", "MaxNum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.PlayerCreateReq), global::TCCamp.PlayerCreateReq.Parser, new[]{ "PlayerID", "Password", "Name" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.PlayerCreateRsp), global::TCCamp.PlayerCreateRsp.Parser, new[]{ "Result", "PlayerID", "Name", "Reason" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.SyncAnnounce), global::TCCamp.SyncAnnounce.Parser, new[]{ "Announce" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.SceneBriefRsp), global::TCCamp.SceneBriefRsp.Parser, new[]{ "SceneBrief" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.SceneBriefMsg), global::TCCamp.SceneBriefMsg.Parser, new[]{ "SceneName", "SceneId", "GargoyleCount", "GhostCount", "Difficult" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.SceneObjectMsg), global::TCCamp.SceneObjectMsg.Parser, new[]{ "Id", "Type", "Position", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.SceneMonsterRsp), global::TCCamp.SceneMonsterRsp.Parser, new[]{ "MonsterList", "NetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.SceneObjectRsp), global::TCCamp.SceneObjectRsp.Parser, new[]{ "ObjectList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.Vec3Msg), global::TCCamp.Vec3Msg.Parser, new[]{ "X", "Y", "Z" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.MonsterAttributeMsg), global::TCCamp.MonsterAttributeMsg.Parser, new[]{ "Type", "Name", "Attack", "Hp", "Speed", "Value", "RebornTime", "DetectRange" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.MonsterAttributeRsp), global::TCCamp.MonsterAttributeRsp.Parser, new[]{ "AttributeList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.MonsterSynMsg), global::TCCamp.MonsterSynMsg.Parser, new[]{ "Id", "Hp", "Position", "Rotation", "TargetPos" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.MonstersSynMsg), global::TCCamp.MonstersSynMsg.Parser, new[]{ "MonsterList", "Netid" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.BulletSynMsg), global::TCCamp.BulletSynMsg.Parser, new[]{ "Id", "Position", "Rotation", "IsActive" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.BulletsSynMsg), global::TCCamp.BulletsSynMsg.Parser, new[]{ "BulletList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.AttackReq), global::TCCamp.AttackReq.Parser, new[]{ "Id", "Position", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.RankListMsg), global::TCCamp.RankListMsg.Parser, new[]{ "Name", "Score", "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.RankListReq), global::TCCamp.RankListReq.Parser, new[]{ "SceneId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.GameTimeRsp), global::TCCamp.GameTimeRsp.Parser, new[]{ "Time" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.RankListRsp), global::TCCamp.RankListRsp.Parser, new[]{ "RankList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.RankListData), global::TCCamp.RankListData.Parser, new[]{ "RankData" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.CharacterStatueMsg), global::TCCamp.CharacterStatueMsg.Parser, new[]{ "NetId", "Hp", "Speed", "MaxSpeed", "Position", "Rotation", "IsDeath", "IsArmed", "IsImmunity", "ActionType", "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.CharacterStatueReq), global::TCCamp.CharacterStatueReq.Parser, new[]{ "NetId", "Speed", "Position", "Rotation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.CharacterAnimSynMsg), global::TCCamp.CharacterAnimSynMsg.Parser, new[]{ "AnimtType", "NetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.NetAsyncMsg), global::TCCamp.NetAsyncMsg.Parser, new[]{ "CharacterStatueList" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.RemoveCharacterRsp), global::TCCamp.RemoveCharacterRsp.Parser, new[]{ "NetId" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.ScoreRsp), global::TCCamp.ScoreRsp.Parser, new[]{ "Score" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.GameResultRsp), global::TCCamp.GameResultRsp.Parser, new[]{ "Score", "RoomRank", "GameTime", "Success", "IsFinished", "BeatCount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.GameContinueRsp), global::TCCamp.GameContinueRsp.Parser, new[]{ "NeedContinue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.ItemConfig), global::TCCamp.ItemConfig.Parser, new[]{ "Id", "Name", "Introduce", "Price", "IconName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.ItemConfigs), global::TCCamp.ItemConfigs.Parser, new[]{ "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.ItemInfo), global::TCCamp.ItemInfo.Parser, new[]{ "Id", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.ShopItemRsp), global::TCCamp.ShopItemRsp.Parser, new[]{ "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.BagItemRsp), global::TCCamp.BagItemRsp.Parser, new[]{ "Money", "Item" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.BuyReq), global::TCCamp.BuyReq.Parser, new[]{ "Id", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.DeleteItemReq), global::TCCamp.DeleteItemReq.Parser, new[]{ "Id", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.AddMoneyReq), global::TCCamp.AddMoneyReq.Parser, new[]{ "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.MoneyRsp), global::TCCamp.MoneyRsp.Parser, new[]{ "Code", "Num" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::TCCamp.StatueCodeRsp), global::TCCamp.StatueCodeRsp.Parser, new[]{ "Code", "Reason" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum CLIENT_CMD {
    [pbr::OriginalName("CLIENT_CMD_INVALID")] Invalid = 0,
    [pbr::OriginalName("CLIENT_CMD_BEGIN")] Begin = 30000,
    [pbr::OriginalName("CLIENT_PING")] ClientPing = 30001,
    [pbr::OriginalName("CLIENT_ADD_REQ")] ClientAddReq = 30003,
    [pbr::OriginalName("CLIENT_LOGIN_REQ")] ClientLoginReq = 30004,
    [pbr::OriginalName("CLIENT_LOGOUT_REQ")] ClientLogoutReq = 30005,
    [pbr::OriginalName("CLIENT_CREATE_REQ")] ClientCreateReq = 30006,
    [pbr::OriginalName("CLIENT_ANNOUNCE_REQ")] ClientAnnounceReq = 30007,
    [pbr::OriginalName("CLIENT_CHARACTERADD_REQ")] ClientCharacteraddReq = 30014,
    [pbr::OriginalName("CLIENT_UPDATESTATUE_REQ")] ClientUpdatestatueReq = 30015,
    [pbr::OriginalName("CLIENT_CHARACTERREMOVE_REQ")] ClientCharacterremoveReq = 30016,
    [pbr::OriginalName("CLIENT_SCENEBRIEF_REQ")] ClientScenebriefReq = 30024,
    [pbr::OriginalName("CLIENT_MONSTERATTRIBUTE_REQ")] ClientMonsterattributeReq = 30025,
    [pbr::OriginalName("CLIENT_SCENEDETAIL_REQ")] ClientScenedetailReq = 30026,
    [pbr::OriginalName("CLIENT_SCENESYN_REQ")] ClientScenesynReq = 30027,
    [pbr::OriginalName("CLIENT_ATTACK_REQ")] ClientAttackReq = 30028,
    [pbr::OriginalName("CLIENT_BULLETSYN_REQ")] ClientBulletsynReq = 30029,
    [pbr::OriginalName("CLIENT_RANKLIST_REQ")] ClientRanklistReq = 30030,
    [pbr::OriginalName("CLIENT_START_REQ")] ClientStartReq = 30031,
    [pbr::OriginalName("CLIENT_END_REQ")] ClientEndReq = 30032,
    [pbr::OriginalName("CLIENT_RPC_REQ")] ClientRpcReq = 30033,
    [pbr::OriginalName("CLIENT_ROOM_REQ")] ClientRoomReq = 30034,
    [pbr::OriginalName("CLIENT_ENTERROOM_REQ")] ClientEnterroomReq = 30035,
    [pbr::OriginalName("CLIENT_CREATEROOM_REQ")] ClientCreateroomReq = 30036,
    [pbr::OriginalName("CLIENT_EXITROOM_REQ")] ClientExitroomReq = 30037,
    [pbr::OriginalName("CLIENT_COLLISIONCHECK_REQ")] ClientCollisioncheckReq = 30038,
    [pbr::OriginalName("CLIENT_MONSTERSYN_REQ")] ClientMonstersynReq = 30039,
    [pbr::OriginalName("CLIENT_GAMETIME_REQ")] ClientGametimeReq = 30040,
    [pbr::OriginalName("CLIENT_GAMESCORE_REQ")] ClientGamescoreReq = 30041,
    [pbr::OriginalName("CLIENT_GAMECONTINUE_REQ")] ClientGamecontinueReq = 30042,
    [pbr::OriginalName("CLIENT_BUYITEM_REQ")] ClientBuyitemReq = 30050,
    [pbr::OriginalName("CLIENT_DELETEITEM_REQ")] ClientDeleteitemReq = 30051,
    [pbr::OriginalName("CLIENT_GETSHOPITEMS_REQ")] ClientGetshopitemsReq = 30052,
    [pbr::OriginalName("CLIENT_GETBAGITEMS_REQ")] ClientGetbagitemsReq = 30053,
    [pbr::OriginalName("CLIENT_GETMONEY_REQ")] ClientGetmoneyReq = 30054,
    [pbr::OriginalName("CLIENT_ADDMONEY_REQ")] ClientAddmoneyReq = 30055,
    [pbr::OriginalName("CLIENT_ITEMCONFIG_REQ")] ClientItemconfigReq = 30056,
    [pbr::OriginalName("CLIENT_CMD_END")] End = 33000,
  }

  public enum SERVER_CMD {
    [pbr::OriginalName("SERVER_CMD_INVALID")] Invalid = 0,
    [pbr::OriginalName("SERVER_CMD_BEGIN")] Begin = 1000,
    [pbr::OriginalName("SERVER_PONG")] ServerPong = 1001,
    [pbr::OriginalName("SERVER_ADD_RSP")] ServerAddRsp = 1003,
    [pbr::OriginalName("SERVER_LOGIN_RSP")] ServerLoginRsp = 1004,
    [pbr::OriginalName("SERVER_CREATE_RSP")] ServerCreateRsp = 1005,
    [pbr::OriginalName("SERVER_ANNOUNCE_RSP")] ServerAnnounceRsp = 1006,
    [pbr::OriginalName("SERVER_CHARACTERADD_RSP")] ServerCharacteraddRsp = 1014,
    [pbr::OriginalName("SERVER_BROADCAST_CHARACTERSTATUE")] ServerBroadcastCharacterstatue = 1015,
    [pbr::OriginalName("SERVER_CHARACTERREMOVE_RSP")] ServerCharacterremoveRsp = 1016,
    [pbr::OriginalName("SERVER_CHARACTERANIMSYN_RSP")] ServerCharacteranimsynRsp = 1017,
    [pbr::OriginalName("SERVER_SCENEBRIEF_RSP")] ServerScenebriefRsp = 1024,
    [pbr::OriginalName("SERVER_MONSTERATTRIBUTE_RSP")] ServerMonsterattributeRsp = 1025,
    [pbr::OriginalName("SERVER_ATTACK_RSP")] ServerAttackRsp = 1027,
    [pbr::OriginalName("SERVER_RANKLIST_RSP")] ServerRanklistRsp = 1028,
    [pbr::OriginalName("SERVER_START_RSP")] ServerStartRsp = 1029,
    [pbr::OriginalName("SERVER_END_RSP")] ServerEndRsp = 1030,
    [pbr::OriginalName("SERVER_RPC_MSG")] ServerRpcMsg = 1031,
    [pbr::OriginalName("SERVER_ROOM_RSP")] ServerRoomRsp = 1032,
    [pbr::OriginalName("SERVER_ENTERROOM_RSP")] ServerEnterroomRsp = 1033,
    [pbr::OriginalName("SERVER_ROOMREADY_RSP")] ServerRoomreadyRsp = 1034,
    [pbr::OriginalName("SERVER_ROOMNUMCHANGE_RSP")] ServerRoomnumchangeRsp = 1035,
    [pbr::OriginalName("SERVER_SCENEMONSTER_RSP")] ServerScenemonsterRsp = 1036,
    [pbr::OriginalName("SERVER_SCENEOBJECT_RSP")] ServerSceneobjectRsp = 1037,
    [pbr::OriginalName("SERVER_MONSTERSYN_RSP")] ServerMonstersynRsp = 1038,
    [pbr::OriginalName("SERVER_BULLETSYN_RSP")] ServerBulletsynRsp = 1039,
    [pbr::OriginalName("SERVER_GAMETIME_RSP")] ServerGametimeRsp = 1040,
    [pbr::OriginalName("SERVER_GAMESCORE_RSP")] ServerGamescoreRsp = 1041,
    [pbr::OriginalName("SERVER_GAMECONTINUE_RSP")] ServerGamecontinueRsp = 1042,
    [pbr::OriginalName("SERVER_BUYITEM_RSP")] ServerBuyitemRsp = 1050,
    [pbr::OriginalName("SERVER_DELETEITEM_RSP")] ServerDeleteitemRsp = 1051,
    [pbr::OriginalName("SERVER_GETSHOPITEMS_RSP")] ServerGetshopitemsRsp = 1052,
    [pbr::OriginalName("SERVER_GETBAGITEMS_RSP")] ServerGetbagitemsRsp = 1053,
    [pbr::OriginalName("SERVER_GETMONEY_RSP")] ServerGetmoneyRsp = 1054,
    [pbr::OriginalName("SERVER_ADDMONEY_RSP")] ServerAddmoneyRsp = 1055,
    [pbr::OriginalName("SERVER_ITEMCONFIG_RSP")] ServerItemconfigRsp = 1056,
    [pbr::OriginalName("GM_OPERATE_RSP")] GmOperateRsp = 1100,
    [pbr::OriginalName("SERVER_CMD_END")] End = 10000,
  }

  public enum RPC_CMD {
    [pbr::OriginalName("RPC_BEGIN")] RpcBegin = 0,
    [pbr::OriginalName("TRAP_STATUE_ENABLE")] TrapStatueEnable = 1,
    [pbr::OriginalName("TRAP_STATUE_DISABLE")] TrapStatueDisable = 2,
    [pbr::OriginalName("BOX_STATUE_OPEN")] BoxStatueOpen = 3,
    [pbr::OriginalName("LIGHT_STATUE_ON")] LightStatueOn = 4,
    [pbr::OriginalName("LIGHT_STATUE_OFF")] LightStatueOff = 5,
    [pbr::OriginalName("DOOR_STATUE_OPEN")] DoorStatueOpen = 6,
    [pbr::OriginalName("DOOR_STATUE_CLOSE")] DoorStatueClose = 7,
    [pbr::OriginalName("TIME_UPDATE")] TimeUpdate = 8,
    [pbr::OriginalName("THROW_WEAPON")] ThrowWeapon = 9,
    [pbr::OriginalName("RPC_END")] RpcEnd = 20,
  }

  public enum SceneObjectType {
    [pbr::OriginalName("OBJECT_NONE")] ObjectNone = 0,
    [pbr::OriginalName("PLAYER")] Player = 1,
    [pbr::OriginalName("BULLET")] Bullet = 2,
    [pbr::OriginalName("GHOST")] Ghost = 3,
    [pbr::OriginalName("GARGOYLE")] Gargoyle = 4,
    [pbr::OriginalName("DOOR")] Door = 5,
    [pbr::OriginalName("LIGHT")] Light = 6,
    [pbr::OriginalName("BOX")] Box = 7,
    [pbr::OriginalName("SLIME")] Slime = 8,
    [pbr::OriginalName("TRAP")] Trap = 9,
    [pbr::OriginalName("FINISHLINE")] Finishline = 10,
  }

  public enum CharacterAnimType {
    [pbr::OriginalName("ANIM_NONE")] AnimNone = 0,
    [pbr::OriginalName("OPENDOOR")] Opendoor = 1,
    [pbr::OriginalName("CLOSEDOOR")] Closedoor = 2,
    [pbr::OriginalName("TURNONLIGHT")] Turnonlight = 3,
    [pbr::OriginalName("TURNOFFLIGHT")] Turnofflight = 4,
    [pbr::OriginalName("OPENBOX")] Openbox = 5,
    [pbr::OriginalName("ATTACK")] Attack = 6,
    [pbr::OriginalName("HURT")] Hurt = 7,
  }

  public enum StatueCode {
    [pbr::OriginalName("STATUE_CODE_INVALID")] Invalid = 0,
    [pbr::OriginalName("STATUE_CODE_BEGIN")] Begin = 50000,
    [pbr::OriginalName("STATUE_SUCCESS")] StatueSuccess = 50001,
    [pbr::OriginalName("STATUE_MONEY_NOTENOUGH")] StatueMoneyNotenough = 50002,
    [pbr::OriginalName("STATUE_BUY_ITEMNOTENOUGH")] StatueBuyItemnotenough = 50003,
    [pbr::OriginalName("STATUE_DELETE_ITEMNOTENOUGH")] StatueDeleteItemnotenough = 50004,
    [pbr::OriginalName("STATUE_ITEM_ITEMNOTEXIST")] StatueItemItemnotexist = 50005,
    [pbr::OriginalName("STATUE_NOTEXIST")] StatueNotexist = 50006,
    [pbr::OriginalName("STATUE_CODE_END")] End = 51000,
  }

  #endregion

  #region Messages
  public sealed partial class CollisionReq : pb::IMessage<CollisionReq> {
    private static readonly pb::MessageParser<CollisionReq> _parser = new pb::MessageParser<CollisionReq>(() => new CollisionReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CollisionReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollisionReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollisionReq(CollisionReq other) : this() {
      typeA_ = other.typeA_;
      idA_ = other.idA_;
      typeB_ = other.typeB_;
      idB_ = other.idB_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CollisionReq Clone() {
      return new CollisionReq(this);
    }

    /// <summary>Field number for the "typeA" field.</summary>
    public const int TypeAFieldNumber = 1;
    private global::TCCamp.SceneObjectType typeA_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.SceneObjectType TypeA {
      get { return typeA_; }
      set {
        typeA_ = value;
      }
    }

    /// <summary>Field number for the "idA" field.</summary>
    public const int IdAFieldNumber = 2;
    private int idA_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdA {
      get { return idA_; }
      set {
        idA_ = value;
      }
    }

    /// <summary>Field number for the "typeB" field.</summary>
    public const int TypeBFieldNumber = 3;
    private global::TCCamp.SceneObjectType typeB_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.SceneObjectType TypeB {
      get { return typeB_; }
      set {
        typeB_ = value;
      }
    }

    /// <summary>Field number for the "idB" field.</summary>
    public const int IdBFieldNumber = 4;
    private int idB_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IdB {
      get { return idB_; }
      set {
        idB_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CollisionReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CollisionReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TypeA != other.TypeA) return false;
      if (IdA != other.IdA) return false;
      if (TypeB != other.TypeB) return false;
      if (IdB != other.IdB) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TypeA != 0) hash ^= TypeA.GetHashCode();
      if (IdA != 0) hash ^= IdA.GetHashCode();
      if (TypeB != 0) hash ^= TypeB.GetHashCode();
      if (IdB != 0) hash ^= IdB.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TypeA != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) TypeA);
      }
      if (IdA != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(IdA);
      }
      if (TypeB != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) TypeB);
      }
      if (IdB != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(IdB);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TypeA != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TypeA);
      }
      if (IdA != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdA);
      }
      if (TypeB != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TypeB);
      }
      if (IdB != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IdB);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CollisionReq other) {
      if (other == null) {
        return;
      }
      if (other.TypeA != 0) {
        TypeA = other.TypeA;
      }
      if (other.IdA != 0) {
        IdA = other.IdA;
      }
      if (other.TypeB != 0) {
        TypeB = other.TypeB;
      }
      if (other.IdB != 0) {
        IdB = other.IdB;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            typeA_ = (global::TCCamp.SceneObjectType) input.ReadEnum();
            break;
          }
          case 16: {
            IdA = input.ReadInt32();
            break;
          }
          case 24: {
            typeB_ = (global::TCCamp.SceneObjectType) input.ReadEnum();
            break;
          }
          case 32: {
            IdB = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RPC : pb::IMessage<RPC> {
    private static readonly pb::MessageParser<RPC> _parser = new pb::MessageParser<RPC>(() => new RPC());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RPC> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RPC() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RPC(RPC other) : this() {
      cmd_ = other.cmd_;
      param_ = other.param_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RPC Clone() {
      return new RPC(this);
    }

    /// <summary>Field number for the "cmd" field.</summary>
    public const int CmdFieldNumber = 1;
    private global::TCCamp.RPC_CMD cmd_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.RPC_CMD Cmd {
      get { return cmd_; }
      set {
        cmd_ = value;
      }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_param_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> param_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Param {
      get { return param_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RPC);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RPC other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Cmd != other.Cmd) return false;
      if(!param_.Equals(other.param_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Cmd != 0) hash ^= Cmd.GetHashCode();
      hash ^= param_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Cmd != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Cmd);
      }
      param_.WriteTo(output, _repeated_param_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Cmd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Cmd);
      }
      size += param_.CalculateSize(_repeated_param_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RPC other) {
      if (other == null) {
        return;
      }
      if (other.Cmd != 0) {
        Cmd = other.Cmd;
      }
      param_.Add(other.param_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            cmd_ = (global::TCCamp.RPC_CMD) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            param_.AddEntriesFrom(input, _repeated_param_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerLoginReq : pb::IMessage<PlayerLoginReq> {
    private static readonly pb::MessageParser<PlayerLoginReq> _parser = new pb::MessageParser<PlayerLoginReq>(() => new PlayerLoginReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerLoginReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLoginReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLoginReq(PlayerLoginReq other) : this() {
      playerID_ = other.playerID_;
      password_ = other.password_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLoginReq Clone() {
      return new PlayerLoginReq(this);
    }

    /// <summary>Field number for the "PlayerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerLoginReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerLoginReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (Password != other.Password) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerID);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerLoginReq other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerID = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerLoginRsp : pb::IMessage<PlayerLoginRsp> {
    private static readonly pb::MessageParser<PlayerLoginRsp> _parser = new pb::MessageParser<PlayerLoginRsp>(() => new PlayerLoginRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerLoginRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLoginRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLoginRsp(PlayerLoginRsp other) : this() {
      result_ = other.result_;
      reason_ = other.reason_;
      playerData_ = other.playerData_ != null ? other.playerData_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLoginRsp Clone() {
      return new PlayerLoginRsp(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "Reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PlayerData" field.</summary>
    public const int PlayerDataFieldNumber = 3;
    private global::TCCamp.PlayerSyncData playerData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.PlayerSyncData PlayerData {
      get { return playerData_; }
      set {
        playerData_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerLoginRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerLoginRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (Reason != other.Reason) return false;
      if (!object.Equals(PlayerData, other.PlayerData)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (playerData_ != null) hash ^= PlayerData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
      if (playerData_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(PlayerData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (playerData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerLoginRsp other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      if (other.playerData_ != null) {
        if (playerData_ == null) {
          playerData_ = new global::TCCamp.PlayerSyncData();
        }
        PlayerData.MergeFrom(other.PlayerData);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
          case 26: {
            if (playerData_ == null) {
              playerData_ = new global::TCCamp.PlayerSyncData();
            }
            input.ReadMessage(playerData_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerSaveData : pb::IMessage<PlayerSaveData> {
    private static readonly pb::MessageParser<PlayerSaveData> _parser = new pb::MessageParser<PlayerSaveData>(() => new PlayerSaveData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSaveData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSaveData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSaveData(PlayerSaveData other) : this() {
      playerID_ = other.playerID_;
      password_ = other.password_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSaveData Clone() {
      return new PlayerSaveData(this);
    }

    /// <summary>Field number for the "PlayerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSaveData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSaveData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (Password != other.Password) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerID);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSaveData other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerID = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerSyncData : pb::IMessage<PlayerSyncData> {
    private static readonly pb::MessageParser<PlayerSyncData> _parser = new pb::MessageParser<PlayerSyncData>(() => new PlayerSyncData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerSyncData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSyncData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSyncData(PlayerSyncData other) : this() {
      name_ = other.name_;
      playerid_ = other.playerid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerSyncData Clone() {
      return new PlayerSyncData(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Playerid" field.</summary>
    public const int PlayeridFieldNumber = 2;
    private string playerid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Playerid {
      get { return playerid_; }
      set {
        playerid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerSyncData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerSyncData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Playerid != other.Playerid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Playerid.Length != 0) hash ^= Playerid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Playerid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Playerid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Playerid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Playerid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerSyncData other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Playerid.Length != 0) {
        Playerid = other.Playerid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Playerid = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomInfoMsg : pb::IMessage<RoomInfoMsg> {
    private static readonly pb::MessageParser<RoomInfoMsg> _parser = new pb::MessageParser<RoomInfoMsg>(() => new RoomInfoMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfoMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfoMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfoMsg(RoomInfoMsg other) : this() {
      roomName_ = other.roomName_;
      roomId_ = other.roomId_;
      maxNum_ = other.maxNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfoMsg Clone() {
      return new RoomInfoMsg(this);
    }

    /// <summary>Field number for the "roomName" field.</summary>
    public const int RoomNameFieldNumber = 1;
    private string roomName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 2;
    private int roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    /// <summary>Field number for the "maxNum" field.</summary>
    public const int MaxNumFieldNumber = 3;
    private int maxNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxNum {
      get { return maxNum_; }
      set {
        maxNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfoMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfoMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomName != other.RoomName) return false;
      if (RoomId != other.RoomId) return false;
      if (MaxNum != other.MaxNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (MaxNum != 0) hash ^= MaxNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (RoomId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomId);
      }
      if (MaxNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (MaxNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfoMsg other) {
      if (other == null) {
        return;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      if (other.MaxNum != 0) {
        MaxNum = other.MaxNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 16: {
            RoomId = input.ReadInt32();
            break;
          }
          case 24: {
            MaxNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomInfoReq : pb::IMessage<RoomInfoReq> {
    private static readonly pb::MessageParser<RoomInfoReq> _parser = new pb::MessageParser<RoomInfoReq>(() => new RoomInfoReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfoReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfoReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfoReq(RoomInfoReq other) : this() {
      sceneId_ = other.sceneId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfoReq Clone() {
      return new RoomInfoReq(this);
    }

    /// <summary>Field number for the "sceneId" field.</summary>
    public const int SceneIdFieldNumber = 1;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfoReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfoReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneId != other.SceneId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SceneId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfoReq other) {
      if (other == null) {
        return;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SceneId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomInfoRsp : pb::IMessage<RoomInfoRsp> {
    private static readonly pb::MessageParser<RoomInfoRsp> _parser = new pb::MessageParser<RoomInfoRsp>(() => new RoomInfoRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomInfoRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfoRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfoRsp(RoomInfoRsp other) : this() {
      roomInfoList_ = other.roomInfoList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomInfoRsp Clone() {
      return new RoomInfoRsp(this);
    }

    /// <summary>Field number for the "RoomInfoList" field.</summary>
    public const int RoomInfoListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TCCamp.RoomInfoMsg> _repeated_roomInfoList_codec
        = pb::FieldCodec.ForMessage(10, global::TCCamp.RoomInfoMsg.Parser);
    private readonly pbc::RepeatedField<global::TCCamp.RoomInfoMsg> roomInfoList_ = new pbc::RepeatedField<global::TCCamp.RoomInfoMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TCCamp.RoomInfoMsg> RoomInfoList {
      get { return roomInfoList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomInfoRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomInfoRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!roomInfoList_.Equals(other.roomInfoList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= roomInfoList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      roomInfoList_.WriteTo(output, _repeated_roomInfoList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += roomInfoList_.CalculateSize(_repeated_roomInfoList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomInfoRsp other) {
      if (other == null) {
        return;
      }
      roomInfoList_.Add(other.roomInfoList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            roomInfoList_.AddEntriesFrom(input, _repeated_roomInfoList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RoomNumChange : pb::IMessage<RoomNumChange> {
    private static readonly pb::MessageParser<RoomNumChange> _parser = new pb::MessageParser<RoomNumChange>(() => new RoomNumChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RoomNumChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomNumChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomNumChange(RoomNumChange other) : this() {
      currentNum_ = other.currentNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RoomNumChange Clone() {
      return new RoomNumChange(this);
    }

    /// <summary>Field number for the "currentNum" field.</summary>
    public const int CurrentNumFieldNumber = 1;
    private int currentNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentNum {
      get { return currentNum_; }
      set {
        currentNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RoomNumChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RoomNumChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CurrentNum != other.CurrentNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CurrentNum != 0) hash ^= CurrentNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CurrentNum != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(CurrentNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CurrentNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RoomNumChange other) {
      if (other == null) {
        return;
      }
      if (other.CurrentNum != 0) {
        CurrentNum = other.CurrentNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            CurrentNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterRoomReq : pb::IMessage<EnterRoomReq> {
    private static readonly pb::MessageParser<EnterRoomReq> _parser = new pb::MessageParser<EnterRoomReq>(() => new EnterRoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomReq(EnterRoomReq other) : this() {
      roomId_ = other.roomId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomReq Clone() {
      return new EnterRoomReq(this);
    }

    /// <summary>Field number for the "roomId" field.</summary>
    public const int RoomIdFieldNumber = 1;
    private int roomId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomId != other.RoomId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomId != 0) hash ^= RoomId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(RoomId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomId != 0) {
        RoomId = other.RoomId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RoomId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EnterRoomRsp : pb::IMessage<EnterRoomRsp> {
    private static readonly pb::MessageParser<EnterRoomRsp> _parser = new pb::MessageParser<EnterRoomRsp>(() => new EnterRoomRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EnterRoomRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomRsp(EnterRoomRsp other) : this() {
      resCode_ = other.resCode_;
      resStr_ = other.resStr_;
      roomInfo_ = other.roomInfo_ != null ? other.roomInfo_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EnterRoomRsp Clone() {
      return new EnterRoomRsp(this);
    }

    /// <summary>Field number for the "resCode" field.</summary>
    public const int ResCodeFieldNumber = 1;
    private int resCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ResCode {
      get { return resCode_; }
      set {
        resCode_ = value;
      }
    }

    /// <summary>Field number for the "resStr" field.</summary>
    public const int ResStrFieldNumber = 2;
    private string resStr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ResStr {
      get { return resStr_; }
      set {
        resStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "roomInfo" field.</summary>
    public const int RoomInfoFieldNumber = 3;
    private global::TCCamp.RoomInfoMsg roomInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.RoomInfoMsg RoomInfo {
      get { return roomInfo_; }
      set {
        roomInfo_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EnterRoomRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EnterRoomRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ResCode != other.ResCode) return false;
      if (ResStr != other.ResStr) return false;
      if (!object.Equals(RoomInfo, other.RoomInfo)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ResCode != 0) hash ^= ResCode.GetHashCode();
      if (ResStr.Length != 0) hash ^= ResStr.GetHashCode();
      if (roomInfo_ != null) hash ^= RoomInfo.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ResCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ResCode);
      }
      if (ResStr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ResStr);
      }
      if (roomInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(RoomInfo);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ResCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ResCode);
      }
      if (ResStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ResStr);
      }
      if (roomInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RoomInfo);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EnterRoomRsp other) {
      if (other == null) {
        return;
      }
      if (other.ResCode != 0) {
        ResCode = other.ResCode;
      }
      if (other.ResStr.Length != 0) {
        ResStr = other.ResStr;
      }
      if (other.roomInfo_ != null) {
        if (roomInfo_ == null) {
          roomInfo_ = new global::TCCamp.RoomInfoMsg();
        }
        RoomInfo.MergeFrom(other.RoomInfo);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ResCode = input.ReadInt32();
            break;
          }
          case 18: {
            ResStr = input.ReadString();
            break;
          }
          case 26: {
            if (roomInfo_ == null) {
              roomInfo_ = new global::TCCamp.RoomInfoMsg();
            }
            input.ReadMessage(roomInfo_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateRoomReq : pb::IMessage<CreateRoomReq> {
    private static readonly pb::MessageParser<CreateRoomReq> _parser = new pb::MessageParser<CreateRoomReq>(() => new CreateRoomReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateRoomReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomReq(CreateRoomReq other) : this() {
      roomName_ = other.roomName_;
      sceneId_ = other.sceneId_;
      maxNum_ = other.maxNum_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateRoomReq Clone() {
      return new CreateRoomReq(this);
    }

    /// <summary>Field number for the "roomName" field.</summary>
    public const int RoomNameFieldNumber = 1;
    private string roomName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoomName {
      get { return roomName_; }
      set {
        roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sceneId" field.</summary>
    public const int SceneIdFieldNumber = 2;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "maxNum" field.</summary>
    public const int MaxNumFieldNumber = 3;
    private int maxNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxNum {
      get { return maxNum_; }
      set {
        maxNum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateRoomReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateRoomReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoomName != other.RoomName) return false;
      if (SceneId != other.SceneId) return false;
      if (MaxNum != other.MaxNum) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (MaxNum != 0) hash ^= MaxNum.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomName);
      }
      if (SceneId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SceneId);
      }
      if (MaxNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxNum);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoomName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
      }
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (MaxNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxNum);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateRoomReq other) {
      if (other == null) {
        return;
      }
      if (other.RoomName.Length != 0) {
        RoomName = other.RoomName;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.MaxNum != 0) {
        MaxNum = other.MaxNum;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoomName = input.ReadString();
            break;
          }
          case 16: {
            SceneId = input.ReadInt32();
            break;
          }
          case 24: {
            MaxNum = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerCreateReq : pb::IMessage<PlayerCreateReq> {
    private static readonly pb::MessageParser<PlayerCreateReq> _parser = new pb::MessageParser<PlayerCreateReq>(() => new PlayerCreateReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerCreateReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCreateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCreateReq(PlayerCreateReq other) : this() {
      playerID_ = other.playerID_;
      password_ = other.password_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCreateReq Clone() {
      return new PlayerCreateReq(this);
    }

    /// <summary>Field number for the "PlayerID" field.</summary>
    public const int PlayerIDFieldNumber = 1;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Password" field.</summary>
    public const int PasswordFieldNumber = 2;
    private string password_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private pb::ByteString name_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerCreateReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerCreateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PlayerID != other.PlayerID) return false;
      if (Password != other.Password) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (Password.Length != 0) hash ^= Password.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerID.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PlayerID);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerCreateReq other) {
      if (other == null) {
        return;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.Password.Length != 0) {
        Password = other.Password;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PlayerID = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerCreateRsp : pb::IMessage<PlayerCreateRsp> {
    private static readonly pb::MessageParser<PlayerCreateRsp> _parser = new pb::MessageParser<PlayerCreateRsp>(() => new PlayerCreateRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerCreateRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCreateRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCreateRsp(PlayerCreateRsp other) : this() {
      result_ = other.result_;
      playerID_ = other.playerID_;
      name_ = other.name_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerCreateRsp Clone() {
      return new PlayerCreateRsp(this);
    }

    /// <summary>Field number for the "Result" field.</summary>
    public const int ResultFieldNumber = 1;
    private int result_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Result {
      get { return result_; }
      set {
        result_ = value;
      }
    }

    /// <summary>Field number for the "PlayerID" field.</summary>
    public const int PlayerIDFieldNumber = 2;
    private string playerID_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PlayerID {
      get { return playerID_; }
      set {
        playerID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Reason" field.</summary>
    public const int ReasonFieldNumber = 4;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerCreateRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerCreateRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Result != other.Result) return false;
      if (PlayerID != other.PlayerID) return false;
      if (Name != other.Name) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Result != 0) hash ^= Result.GetHashCode();
      if (PlayerID.Length != 0) hash ^= PlayerID.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Result != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Result);
      }
      if (PlayerID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PlayerID);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Result != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Result);
      }
      if (PlayerID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerID);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerCreateRsp other) {
      if (other == null) {
        return;
      }
      if (other.Result != 0) {
        Result = other.Result;
      }
      if (other.PlayerID.Length != 0) {
        PlayerID = other.PlayerID;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Result = input.ReadInt32();
            break;
          }
          case 18: {
            PlayerID = input.ReadString();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SyncAnnounce : pb::IMessage<SyncAnnounce> {
    private static readonly pb::MessageParser<SyncAnnounce> _parser = new pb::MessageParser<SyncAnnounce>(() => new SyncAnnounce());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SyncAnnounce> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncAnnounce() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncAnnounce(SyncAnnounce other) : this() {
      announce_ = other.announce_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SyncAnnounce Clone() {
      return new SyncAnnounce(this);
    }

    /// <summary>Field number for the "Announce" field.</summary>
    public const int AnnounceFieldNumber = 1;
    private pb::ByteString announce_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Announce {
      get { return announce_; }
      set {
        announce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SyncAnnounce);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SyncAnnounce other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Announce != other.Announce) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Announce.Length != 0) hash ^= Announce.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Announce.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Announce);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Announce.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Announce);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SyncAnnounce other) {
      if (other == null) {
        return;
      }
      if (other.Announce.Length != 0) {
        Announce = other.Announce;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Announce = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneBriefRsp : pb::IMessage<SceneBriefRsp> {
    private static readonly pb::MessageParser<SceneBriefRsp> _parser = new pb::MessageParser<SceneBriefRsp>(() => new SceneBriefRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneBriefRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneBriefRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneBriefRsp(SceneBriefRsp other) : this() {
      sceneBrief_ = other.sceneBrief_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneBriefRsp Clone() {
      return new SceneBriefRsp(this);
    }

    /// <summary>Field number for the "SceneBrief" field.</summary>
    public const int SceneBriefFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TCCamp.SceneBriefMsg> _repeated_sceneBrief_codec
        = pb::FieldCodec.ForMessage(10, global::TCCamp.SceneBriefMsg.Parser);
    private readonly pbc::RepeatedField<global::TCCamp.SceneBriefMsg> sceneBrief_ = new pbc::RepeatedField<global::TCCamp.SceneBriefMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TCCamp.SceneBriefMsg> SceneBrief {
      get { return sceneBrief_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneBriefRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneBriefRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sceneBrief_.Equals(other.sceneBrief_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sceneBrief_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sceneBrief_.WriteTo(output, _repeated_sceneBrief_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sceneBrief_.CalculateSize(_repeated_sceneBrief_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneBriefRsp other) {
      if (other == null) {
        return;
      }
      sceneBrief_.Add(other.sceneBrief_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            sceneBrief_.AddEntriesFrom(input, _repeated_sceneBrief_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneBriefMsg : pb::IMessage<SceneBriefMsg> {
    private static readonly pb::MessageParser<SceneBriefMsg> _parser = new pb::MessageParser<SceneBriefMsg>(() => new SceneBriefMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneBriefMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneBriefMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneBriefMsg(SceneBriefMsg other) : this() {
      sceneName_ = other.sceneName_;
      sceneId_ = other.sceneId_;
      gargoyleCount_ = other.gargoyleCount_;
      ghostCount_ = other.ghostCount_;
      difficult_ = other.difficult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneBriefMsg Clone() {
      return new SceneBriefMsg(this);
    }

    /// <summary>Field number for the "SceneName" field.</summary>
    public const int SceneNameFieldNumber = 1;
    private string sceneName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SceneName {
      get { return sceneName_; }
      set {
        sceneName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "SceneId" field.</summary>
    public const int SceneIdFieldNumber = 2;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    /// <summary>Field number for the "GargoyleCount" field.</summary>
    public const int GargoyleCountFieldNumber = 3;
    private int gargoyleCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GargoyleCount {
      get { return gargoyleCount_; }
      set {
        gargoyleCount_ = value;
      }
    }

    /// <summary>Field number for the "GhostCount" field.</summary>
    public const int GhostCountFieldNumber = 4;
    private int ghostCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GhostCount {
      get { return ghostCount_; }
      set {
        ghostCount_ = value;
      }
    }

    /// <summary>Field number for the "Difficult" field.</summary>
    public const int DifficultFieldNumber = 5;
    private int difficult_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Difficult {
      get { return difficult_; }
      set {
        difficult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneBriefMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneBriefMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneName != other.SceneName) return false;
      if (SceneId != other.SceneId) return false;
      if (GargoyleCount != other.GargoyleCount) return false;
      if (GhostCount != other.GhostCount) return false;
      if (Difficult != other.Difficult) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneName.Length != 0) hash ^= SceneName.GetHashCode();
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (GargoyleCount != 0) hash ^= GargoyleCount.GetHashCode();
      if (GhostCount != 0) hash ^= GhostCount.GetHashCode();
      if (Difficult != 0) hash ^= Difficult.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SceneName);
      }
      if (SceneId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SceneId);
      }
      if (GargoyleCount != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GargoyleCount);
      }
      if (GhostCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(GhostCount);
      }
      if (Difficult != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Difficult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneName);
      }
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (GargoyleCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GargoyleCount);
      }
      if (GhostCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GhostCount);
      }
      if (Difficult != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Difficult);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneBriefMsg other) {
      if (other == null) {
        return;
      }
      if (other.SceneName.Length != 0) {
        SceneName = other.SceneName;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      if (other.GargoyleCount != 0) {
        GargoyleCount = other.GargoyleCount;
      }
      if (other.GhostCount != 0) {
        GhostCount = other.GhostCount;
      }
      if (other.Difficult != 0) {
        Difficult = other.Difficult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            SceneName = input.ReadString();
            break;
          }
          case 16: {
            SceneId = input.ReadInt32();
            break;
          }
          case 24: {
            GargoyleCount = input.ReadInt32();
            break;
          }
          case 32: {
            GhostCount = input.ReadInt32();
            break;
          }
          case 40: {
            Difficult = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneObjectMsg : pb::IMessage<SceneObjectMsg> {
    private static readonly pb::MessageParser<SceneObjectMsg> _parser = new pb::MessageParser<SceneObjectMsg>(() => new SceneObjectMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneObjectMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneObjectMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneObjectMsg(SceneObjectMsg other) : this() {
      id_ = other.id_;
      type_ = other.type_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneObjectMsg Clone() {
      return new SceneObjectMsg(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::TCCamp.SceneObjectType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.SceneObjectType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::TCCamp.Vec3Msg position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.Vec3Msg Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Rotation" field.</summary>
    public const int RotationFieldNumber = 4;
    private global::TCCamp.Vec3Msg rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.Vec3Msg Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneObjectMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneObjectMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Type != other.Type) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneObjectMsg other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::TCCamp.Vec3Msg();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::TCCamp.Vec3Msg();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            type_ = (global::TCCamp.SceneObjectType) input.ReadEnum();
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::TCCamp.Vec3Msg();
            }
            input.ReadMessage(position_);
            break;
          }
          case 34: {
            if (rotation_ == null) {
              rotation_ = new global::TCCamp.Vec3Msg();
            }
            input.ReadMessage(rotation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneMonsterRsp : pb::IMessage<SceneMonsterRsp> {
    private static readonly pb::MessageParser<SceneMonsterRsp> _parser = new pb::MessageParser<SceneMonsterRsp>(() => new SceneMonsterRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneMonsterRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneMonsterRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneMonsterRsp(SceneMonsterRsp other) : this() {
      monsterList_ = other.monsterList_.Clone();
      netId_ = other.netId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneMonsterRsp Clone() {
      return new SceneMonsterRsp(this);
    }

    /// <summary>Field number for the "MonsterList" field.</summary>
    public const int MonsterListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TCCamp.SceneObjectMsg> _repeated_monsterList_codec
        = pb::FieldCodec.ForMessage(10, global::TCCamp.SceneObjectMsg.Parser);
    private readonly pbc::RepeatedField<global::TCCamp.SceneObjectMsg> monsterList_ = new pbc::RepeatedField<global::TCCamp.SceneObjectMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TCCamp.SceneObjectMsg> MonsterList {
      get { return monsterList_; }
    }

    /// <summary>Field number for the "NetId" field.</summary>
    public const int NetIdFieldNumber = 2;
    private int netId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetId {
      get { return netId_; }
      set {
        netId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneMonsterRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneMonsterRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!monsterList_.Equals(other.monsterList_)) return false;
      if (NetId != other.NetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= monsterList_.GetHashCode();
      if (NetId != 0) hash ^= NetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      monsterList_.WriteTo(output, _repeated_monsterList_codec);
      if (NetId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monsterList_.CalculateSize(_repeated_monsterList_codec);
      if (NetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneMonsterRsp other) {
      if (other == null) {
        return;
      }
      monsterList_.Add(other.monsterList_);
      if (other.NetId != 0) {
        NetId = other.NetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            monsterList_.AddEntriesFrom(input, _repeated_monsterList_codec);
            break;
          }
          case 16: {
            NetId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SceneObjectRsp : pb::IMessage<SceneObjectRsp> {
    private static readonly pb::MessageParser<SceneObjectRsp> _parser = new pb::MessageParser<SceneObjectRsp>(() => new SceneObjectRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SceneObjectRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneObjectRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneObjectRsp(SceneObjectRsp other) : this() {
      objectList_ = other.objectList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SceneObjectRsp Clone() {
      return new SceneObjectRsp(this);
    }

    /// <summary>Field number for the "ObjectList" field.</summary>
    public const int ObjectListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TCCamp.SceneObjectMsg> _repeated_objectList_codec
        = pb::FieldCodec.ForMessage(10, global::TCCamp.SceneObjectMsg.Parser);
    private readonly pbc::RepeatedField<global::TCCamp.SceneObjectMsg> objectList_ = new pbc::RepeatedField<global::TCCamp.SceneObjectMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TCCamp.SceneObjectMsg> ObjectList {
      get { return objectList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SceneObjectRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SceneObjectRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!objectList_.Equals(other.objectList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= objectList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      objectList_.WriteTo(output, _repeated_objectList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += objectList_.CalculateSize(_repeated_objectList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SceneObjectRsp other) {
      if (other == null) {
        return;
      }
      objectList_.Add(other.objectList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            objectList_.AddEntriesFrom(input, _repeated_objectList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Vec3Msg : pb::IMessage<Vec3Msg> {
    private static readonly pb::MessageParser<Vec3Msg> _parser = new pb::MessageParser<Vec3Msg>(() => new Vec3Msg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Vec3Msg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3Msg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3Msg(Vec3Msg other) : this() {
      x_ = other.x_;
      y_ = other.y_;
      z_ = other.z_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Vec3Msg Clone() {
      return new Vec3Msg(this);
    }

    /// <summary>Field number for the "x" field.</summary>
    public const int XFieldNumber = 1;
    private float x_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float X {
      get { return x_; }
      set {
        x_ = value;
      }
    }

    /// <summary>Field number for the "y" field.</summary>
    public const int YFieldNumber = 2;
    private float y_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Y {
      get { return y_; }
      set {
        y_ = value;
      }
    }

    /// <summary>Field number for the "z" field.</summary>
    public const int ZFieldNumber = 3;
    private float z_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Z {
      get { return z_; }
      set {
        z_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Vec3Msg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Vec3Msg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(X, other.X)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Y, other.Y)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Z, other.Z)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (X != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(X);
      if (Y != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Y);
      if (Z != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Z);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (X != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(X);
      }
      if (Y != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Y);
      }
      if (Z != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Z);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (X != 0F) {
        size += 1 + 4;
      }
      if (Y != 0F) {
        size += 1 + 4;
      }
      if (Z != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Vec3Msg other) {
      if (other == null) {
        return;
      }
      if (other.X != 0F) {
        X = other.X;
      }
      if (other.Y != 0F) {
        Y = other.Y;
      }
      if (other.Z != 0F) {
        Z = other.Z;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            X = input.ReadFloat();
            break;
          }
          case 21: {
            Y = input.ReadFloat();
            break;
          }
          case 29: {
            Z = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonsterAttributeMsg : pb::IMessage<MonsterAttributeMsg> {
    private static readonly pb::MessageParser<MonsterAttributeMsg> _parser = new pb::MessageParser<MonsterAttributeMsg>(() => new MonsterAttributeMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterAttributeMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterAttributeMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterAttributeMsg(MonsterAttributeMsg other) : this() {
      type_ = other.type_;
      name_ = other.name_;
      attack_ = other.attack_;
      hp_ = other.hp_;
      speed_ = other.speed_;
      value_ = other.value_;
      rebornTime_ = other.rebornTime_;
      detectRange_ = other.detectRange_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterAttributeMsg Clone() {
      return new MonsterAttributeMsg(this);
    }

    /// <summary>Field number for the "Type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::TCCamp.SceneObjectType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.SceneObjectType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Attack" field.</summary>
    public const int AttackFieldNumber = 3;
    private int attack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Attack {
      get { return attack_; }
      set {
        attack_ = value;
      }
    }

    /// <summary>Field number for the "Hp" field.</summary>
    public const int HpFieldNumber = 4;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 5;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "Value" field.</summary>
    public const int ValueFieldNumber = 6;
    private int value_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "RebornTime" field.</summary>
    public const int RebornTimeFieldNumber = 7;
    private float rebornTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RebornTime {
      get { return rebornTime_; }
      set {
        rebornTime_ = value;
      }
    }

    /// <summary>Field number for the "DetectRange" field.</summary>
    public const int DetectRangeFieldNumber = 8;
    private float detectRange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DetectRange {
      get { return detectRange_; }
      set {
        detectRange_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterAttributeMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterAttributeMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (Name != other.Name) return false;
      if (Attack != other.Attack) return false;
      if (Hp != other.Hp) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (Value != other.Value) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RebornTime, other.RebornTime)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DetectRange, other.DetectRange)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Attack != 0) hash ^= Attack.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (Value != 0) hash ^= Value.GetHashCode();
      if (RebornTime != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RebornTime);
      if (DetectRange != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DetectRange);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Attack != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Attack);
      }
      if (Hp != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Hp);
      }
      if (Speed != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Speed);
      }
      if (Value != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Value);
      }
      if (RebornTime != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(RebornTime);
      }
      if (DetectRange != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(DetectRange);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Attack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Attack);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (Value != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Value);
      }
      if (RebornTime != 0F) {
        size += 1 + 4;
      }
      if (DetectRange != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterAttributeMsg other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Attack != 0) {
        Attack = other.Attack;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.Value != 0) {
        Value = other.Value;
      }
      if (other.RebornTime != 0F) {
        RebornTime = other.RebornTime;
      }
      if (other.DetectRange != 0F) {
        DetectRange = other.DetectRange;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::TCCamp.SceneObjectType) input.ReadEnum();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Attack = input.ReadInt32();
            break;
          }
          case 32: {
            Hp = input.ReadInt32();
            break;
          }
          case 45: {
            Speed = input.ReadFloat();
            break;
          }
          case 48: {
            Value = input.ReadInt32();
            break;
          }
          case 61: {
            RebornTime = input.ReadFloat();
            break;
          }
          case 69: {
            DetectRange = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonsterAttributeRsp : pb::IMessage<MonsterAttributeRsp> {
    private static readonly pb::MessageParser<MonsterAttributeRsp> _parser = new pb::MessageParser<MonsterAttributeRsp>(() => new MonsterAttributeRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterAttributeRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterAttributeRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterAttributeRsp(MonsterAttributeRsp other) : this() {
      attributeList_ = other.attributeList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterAttributeRsp Clone() {
      return new MonsterAttributeRsp(this);
    }

    /// <summary>Field number for the "AttributeList" field.</summary>
    public const int AttributeListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TCCamp.MonsterAttributeMsg> _repeated_attributeList_codec
        = pb::FieldCodec.ForMessage(10, global::TCCamp.MonsterAttributeMsg.Parser);
    private readonly pbc::RepeatedField<global::TCCamp.MonsterAttributeMsg> attributeList_ = new pbc::RepeatedField<global::TCCamp.MonsterAttributeMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TCCamp.MonsterAttributeMsg> AttributeList {
      get { return attributeList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterAttributeRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterAttributeRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attributeList_.Equals(other.attributeList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attributeList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attributeList_.WriteTo(output, _repeated_attributeList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attributeList_.CalculateSize(_repeated_attributeList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterAttributeRsp other) {
      if (other == null) {
        return;
      }
      attributeList_.Add(other.attributeList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            attributeList_.AddEntriesFrom(input, _repeated_attributeList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonsterSynMsg : pb::IMessage<MonsterSynMsg> {
    private static readonly pb::MessageParser<MonsterSynMsg> _parser = new pb::MessageParser<MonsterSynMsg>(() => new MonsterSynMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonsterSynMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterSynMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterSynMsg(MonsterSynMsg other) : this() {
      id_ = other.id_;
      hp_ = other.hp_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      targetPos_ = other.targetPos_ != null ? other.targetPos_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonsterSynMsg Clone() {
      return new MonsterSynMsg(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Hp" field.</summary>
    public const int HpFieldNumber = 2;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::TCCamp.Vec3Msg position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.Vec3Msg Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Rotation" field.</summary>
    public const int RotationFieldNumber = 4;
    private global::TCCamp.Vec3Msg rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.Vec3Msg Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "TargetPos" field.</summary>
    public const int TargetPosFieldNumber = 5;
    private global::TCCamp.Vec3Msg targetPos_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.Vec3Msg TargetPos {
      get { return targetPos_; }
      set {
        targetPos_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonsterSynMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonsterSynMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Hp != other.Hp) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (!object.Equals(TargetPos, other.TargetPos)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (targetPos_ != null) hash ^= TargetPos.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Hp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Hp);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Rotation);
      }
      if (targetPos_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(TargetPos);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (targetPos_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TargetPos);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonsterSynMsg other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::TCCamp.Vec3Msg();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::TCCamp.Vec3Msg();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.targetPos_ != null) {
        if (targetPos_ == null) {
          targetPos_ = new global::TCCamp.Vec3Msg();
        }
        TargetPos.MergeFrom(other.TargetPos);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Hp = input.ReadInt32();
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::TCCamp.Vec3Msg();
            }
            input.ReadMessage(position_);
            break;
          }
          case 34: {
            if (rotation_ == null) {
              rotation_ = new global::TCCamp.Vec3Msg();
            }
            input.ReadMessage(rotation_);
            break;
          }
          case 42: {
            if (targetPos_ == null) {
              targetPos_ = new global::TCCamp.Vec3Msg();
            }
            input.ReadMessage(targetPos_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MonstersSynMsg : pb::IMessage<MonstersSynMsg> {
    private static readonly pb::MessageParser<MonstersSynMsg> _parser = new pb::MessageParser<MonstersSynMsg>(() => new MonstersSynMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MonstersSynMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonstersSynMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonstersSynMsg(MonstersSynMsg other) : this() {
      monsterList_ = other.monsterList_.Clone();
      netid_ = other.netid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MonstersSynMsg Clone() {
      return new MonstersSynMsg(this);
    }

    /// <summary>Field number for the "MonsterList" field.</summary>
    public const int MonsterListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TCCamp.MonsterSynMsg> _repeated_monsterList_codec
        = pb::FieldCodec.ForMessage(10, global::TCCamp.MonsterSynMsg.Parser);
    private readonly pbc::RepeatedField<global::TCCamp.MonsterSynMsg> monsterList_ = new pbc::RepeatedField<global::TCCamp.MonsterSynMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TCCamp.MonsterSynMsg> MonsterList {
      get { return monsterList_; }
    }

    /// <summary>Field number for the "Netid" field.</summary>
    public const int NetidFieldNumber = 2;
    private int netid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Netid {
      get { return netid_; }
      set {
        netid_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MonstersSynMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MonstersSynMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!monsterList_.Equals(other.monsterList_)) return false;
      if (Netid != other.Netid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= monsterList_.GetHashCode();
      if (Netid != 0) hash ^= Netid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      monsterList_.WriteTo(output, _repeated_monsterList_codec);
      if (Netid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Netid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += monsterList_.CalculateSize(_repeated_monsterList_codec);
      if (Netid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Netid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MonstersSynMsg other) {
      if (other == null) {
        return;
      }
      monsterList_.Add(other.monsterList_);
      if (other.Netid != 0) {
        Netid = other.Netid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            monsterList_.AddEntriesFrom(input, _repeated_monsterList_codec);
            break;
          }
          case 16: {
            Netid = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BulletSynMsg : pb::IMessage<BulletSynMsg> {
    private static readonly pb::MessageParser<BulletSynMsg> _parser = new pb::MessageParser<BulletSynMsg>(() => new BulletSynMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BulletSynMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletSynMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletSynMsg(BulletSynMsg other) : this() {
      id_ = other.id_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      isActive_ = other.isActive_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletSynMsg Clone() {
      return new BulletSynMsg(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::TCCamp.Vec3Msg position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.Vec3Msg Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::TCCamp.Vec3Msg rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.Vec3Msg Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "IsActive" field.</summary>
    public const int IsActiveFieldNumber = 4;
    private bool isActive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsActive {
      get { return isActive_; }
      set {
        isActive_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BulletSynMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BulletSynMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (IsActive != other.IsActive) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (IsActive != false) hash ^= IsActive.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (IsActive != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsActive);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (IsActive != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BulletSynMsg other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::TCCamp.Vec3Msg();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::TCCamp.Vec3Msg();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.IsActive != false) {
        IsActive = other.IsActive;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::TCCamp.Vec3Msg();
            }
            input.ReadMessage(position_);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              rotation_ = new global::TCCamp.Vec3Msg();
            }
            input.ReadMessage(rotation_);
            break;
          }
          case 32: {
            IsActive = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BulletsSynMsg : pb::IMessage<BulletsSynMsg> {
    private static readonly pb::MessageParser<BulletsSynMsg> _parser = new pb::MessageParser<BulletsSynMsg>(() => new BulletsSynMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BulletsSynMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletsSynMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletsSynMsg(BulletsSynMsg other) : this() {
      bulletList_ = other.bulletList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BulletsSynMsg Clone() {
      return new BulletsSynMsg(this);
    }

    /// <summary>Field number for the "BulletList" field.</summary>
    public const int BulletListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TCCamp.BulletSynMsg> _repeated_bulletList_codec
        = pb::FieldCodec.ForMessage(10, global::TCCamp.BulletSynMsg.Parser);
    private readonly pbc::RepeatedField<global::TCCamp.BulletSynMsg> bulletList_ = new pbc::RepeatedField<global::TCCamp.BulletSynMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TCCamp.BulletSynMsg> BulletList {
      get { return bulletList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BulletsSynMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BulletsSynMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bulletList_.Equals(other.bulletList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bulletList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      bulletList_.WriteTo(output, _repeated_bulletList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bulletList_.CalculateSize(_repeated_bulletList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BulletsSynMsg other) {
      if (other == null) {
        return;
      }
      bulletList_.Add(other.bulletList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            bulletList_.AddEntriesFrom(input, _repeated_bulletList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AttackReq : pb::IMessage<AttackReq> {
    private static readonly pb::MessageParser<AttackReq> _parser = new pb::MessageParser<AttackReq>(() => new AttackReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AttackReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackReq(AttackReq other) : this() {
      id_ = other.id_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AttackReq Clone() {
      return new AttackReq(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 2;
    private global::TCCamp.Vec3Msg position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.Vec3Msg Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Rotation" field.</summary>
    public const int RotationFieldNumber = 3;
    private global::TCCamp.Vec3Msg rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.Vec3Msg Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AttackReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AttackReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (position_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AttackReq other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::TCCamp.Vec3Msg();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::TCCamp.Vec3Msg();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            if (position_ == null) {
              position_ = new global::TCCamp.Vec3Msg();
            }
            input.ReadMessage(position_);
            break;
          }
          case 26: {
            if (rotation_ == null) {
              rotation_ = new global::TCCamp.Vec3Msg();
            }
            input.ReadMessage(rotation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RankListMsg : pb::IMessage<RankListMsg> {
    private static readonly pb::MessageParser<RankListMsg> _parser = new pb::MessageParser<RankListMsg>(() => new RankListMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankListMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankListMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankListMsg(RankListMsg other) : this() {
      name_ = other.name_;
      score_ = other.score_;
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankListMsg Clone() {
      return new RankListMsg(this);
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Score" field.</summary>
    public const int ScoreFieldNumber = 2;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "Time" field.</summary>
    public const int TimeFieldNumber = 3;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankListMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankListMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Score != other.Score) return false;
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Score != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Score);
      }
      if (Time != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankListMsg other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Score = input.ReadInt32();
            break;
          }
          case 24: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RankListReq : pb::IMessage<RankListReq> {
    private static readonly pb::MessageParser<RankListReq> _parser = new pb::MessageParser<RankListReq>(() => new RankListReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankListReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankListReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankListReq(RankListReq other) : this() {
      sceneId_ = other.sceneId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankListReq Clone() {
      return new RankListReq(this);
    }

    /// <summary>Field number for the "sceneId" field.</summary>
    public const int SceneIdFieldNumber = 1;
    private int sceneId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SceneId {
      get { return sceneId_; }
      set {
        sceneId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankListReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankListReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SceneId != other.SceneId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SceneId != 0) hash ^= SceneId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SceneId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SceneId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SceneId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SceneId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankListReq other) {
      if (other == null) {
        return;
      }
      if (other.SceneId != 0) {
        SceneId = other.SceneId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SceneId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameTimeRsp : pb::IMessage<GameTimeRsp> {
    private static readonly pb::MessageParser<GameTimeRsp> _parser = new pb::MessageParser<GameTimeRsp>(() => new GameTimeRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameTimeRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTimeRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTimeRsp(GameTimeRsp other) : this() {
      time_ = other.time_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameTimeRsp Clone() {
      return new GameTimeRsp(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameTimeRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameTimeRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0) hash ^= Time.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Time != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Time);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameTimeRsp other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RankListRsp : pb::IMessage<RankListRsp> {
    private static readonly pb::MessageParser<RankListRsp> _parser = new pb::MessageParser<RankListRsp>(() => new RankListRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankListRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankListRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankListRsp(RankListRsp other) : this() {
      rankList_ = other.rankList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankListRsp Clone() {
      return new RankListRsp(this);
    }

    /// <summary>Field number for the "RankList" field.</summary>
    public const int RankListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TCCamp.RankListMsg> _repeated_rankList_codec
        = pb::FieldCodec.ForMessage(10, global::TCCamp.RankListMsg.Parser);
    private readonly pbc::RepeatedField<global::TCCamp.RankListMsg> rankList_ = new pbc::RepeatedField<global::TCCamp.RankListMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TCCamp.RankListMsg> RankList {
      get { return rankList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankListRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankListRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rankList_.Equals(other.rankList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rankList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rankList_.WriteTo(output, _repeated_rankList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rankList_.CalculateSize(_repeated_rankList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankListRsp other) {
      if (other == null) {
        return;
      }
      rankList_.Add(other.rankList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rankList_.AddEntriesFrom(input, _repeated_rankList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RankListData : pb::IMessage<RankListData> {
    private static readonly pb::MessageParser<RankListData> _parser = new pb::MessageParser<RankListData>(() => new RankListData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RankListData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankListData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankListData(RankListData other) : this() {
      rankData_ = other.rankData_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RankListData Clone() {
      return new RankListData(this);
    }

    /// <summary>Field number for the "RankData" field.</summary>
    public const int RankDataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TCCamp.RankListRsp> _repeated_rankData_codec
        = pb::FieldCodec.ForMessage(10, global::TCCamp.RankListRsp.Parser);
    private readonly pbc::RepeatedField<global::TCCamp.RankListRsp> rankData_ = new pbc::RepeatedField<global::TCCamp.RankListRsp>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TCCamp.RankListRsp> RankData {
      get { return rankData_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RankListData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RankListData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rankData_.Equals(other.rankData_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rankData_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rankData_.WriteTo(output, _repeated_rankData_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rankData_.CalculateSize(_repeated_rankData_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RankListData other) {
      if (other == null) {
        return;
      }
      rankData_.Add(other.rankData_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            rankData_.AddEntriesFrom(input, _repeated_rankData_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CharacterStatueMsg : pb::IMessage<CharacterStatueMsg> {
    private static readonly pb::MessageParser<CharacterStatueMsg> _parser = new pb::MessageParser<CharacterStatueMsg>(() => new CharacterStatueMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterStatueMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterStatueMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterStatueMsg(CharacterStatueMsg other) : this() {
      netId_ = other.netId_;
      hp_ = other.hp_;
      speed_ = other.speed_;
      maxSpeed_ = other.maxSpeed_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      isDeath_ = other.isDeath_;
      isArmed_ = other.isArmed_;
      isImmunity_ = other.isImmunity_;
      actionType_ = other.actionType_;
      score_ = other.score_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterStatueMsg Clone() {
      return new CharacterStatueMsg(this);
    }

    /// <summary>Field number for the "NetId" field.</summary>
    public const int NetIdFieldNumber = 1;
    private int netId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetId {
      get { return netId_; }
      set {
        netId_ = value;
      }
    }

    /// <summary>Field number for the "Hp" field.</summary>
    public const int HpFieldNumber = 2;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 3;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "MaxSpeed" field.</summary>
    public const int MaxSpeedFieldNumber = 4;
    private float maxSpeed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MaxSpeed {
      get { return maxSpeed_; }
      set {
        maxSpeed_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 5;
    private global::TCCamp.Vec3Msg position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.Vec3Msg Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Rotation" field.</summary>
    public const int RotationFieldNumber = 6;
    private global::TCCamp.Vec3Msg rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.Vec3Msg Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "IsDeath" field.</summary>
    public const int IsDeathFieldNumber = 7;
    private bool isDeath_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsDeath {
      get { return isDeath_; }
      set {
        isDeath_ = value;
      }
    }

    /// <summary>Field number for the "IsArmed" field.</summary>
    public const int IsArmedFieldNumber = 8;
    private bool isArmed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsArmed {
      get { return isArmed_; }
      set {
        isArmed_ = value;
      }
    }

    /// <summary>Field number for the "IsImmunity" field.</summary>
    public const int IsImmunityFieldNumber = 9;
    private bool isImmunity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsImmunity {
      get { return isImmunity_; }
      set {
        isImmunity_ = value;
      }
    }

    /// <summary>Field number for the "actionType" field.</summary>
    public const int ActionTypeFieldNumber = 10;
    private int actionType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ActionType {
      get { return actionType_; }
      set {
        actionType_ = value;
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 11;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterStatueMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterStatueMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetId != other.NetId) return false;
      if (Hp != other.Hp) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MaxSpeed, other.MaxSpeed)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      if (IsDeath != other.IsDeath) return false;
      if (IsArmed != other.IsArmed) return false;
      if (IsImmunity != other.IsImmunity) return false;
      if (ActionType != other.ActionType) return false;
      if (Score != other.Score) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NetId != 0) hash ^= NetId.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (MaxSpeed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MaxSpeed);
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (IsDeath != false) hash ^= IsDeath.GetHashCode();
      if (IsArmed != false) hash ^= IsArmed.GetHashCode();
      if (IsImmunity != false) hash ^= IsImmunity.GetHashCode();
      if (ActionType != 0) hash ^= ActionType.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NetId);
      }
      if (Hp != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Hp);
      }
      if (Speed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Speed);
      }
      if (MaxSpeed != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(MaxSpeed);
      }
      if (position_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Rotation);
      }
      if (IsDeath != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsDeath);
      }
      if (IsArmed != false) {
        output.WriteRawTag(64);
        output.WriteBool(IsArmed);
      }
      if (IsImmunity != false) {
        output.WriteRawTag(72);
        output.WriteBool(IsImmunity);
      }
      if (ActionType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ActionType);
      }
      if (Score != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetId);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (MaxSpeed != 0F) {
        size += 1 + 4;
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (IsDeath != false) {
        size += 1 + 1;
      }
      if (IsArmed != false) {
        size += 1 + 1;
      }
      if (IsImmunity != false) {
        size += 1 + 1;
      }
      if (ActionType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionType);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterStatueMsg other) {
      if (other == null) {
        return;
      }
      if (other.NetId != 0) {
        NetId = other.NetId;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.MaxSpeed != 0F) {
        MaxSpeed = other.MaxSpeed;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::TCCamp.Vec3Msg();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::TCCamp.Vec3Msg();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      if (other.IsDeath != false) {
        IsDeath = other.IsDeath;
      }
      if (other.IsArmed != false) {
        IsArmed = other.IsArmed;
      }
      if (other.IsImmunity != false) {
        IsImmunity = other.IsImmunity;
      }
      if (other.ActionType != 0) {
        ActionType = other.ActionType;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NetId = input.ReadInt32();
            break;
          }
          case 16: {
            Hp = input.ReadInt32();
            break;
          }
          case 29: {
            Speed = input.ReadFloat();
            break;
          }
          case 37: {
            MaxSpeed = input.ReadFloat();
            break;
          }
          case 42: {
            if (position_ == null) {
              position_ = new global::TCCamp.Vec3Msg();
            }
            input.ReadMessage(position_);
            break;
          }
          case 50: {
            if (rotation_ == null) {
              rotation_ = new global::TCCamp.Vec3Msg();
            }
            input.ReadMessage(rotation_);
            break;
          }
          case 56: {
            IsDeath = input.ReadBool();
            break;
          }
          case 64: {
            IsArmed = input.ReadBool();
            break;
          }
          case 72: {
            IsImmunity = input.ReadBool();
            break;
          }
          case 80: {
            ActionType = input.ReadInt32();
            break;
          }
          case 88: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CharacterStatueReq : pb::IMessage<CharacterStatueReq> {
    private static readonly pb::MessageParser<CharacterStatueReq> _parser = new pb::MessageParser<CharacterStatueReq>(() => new CharacterStatueReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterStatueReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterStatueReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterStatueReq(CharacterStatueReq other) : this() {
      netId_ = other.netId_;
      speed_ = other.speed_;
      position_ = other.position_ != null ? other.position_.Clone() : null;
      rotation_ = other.rotation_ != null ? other.rotation_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterStatueReq Clone() {
      return new CharacterStatueReq(this);
    }

    /// <summary>Field number for the "NetId" field.</summary>
    public const int NetIdFieldNumber = 1;
    private int netId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetId {
      get { return netId_; }
      set {
        netId_ = value;
      }
    }

    /// <summary>Field number for the "Speed" field.</summary>
    public const int SpeedFieldNumber = 2;
    private float speed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Speed {
      get { return speed_; }
      set {
        speed_ = value;
      }
    }

    /// <summary>Field number for the "Position" field.</summary>
    public const int PositionFieldNumber = 3;
    private global::TCCamp.Vec3Msg position_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.Vec3Msg Position {
      get { return position_; }
      set {
        position_ = value;
      }
    }

    /// <summary>Field number for the "Rotation" field.</summary>
    public const int RotationFieldNumber = 4;
    private global::TCCamp.Vec3Msg rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.Vec3Msg Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterStatueReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterStatueReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetId != other.NetId) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Speed, other.Speed)) return false;
      if (!object.Equals(Position, other.Position)) return false;
      if (!object.Equals(Rotation, other.Rotation)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NetId != 0) hash ^= NetId.GetHashCode();
      if (Speed != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Speed);
      if (position_ != null) hash ^= Position.GetHashCode();
      if (rotation_ != null) hash ^= Rotation.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NetId);
      }
      if (Speed != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Speed);
      }
      if (position_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Position);
      }
      if (rotation_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Rotation);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetId);
      }
      if (Speed != 0F) {
        size += 1 + 4;
      }
      if (position_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Position);
      }
      if (rotation_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Rotation);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterStatueReq other) {
      if (other == null) {
        return;
      }
      if (other.NetId != 0) {
        NetId = other.NetId;
      }
      if (other.Speed != 0F) {
        Speed = other.Speed;
      }
      if (other.position_ != null) {
        if (position_ == null) {
          position_ = new global::TCCamp.Vec3Msg();
        }
        Position.MergeFrom(other.Position);
      }
      if (other.rotation_ != null) {
        if (rotation_ == null) {
          rotation_ = new global::TCCamp.Vec3Msg();
        }
        Rotation.MergeFrom(other.Rotation);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NetId = input.ReadInt32();
            break;
          }
          case 21: {
            Speed = input.ReadFloat();
            break;
          }
          case 26: {
            if (position_ == null) {
              position_ = new global::TCCamp.Vec3Msg();
            }
            input.ReadMessage(position_);
            break;
          }
          case 34: {
            if (rotation_ == null) {
              rotation_ = new global::TCCamp.Vec3Msg();
            }
            input.ReadMessage(rotation_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CharacterAnimSynMsg : pb::IMessage<CharacterAnimSynMsg> {
    private static readonly pb::MessageParser<CharacterAnimSynMsg> _parser = new pb::MessageParser<CharacterAnimSynMsg>(() => new CharacterAnimSynMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CharacterAnimSynMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterAnimSynMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterAnimSynMsg(CharacterAnimSynMsg other) : this() {
      animtType_ = other.animtType_;
      netId_ = other.netId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CharacterAnimSynMsg Clone() {
      return new CharacterAnimSynMsg(this);
    }

    /// <summary>Field number for the "AnimtType" field.</summary>
    public const int AnimtTypeFieldNumber = 1;
    private global::TCCamp.CharacterAnimType animtType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.CharacterAnimType AnimtType {
      get { return animtType_; }
      set {
        animtType_ = value;
      }
    }

    /// <summary>Field number for the "NetId" field.</summary>
    public const int NetIdFieldNumber = 2;
    private int netId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetId {
      get { return netId_; }
      set {
        netId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CharacterAnimSynMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CharacterAnimSynMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AnimtType != other.AnimtType) return false;
      if (NetId != other.NetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AnimtType != 0) hash ^= AnimtType.GetHashCode();
      if (NetId != 0) hash ^= NetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AnimtType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) AnimtType);
      }
      if (NetId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AnimtType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AnimtType);
      }
      if (NetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CharacterAnimSynMsg other) {
      if (other == null) {
        return;
      }
      if (other.AnimtType != 0) {
        AnimtType = other.AnimtType;
      }
      if (other.NetId != 0) {
        NetId = other.NetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            animtType_ = (global::TCCamp.CharacterAnimType) input.ReadEnum();
            break;
          }
          case 16: {
            NetId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetAsyncMsg : pb::IMessage<NetAsyncMsg> {
    private static readonly pb::MessageParser<NetAsyncMsg> _parser = new pb::MessageParser<NetAsyncMsg>(() => new NetAsyncMsg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetAsyncMsg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetAsyncMsg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetAsyncMsg(NetAsyncMsg other) : this() {
      characterStatueList_ = other.characterStatueList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetAsyncMsg Clone() {
      return new NetAsyncMsg(this);
    }

    /// <summary>Field number for the "CharacterStatueList" field.</summary>
    public const int CharacterStatueListFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TCCamp.CharacterStatueMsg> _repeated_characterStatueList_codec
        = pb::FieldCodec.ForMessage(10, global::TCCamp.CharacterStatueMsg.Parser);
    private readonly pbc::RepeatedField<global::TCCamp.CharacterStatueMsg> characterStatueList_ = new pbc::RepeatedField<global::TCCamp.CharacterStatueMsg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TCCamp.CharacterStatueMsg> CharacterStatueList {
      get { return characterStatueList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetAsyncMsg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetAsyncMsg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!characterStatueList_.Equals(other.characterStatueList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= characterStatueList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      characterStatueList_.WriteTo(output, _repeated_characterStatueList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += characterStatueList_.CalculateSize(_repeated_characterStatueList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetAsyncMsg other) {
      if (other == null) {
        return;
      }
      characterStatueList_.Add(other.characterStatueList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            characterStatueList_.AddEntriesFrom(input, _repeated_characterStatueList_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class RemoveCharacterRsp : pb::IMessage<RemoveCharacterRsp> {
    private static readonly pb::MessageParser<RemoveCharacterRsp> _parser = new pb::MessageParser<RemoveCharacterRsp>(() => new RemoveCharacterRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RemoveCharacterRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveCharacterRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveCharacterRsp(RemoveCharacterRsp other) : this() {
      netId_ = other.netId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RemoveCharacterRsp Clone() {
      return new RemoveCharacterRsp(this);
    }

    /// <summary>Field number for the "NetId" field.</summary>
    public const int NetIdFieldNumber = 1;
    private int netId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NetId {
      get { return netId_; }
      set {
        netId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RemoveCharacterRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RemoveCharacterRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NetId != other.NetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NetId != 0) hash ^= NetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NetId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(NetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RemoveCharacterRsp other) {
      if (other == null) {
        return;
      }
      if (other.NetId != 0) {
        NetId = other.NetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NetId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScoreRsp : pb::IMessage<ScoreRsp> {
    private static readonly pb::MessageParser<ScoreRsp> _parser = new pb::MessageParser<ScoreRsp>(() => new ScoreRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScoreRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreRsp(ScoreRsp other) : this() {
      score_ = other.score_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScoreRsp Clone() {
      return new ScoreRsp(this);
    }

    /// <summary>Field number for the "Score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScoreRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScoreRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Score != other.Score) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0) hash ^= Score.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Score);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScoreRsp other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Score = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameResultRsp : pb::IMessage<GameResultRsp> {
    private static readonly pb::MessageParser<GameResultRsp> _parser = new pb::MessageParser<GameResultRsp>(() => new GameResultRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameResultRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResultRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResultRsp(GameResultRsp other) : this() {
      score_ = other.score_;
      roomRank_ = other.roomRank_;
      gameTime_ = other.gameTime_;
      success_ = other.success_;
      isFinished_ = other.isFinished_;
      beatCount_ = other.beatCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameResultRsp Clone() {
      return new GameResultRsp(this);
    }

    /// <summary>Field number for the "Score" field.</summary>
    public const int ScoreFieldNumber = 1;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "RoomRank" field.</summary>
    public const int RoomRankFieldNumber = 2;
    private int roomRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int RoomRank {
      get { return roomRank_; }
      set {
        roomRank_ = value;
      }
    }

    /// <summary>Field number for the "GameTime" field.</summary>
    public const int GameTimeFieldNumber = 3;
    private int gameTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int GameTime {
      get { return gameTime_; }
      set {
        gameTime_ = value;
      }
    }

    /// <summary>Field number for the "Success" field.</summary>
    public const int SuccessFieldNumber = 4;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "IsFinished" field.</summary>
    public const int IsFinishedFieldNumber = 5;
    private bool isFinished_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFinished {
      get { return isFinished_; }
      set {
        isFinished_ = value;
      }
    }

    /// <summary>Field number for the "BeatCount" field.</summary>
    public const int BeatCountFieldNumber = 6;
    private int beatCount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BeatCount {
      get { return beatCount_; }
      set {
        beatCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameResultRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameResultRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Score != other.Score) return false;
      if (RoomRank != other.RoomRank) return false;
      if (GameTime != other.GameTime) return false;
      if (Success != other.Success) return false;
      if (IsFinished != other.IsFinished) return false;
      if (BeatCount != other.BeatCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Score != 0) hash ^= Score.GetHashCode();
      if (RoomRank != 0) hash ^= RoomRank.GetHashCode();
      if (GameTime != 0) hash ^= GameTime.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (IsFinished != false) hash ^= IsFinished.GetHashCode();
      if (BeatCount != 0) hash ^= BeatCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Score != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Score);
      }
      if (RoomRank != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(RoomRank);
      }
      if (GameTime != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GameTime);
      }
      if (Success != false) {
        output.WriteRawTag(32);
        output.WriteBool(Success);
      }
      if (IsFinished != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsFinished);
      }
      if (BeatCount != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BeatCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      if (RoomRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RoomRank);
      }
      if (GameTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameTime);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (IsFinished != false) {
        size += 1 + 1;
      }
      if (BeatCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BeatCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameResultRsp other) {
      if (other == null) {
        return;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      if (other.RoomRank != 0) {
        RoomRank = other.RoomRank;
      }
      if (other.GameTime != 0) {
        GameTime = other.GameTime;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.IsFinished != false) {
        IsFinished = other.IsFinished;
      }
      if (other.BeatCount != 0) {
        BeatCount = other.BeatCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Score = input.ReadInt32();
            break;
          }
          case 16: {
            RoomRank = input.ReadInt32();
            break;
          }
          case 24: {
            GameTime = input.ReadInt32();
            break;
          }
          case 32: {
            Success = input.ReadBool();
            break;
          }
          case 40: {
            IsFinished = input.ReadBool();
            break;
          }
          case 48: {
            BeatCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameContinueRsp : pb::IMessage<GameContinueRsp> {
    private static readonly pb::MessageParser<GameContinueRsp> _parser = new pb::MessageParser<GameContinueRsp>(() => new GameContinueRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameContinueRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameContinueRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameContinueRsp(GameContinueRsp other) : this() {
      needContinue_ = other.needContinue_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameContinueRsp Clone() {
      return new GameContinueRsp(this);
    }

    /// <summary>Field number for the "needContinue" field.</summary>
    public const int NeedContinueFieldNumber = 1;
    private bool needContinue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NeedContinue {
      get { return needContinue_; }
      set {
        needContinue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameContinueRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameContinueRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NeedContinue != other.NeedContinue) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NeedContinue != false) hash ^= NeedContinue.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NeedContinue != false) {
        output.WriteRawTag(8);
        output.WriteBool(NeedContinue);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NeedContinue != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameContinueRsp other) {
      if (other == null) {
        return;
      }
      if (other.NeedContinue != false) {
        NeedContinue = other.NeedContinue;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NeedContinue = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemConfig : pb::IMessage<ItemConfig> {
    private static readonly pb::MessageParser<ItemConfig> _parser = new pb::MessageParser<ItemConfig>(() => new ItemConfig());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemConfig> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemConfig() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemConfig(ItemConfig other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      introduce_ = other.introduce_;
      price_ = other.price_;
      iconName_ = other.iconName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemConfig Clone() {
      return new ItemConfig(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Introduce" field.</summary>
    public const int IntroduceFieldNumber = 3;
    private string introduce_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Introduce {
      get { return introduce_; }
      set {
        introduce_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Price" field.</summary>
    public const int PriceFieldNumber = 4;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "IconName" field.</summary>
    public const int IconNameFieldNumber = 5;
    private string iconName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string IconName {
      get { return iconName_; }
      set {
        iconName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemConfig);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemConfig other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Introduce != other.Introduce) return false;
      if (Price != other.Price) return false;
      if (IconName != other.IconName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Introduce.Length != 0) hash ^= Introduce.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (IconName.Length != 0) hash ^= IconName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Introduce.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Introduce);
      }
      if (Price != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Price);
      }
      if (IconName.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(IconName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Introduce.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Introduce);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (IconName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(IconName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemConfig other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Introduce.Length != 0) {
        Introduce = other.Introduce;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.IconName.Length != 0) {
        IconName = other.IconName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Introduce = input.ReadString();
            break;
          }
          case 32: {
            Price = input.ReadInt32();
            break;
          }
          case 42: {
            IconName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemConfigs : pb::IMessage<ItemConfigs> {
    private static readonly pb::MessageParser<ItemConfigs> _parser = new pb::MessageParser<ItemConfigs>(() => new ItemConfigs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemConfigs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemConfigs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemConfigs(ItemConfigs other) : this() {
      item_ = other.item_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemConfigs Clone() {
      return new ItemConfigs(this);
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TCCamp.ItemConfig> _repeated_item_codec
        = pb::FieldCodec.ForMessage(10, global::TCCamp.ItemConfig.Parser);
    private readonly pbc::RepeatedField<global::TCCamp.ItemConfig> item_ = new pbc::RepeatedField<global::TCCamp.ItemConfig>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TCCamp.ItemConfig> Item {
      get { return item_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemConfigs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemConfigs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!item_.Equals(other.item_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= item_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      item_.WriteTo(output, _repeated_item_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += item_.CalculateSize(_repeated_item_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemConfigs other) {
      if (other == null) {
        return;
      }
      item_.Add(other.item_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemInfo : pb::IMessage<ItemInfo> {
    private static readonly pb::MessageParser<ItemInfo> _parser = new pb::MessageParser<ItemInfo>(() => new ItemInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo(ItemInfo other) : this() {
      id_ = other.id_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemInfo Clone() {
      return new ItemInfo(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemInfo other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ShopItemRsp : pb::IMessage<ShopItemRsp> {
    private static readonly pb::MessageParser<ShopItemRsp> _parser = new pb::MessageParser<ShopItemRsp>(() => new ShopItemRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ShopItemRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopItemRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopItemRsp(ShopItemRsp other) : this() {
      item_ = other.item_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ShopItemRsp Clone() {
      return new ShopItemRsp(this);
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 1;
    private static readonly pb::FieldCodec<global::TCCamp.ItemInfo> _repeated_item_codec
        = pb::FieldCodec.ForMessage(10, global::TCCamp.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::TCCamp.ItemInfo> item_ = new pbc::RepeatedField<global::TCCamp.ItemInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TCCamp.ItemInfo> Item {
      get { return item_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ShopItemRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ShopItemRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!item_.Equals(other.item_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= item_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      item_.WriteTo(output, _repeated_item_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += item_.CalculateSize(_repeated_item_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ShopItemRsp other) {
      if (other == null) {
        return;
      }
      item_.Add(other.item_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BagItemRsp : pb::IMessage<BagItemRsp> {
    private static readonly pb::MessageParser<BagItemRsp> _parser = new pb::MessageParser<BagItemRsp>(() => new BagItemRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BagItemRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BagItemRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BagItemRsp(BagItemRsp other) : this() {
      money_ = other.money_;
      item_ = other.item_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BagItemRsp Clone() {
      return new BagItemRsp(this);
    }

    /// <summary>Field number for the "Money" field.</summary>
    public const int MoneyFieldNumber = 1;
    private int money_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Money {
      get { return money_; }
      set {
        money_ = value;
      }
    }

    /// <summary>Field number for the "Item" field.</summary>
    public const int ItemFieldNumber = 2;
    private static readonly pb::FieldCodec<global::TCCamp.ItemInfo> _repeated_item_codec
        = pb::FieldCodec.ForMessage(18, global::TCCamp.ItemInfo.Parser);
    private readonly pbc::RepeatedField<global::TCCamp.ItemInfo> item_ = new pbc::RepeatedField<global::TCCamp.ItemInfo>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::TCCamp.ItemInfo> Item {
      get { return item_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BagItemRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BagItemRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Money != other.Money) return false;
      if(!item_.Equals(other.item_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Money != 0) hash ^= Money.GetHashCode();
      hash ^= item_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Money != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Money);
      }
      item_.WriteTo(output, _repeated_item_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Money != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Money);
      }
      size += item_.CalculateSize(_repeated_item_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BagItemRsp other) {
      if (other == null) {
        return;
      }
      if (other.Money != 0) {
        Money = other.Money;
      }
      item_.Add(other.item_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Money = input.ReadInt32();
            break;
          }
          case 18: {
            item_.AddEntriesFrom(input, _repeated_item_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BuyReq : pb::IMessage<BuyReq> {
    private static readonly pb::MessageParser<BuyReq> _parser = new pb::MessageParser<BuyReq>(() => new BuyReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BuyReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyReq(BuyReq other) : this() {
      id_ = other.id_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BuyReq Clone() {
      return new BuyReq(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BuyReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BuyReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BuyReq other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteItemReq : pb::IMessage<DeleteItemReq> {
    private static readonly pb::MessageParser<DeleteItemReq> _parser = new pb::MessageParser<DeleteItemReq>(() => new DeleteItemReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteItemReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteItemReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteItemReq(DeleteItemReq other) : this() {
      id_ = other.id_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteItemReq Clone() {
      return new DeleteItemReq(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteItemReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteItemReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteItemReq other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddMoneyReq : pb::IMessage<AddMoneyReq> {
    private static readonly pb::MessageParser<AddMoneyReq> _parser = new pb::MessageParser<AddMoneyReq>(() => new AddMoneyReq());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddMoneyReq> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddMoneyReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddMoneyReq(AddMoneyReq other) : this() {
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddMoneyReq Clone() {
      return new AddMoneyReq(this);
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 1;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddMoneyReq);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddMoneyReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddMoneyReq other) {
      if (other == null) {
        return;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoneyRsp : pb::IMessage<MoneyRsp> {
    private static readonly pb::MessageParser<MoneyRsp> _parser = new pb::MessageParser<MoneyRsp>(() => new MoneyRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoneyRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoneyRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoneyRsp(MoneyRsp other) : this() {
      code_ = other.code_;
      num_ = other.num_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoneyRsp Clone() {
      return new MoneyRsp(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::TCCamp.StatueCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.StatueCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "Num" field.</summary>
    public const int NumFieldNumber = 2;
    private int num_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoneyRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoneyRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Num != other.Num) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (Num != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Num);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoneyRsp other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Num != 0) {
        Num = other.Num;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            code_ = (global::TCCamp.StatueCode) input.ReadEnum();
            break;
          }
          case 16: {
            Num = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatueCodeRsp : pb::IMessage<StatueCodeRsp> {
    private static readonly pb::MessageParser<StatueCodeRsp> _parser = new pb::MessageParser<StatueCodeRsp>(() => new StatueCodeRsp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatueCodeRsp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::TCCamp.PlayerReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatueCodeRsp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatueCodeRsp(StatueCodeRsp other) : this() {
      code_ = other.code_;
      reason_ = other.reason_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatueCodeRsp Clone() {
      return new StatueCodeRsp(this);
    }

    /// <summary>Field number for the "Code" field.</summary>
    public const int CodeFieldNumber = 1;
    private global::TCCamp.StatueCode code_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::TCCamp.StatueCode Code {
      get { return code_; }
      set {
        code_ = value;
      }
    }

    /// <summary>Field number for the "Reason" field.</summary>
    public const int ReasonFieldNumber = 2;
    private string reason_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Reason {
      get { return reason_; }
      set {
        reason_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatueCodeRsp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatueCodeRsp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Code != other.Code) return false;
      if (Reason != other.Reason) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Code != 0) hash ^= Code.GetHashCode();
      if (Reason.Length != 0) hash ^= Reason.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Code != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Code);
      }
      if (Reason.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Reason);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Code != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Code);
      }
      if (Reason.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Reason);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatueCodeRsp other) {
      if (other == null) {
        return;
      }
      if (other.Code != 0) {
        Code = other.Code;
      }
      if (other.Reason.Length != 0) {
        Reason = other.Reason;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            code_ = (global::TCCamp.StatueCode) input.ReadEnum();
            break;
          }
          case 18: {
            Reason = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
